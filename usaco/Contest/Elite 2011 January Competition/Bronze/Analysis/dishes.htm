<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
 <title>USACO JAN11 dishes Analysis</title> 
<style type="text/css">
body       {
	     font-family:Verdana,Helvetica,Tahoma,sans-serif,Arial,Lucida;
	   }
</style>
</head><body bgcolor="#ffffff">
<center><img src="dishes_files/cow1.jpg" width="742" height="118"></center>
<h2>USACO JAN11 Problem 'dishes' Analysis</h2>
<h4>by Rob Kolstad</h4>
<p>This task is all about stacks. If one had a proper stack
implementation, it devolves to simple follow-the-directions by
reading input and successively stacking dishes.

</p><p>C, C++, and Java provide syntax that makes stack implmentation
quite simple.  First declare an array and an array count:
</p><div><div id="highlighter_945072" class="syntaxhighlighter  cpp"><div
 class="toolbar"><span><a href="#" class="toolbar_item command_help 
help">?</a></span></div><table border="0" cellpadding="0" 
cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 
index0 alt2">1</div></td><td class="code"><div class="container"><div 
class="line number1 index0 alt2"><code class="cpp color1 bold">int</code>
 <code class="cpp plain">dishes[100], ndishes = 0;</code></div></div></td></tr></tbody></table></div></div>
In my programs, the notation <tt>n<i>variable</i></tt> is the count
of instances of <i>variable</i> (in our case, the number of dishes
stacked into the <tt>dishes[]</tt> array.
    
<p>To add a dish to the stack (a 'push' operation), one performs:
</p><div><div id="highlighter_938493" class="syntaxhighlighter  cpp"><div
 class="toolbar"><span><a href="#" class="toolbar_item command_help 
help">?</a></span></div><table border="0" cellpadding="0" 
cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 
index0 alt2">1</div></td><td class="code"><div class="container"><div 
class="line number1 index0 alt2"><code class="cpp plain">dishes[ndishes++]
 = something;</code></div></div></td></tr></tbody></table></div></div>
The notation <tt>x++</tt> means "use the value of x and then,
after you've used it, add 1 to x".

<p>To remove a dish from the stack (a 'pop' operation), use
</p><div><div id="highlighter_591643" class="syntaxhighlighter  cpp"><div
 class="toolbar"><span><a href="#" class="toolbar_item command_help 
help">?</a></span></div><table border="0" cellpadding="0" 
cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 
index0 alt2">1</div></td><td class="code"><div class="container"><div 
class="line number1 index0 alt2"><code class="cpp plain">oldtopofstack =
 dishes[--ndishes];</code></div></div></td></tr></tbody></table></div></div>
   
The notation <tt>--x</tt> means "subtract one from x and then use
that value".

<p>The solution program keeps track of:
</p><ul>
<li><tt>input[]</tt>: A stack of the initial set of dishes (carefully
initialized manually to 1..n where 1 is on the top instead of the
bottom)
</li><li><tt>cleaned[]</tt>: A stack of cleaned dishes; initially empty
but manipulated by the washing directives.
</li><li><tt>done[]</tt>: A stack of washed and dried dishes; initially 
  
empty but manipulated by drying directives. This stack provides the
final 'answer' to the task after all dishes are washed and dried.
</li>
<p>The input directives generally command an iterated set of
'pop one stack' and 'push the dish onto another stack' operations.
</p><p>See the program's comments for a tiny bit of further explanation.

</p><div><div id="highlighter_757306" class="syntaxhighlighter  cpp"><div
 class="toolbar"><span><a href="#" class="toolbar_item command_help 
help">?</a></span></div><table border="0" cellpadding="0" 
cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 
index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div 
class="line number3 index2 alt2">3</div><div class="line number4 index3 
alt1">4</div><div class="line number5 index4 alt2">5</div><div 
class="line number6 index5 alt1">6</div><div class="line number7 index6 
alt2">7</div><div class="line number8 index7 alt1">8</div><div 
class="line number9 index8 alt2">9</div><div class="line number10 index9
 alt1">10</div><div class="line number11 index10 alt2">11</div><div 
class="line number12 index11 alt1">12</div><div class="line number13 
index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div
 class="line number15 index14 alt2">15</div><div class="line number16 
index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div
 class="line number18 index17 alt1">18</div><div class="line number19 
index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div
 class="line number21 index20 alt2">21</div><div class="line number22 
index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div
 class="line number24 index23 alt1">24</div><div class="line number25 
index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div
 class="line number27 index26 alt2">27</div><div class="line number28 
index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div
 class="line number30 index29 alt1">30</div><div class="line number31 
index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div
 class="line number33 index32 alt2">33</div><div class="line number34 
index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div
 class="line number36 index35 alt1">36</div></td><td class="code"><div 
class="container"><div class="line number1 index0 alt2"><code class="cpp
 preprocessor">#include &lt;stdio.h&gt;</code></div><div class="line 
number2 index1 alt1"><code class="cpp preprocessor">#include 
&lt;stdlib.h&gt;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div
 class="line number4 index3 alt1"><code class="cpp color1 bold">int</code>
 <code class="cpp plain">n;</code></div><div class="line number5 index4 
alt2"><code class="cpp color1 bold">int</code> <code class="cpp plain">input[10000],
 ninput;</code></div><div class="line number6 index5 alt1"><code 
class="cpp color1 bold">int</code> <code class="cpp plain">cleaned[10000],
 ncleaned;</code></div><div class="line number7 index6 alt2"><code 
class="cpp color1 bold">int</code> <code class="cpp plain">done[10000], 
ndone;</code></div><div class="line number8 index7 alt1">&nbsp;</div><div
 class="line number9 index8 alt2"><code class="cpp plain">main() {</code></div><div
 class="line number10 index9 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp color1 bold">FILE</code> <code class="cpp plain">*fin = </code><code
 class="cpp functions bold">fopen</code> <code class="cpp plain">(</code><code
 class="cpp string">"dishes.in"</code><code class="cpp plain">, </code><code
 class="cpp string">"r"</code><code class="cpp plain">);</code></div><div
 class="line number11 index10 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp color1 bold">FILE</code> <code class="cpp plain">*fout = </code><code
 class="cpp functions bold">fopen</code> <code class="cpp plain">(</code><code
 class="cpp string">"dishes.out"</code><code class="cpp plain">, </code><code
 class="cpp string">"w"</code><code class="cpp plain">);</code></div><div
 class="line number12 index11 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">i, command, 
d;</code></div><div class="line number13 index12 alt2">&nbsp;</div><div 
class="line number14 index13 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp comments">/* input: */</code></div><div class="line number15
 index14 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp functions bold">fscanf</code> <code class="cpp plain">(fin, </code><code
 class="cpp string">"%d"</code><code class="cpp plain">, &amp;n);</code></div><div
 class="line number16 index15 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">for</code> <code class="cpp plain">(i = 1; i 
&lt;= n; i++)</code></div><div class="line number17 index16 alt2"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">input[ninput++] = n-i+1;</code></div><div class="line
 number18 index17 alt1">&nbsp;</div><div class="line number19 index18 
alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp comments">/* process the wash/dry directives: */</code></div><div
 class="line number20 index19 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">while</code> <code class="cpp plain">(ndone 
&lt; n) {</code></div><div class="line number21 index20 alt2"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp functions bold">fscanf</code> <code class="cpp plain">(fin, </code><code
 class="cpp string">"%d%d"</code><code class="cpp plain">, &amp;command,
 &amp;d);</code></div><div class="line number22 index21 alt1"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">switch</code> <code class="cpp plain">(command)
 {</code></div><div class="line number23 index22 alt2"><code class="cpp 
spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">case</code> <code class="cpp plain">1:</code></div><div
 class="line number24 index23 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">for</code> <code class="cpp plain">(i = 0; i 
&lt; d; i++)</code></div><div class="line number25 index24 alt2"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">cleaned[ncleaned++] = input[--ninput];</code></div><div
 class="line number26 index25 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">break</code><code class="cpp plain">;</code></div><div
 class="line number27 index26 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">case</code> <code class="cpp plain">2:</code></div><div
 class="line number28 index27 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">for</code> <code class="cpp plain">(i = 0; i 
&lt; d; i++)</code></div><div class="line number29 index28 alt2"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">done[ndone++] = cleaned[--ncleaned];</code></div><div
 class="line number30 index29 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">break</code><code class="cpp plain">;</code></div><div
 class="line number31 index30 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">}</code></div><div class="line number32 index31 alt1"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
plain">}</code></div><div class="line number33 index32 alt2"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
keyword bold">for</code> <code class="cpp plain">(i = 0; i &lt; n; i++)</code></div><div
 class="line number34 index33 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp functions bold">fprintf</code> <code class="cpp plain">(fout,
 </code><code class="cpp string">"%d\n"</code><code class="cpp plain">, 
done[n-1-i]);</code></div><div class="line number35 index34 alt2"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
functions bold">exit</code> <code class="cpp plain">(0);</code></div><div
 class="line number36 index35 alt1"><code class="cpp plain">}</code></div></div></td></tr></tbody></table></div></div>

<script type="text/javascript" src="dishes_files/shCore.js"></script>
<script type="text/javascript" src="dishes_files/shBrushCpp.js"></script>
<script type="text/javascript" src="dishes_files/shBrushJava.js"></script>
<link href="dishes_files/shCore.css" rel="stylesheet" type="text/css">
<link href="dishes_files/shThemeDefault.css" rel="stylesheet" 
type="text/css">
<script type="text/javascript">
     SyntaxHighlighter.all()
</script>


</ul></body></html>
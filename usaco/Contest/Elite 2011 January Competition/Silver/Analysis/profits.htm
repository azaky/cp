<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
 <title>USACO JAN11 profits Analysis</title> 
<style type="text/css">
body       {
	     font-family:Verdana,Helvetica,Tahoma,sans-serif,Arial,Lucida;
	   }
</style>
</head><body bgcolor="#ffffff">
<center><img src="profits_files/cow1.jpg" width="742" height="118"></center>
<h2>USACO JAN11 Problem 'profits' Analysis</h2>
<h4>by Neal Wu</h4>
<p>The first thing to notice is that it is clear that there is a
trivial brute-force algorithm to solve this problem: for every
consecutive subsequence of the list of numbers, find the sum of the
numbers, and take the maximum of all these sums. However, this
algorithm is O(N<sup>3</sup>), which is clearly way too slow, so
we need to reduce the running time down by finding a better
algorithm.</p>

<p>Note that it is possible to do some precomputation that allows
us to find the sum of any consecutive subsequence of numbers in
constant time. Create an array called total, and let total [i] be
the sum of the first i numbers. Then the sum of the numbers in the
range i to j (where i and j are 0-based), inclusive, is total [j +
1] - total [i].</p>

<p>(This is because total [j + 1] = P<sub>0</sub> + ... + P<sub>i</sub>
+ ... + P<sub>j</sub>, and total [i] = P<sub>0</sub> + ... +
P<sub>i-1</sub>, so after the terms in the subtraction are canceled
we are left with exactly the sum we wanted.)</p>

<p>Thus, we are now looking for the maximum value of total [j] -
total [i], for any i and j such that 0 &lt; i, j &lt;= N, and i &lt; j. 
We
can easily do this in O(N<sup>2</sup>) time by trying every possible
pair (i, j). However, this is still too slow for N &lt;= 100,000. To
make our algorithm run faster, note that if for some k &gt; j, total
[k] &gt; total [j], then k &gt; i and</p>

<p><tt>total [k] - total [i] &gt; total [j] - total [i],</tt></p>

<p>so we only need to consider the location of the maximum value
in the array total after element i to choose as our j.</p>

<p>Thus we can precompute the maximum values in the array total by
keeping an array maxtotal, such that maxtotal [i] is the maximum
value in the array total between element i and element N, inclusive.
We can then use the following recursive formula to calculate the
values of maxtotal in linear time:</p>

<p><tt>maxtotal [i] = max (maxtotal [i + 1], total [i])</tt>.</p>

<p>Thus, after precomputing these values, our answer is simply the
maximum value of maxtotal [i + 1] - total [i], for all i from 0 to
N - 1.</p>

<p>Our total running time is thus O(N), which is certainly enough
to pass the constraints of this problem.</p>

<p>The following is a solution that uses this idea:</p>

<div><div id="highlighter_55055" class="syntaxhighlighter  cpp"><div 
class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table
 border="0" cellpadding="0" cellspacing="0"><tbody><tr><td 
class="gutter"><div class="line number1 index0 alt2">1</div><div 
class="line number2 index1 alt1">2</div><div class="line number3 index2 
alt2">3</div><div class="line number4 index3 alt1">4</div><div 
class="line number5 index4 alt2">5</div><div class="line number6 index5 
alt1">6</div><div class="line number7 index6 alt2">7</div><div 
class="line number8 index7 alt1">8</div><div class="line number9 index8 
alt2">9</div><div class="line number10 index9 alt1">10</div><div 
class="line number11 index10 alt2">11</div><div class="line number12 
index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div
 class="line number14 index13 alt1">14</div><div class="line number15 
index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div
 class="line number17 index16 alt2">17</div><div class="line number18 
index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div
 class="line number20 index19 alt1">20</div><div class="line number21 
index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div
 class="line number23 index22 alt2">23</div><div class="line number24 
index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div
 class="line number26 index25 alt1">26</div><div class="line number27 
index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div
 class="line number29 index28 alt2">29</div><div class="line number30 
index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div
 class="line number32 index31 alt1">32</div><div class="line number33 
index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div
 class="line number35 index34 alt2">35</div><div class="line number36 
index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div
 class="line number38 index37 alt1">38</div><div class="line number39 
index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div
 class="line number41 index40 alt2">41</div><div class="line number42 
index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div
 class="line number44 index43 alt1">44</div><div class="line number45 
index44 alt2">45</div></td><td class="code"><div class="container"><div 
class="line number1 index0 alt2"><code class="cpp preprocessor">#include
 &lt;fstream&gt;</code></div><div class="line number2 index1 alt1"><code
 class="cpp keyword bold">using</code> <code class="cpp keyword bold">namespace</code>
 <code class="cpp plain">std;</code></div><div class="line number3 
index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code 
class="cpp plain">ofstream fout (</code><code class="cpp string">"profits.out"</code><code
 class="cpp plain">);</code></div><div class="line number5 index4 alt2"><code
 class="cpp plain">ifstream fin (</code><code class="cpp string">"profits.in"</code><code
 class="cpp plain">);</code></div><div class="line number6 index5 alt1">&nbsp;</div><div
 class="line number7 index6 alt2"><code class="cpp keyword bold">const</code>
 <code class="cpp color1 bold">int</code> <code class="cpp plain">INF = 
1000000000;</code></div><div class="line number8 index7 alt1"><code 
class="cpp keyword bold">const</code> <code class="cpp color1 bold">int</code>
 <code class="cpp plain">MAXN = 100005;</code></div><div class="line 
number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code
 class="cpp color1 bold">int</code> <code class="cpp plain">N;</code></div><div
 class="line number11 index10 alt2"><code class="cpp color1 bold">int</code>
 <code class="cpp plain">p [MAXN];</code></div><div class="line number12
 index11 alt1"><code class="cpp color1 bold">int</code> <code class="cpp
 plain">total [MAXN];</code></div><div class="line number13 index12 
alt2"><code class="cpp color1 bold">int</code> <code class="cpp plain">maxtotal
 [MAXN];</code></div><div class="line number14 index13 alt1">&nbsp;</div><div
 class="line number15 index14 alt2"><code class="cpp color1 bold">int</code>
 <code class="cpp plain">main () {</code></div><div class="line number16
 index15 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">fin &gt;&gt; N;</code></div><div class="line number17
 index16 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div
 class="line number18 index17 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">for</code> <code class="cpp plain">(</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">i = 0; i 
&lt; N; i++)</code></div><div class="line number19 index18 alt2"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">fin &gt;&gt; p [i];</code></div><div class="line 
number20 index19 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div
 class="line number21 index20 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp comments">// compute totals:</code></div><div class="line 
number22 index21 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">total [0] = 0;</code></div><div class="line number23 
index22 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div
 class="line number24 index23 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">for</code> <code class="cpp plain">(</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">i = 1; i 
&lt;= N; i++)</code></div><div class="line number25 index24 alt2"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">total [i] = total [i - 1] + p [i - 1];</code></div><div
 class="line number26 index25 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div
 class="line number27 index26 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp comments">// compute maxtotals:</code></div><div class="line
 number28 index27 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">for</code> <code class="cpp plain">(</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">i = 0; i 
&lt; MAXN; i++)</code></div><div class="line number29 index28 alt2"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">maxtotal [i] = -INF;</code></div><div class="line 
number30 index29 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div
 class="line number31 index30 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">maxtotal [N] = total [N];</code></div><div 
class="line number32 index31 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div
 class="line number33 index32 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">for</code> <code class="cpp plain">(</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">i = N - 1; i
 &gt;= 0; i--)</code></div><div class="line number34 index33 alt1"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">maxtotal [i] = max (maxtotal [i + 1], total [i]);</code></div><div
 class="line number35 index34 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div
 class="line number36 index35 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp comments">// calculate result:</code></div><div class="line 
number37 index36 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">ans = -INF;</code></div><div
 class="line number38 index37 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div
 class="line number39 index38 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">for</code> <code class="cpp plain">(</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">i = 0; i 
&lt; N; i++)</code></div><div class="line number40 index39 alt1"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">ans = max (ans, maxtotal [i + 1] - total [i]);</code></div><div
 class="line number41 index40 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div
 class="line number42 index41 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">fout &lt;&lt; ans &lt;&lt; </code><code class="cpp 
string">'\n'</code><code class="cpp plain">;</code></div><div 
class="line number43 index42 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div
 class="line number44 index43 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">return</code> <code class="cpp plain">0;</code></div><div
 class="line number45 index44 alt2"><code class="cpp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p>In addition, there is an O(N log N) divide and conquer approach as 
follows:
</p>

<div><div id="highlighter_344145" class="syntaxhighlighter  cpp"><div 
class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table
 border="0" cellpadding="0" cellspacing="0"><tbody><tr><td 
class="gutter"><div class="line number1 index0 alt2">1</div><div 
class="line number2 index1 alt1">2</div><div class="line number3 index2 
alt2">3</div><div class="line number4 index3 alt1">4</div><div 
class="line number5 index4 alt2">5</div><div class="line number6 index5 
alt1">6</div><div class="line number7 index6 alt2">7</div><div 
class="line number8 index7 alt1">8</div><div class="line number9 index8 
alt2">9</div><div class="line number10 index9 alt1">10</div><div 
class="line number11 index10 alt2">11</div><div class="line number12 
index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div
 class="line number14 index13 alt1">14</div><div class="line number15 
index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div
 class="line number17 index16 alt2">17</div><div class="line number18 
index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div
 class="line number20 index19 alt1">20</div><div class="line number21 
index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div
 class="line number23 index22 alt2">23</div><div class="line number24 
index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div
 class="line number26 index25 alt1">26</div><div class="line number27 
index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div
 class="line number29 index28 alt2">29</div><div class="line number30 
index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div
 class="line number32 index31 alt1">32</div><div class="line number33 
index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div
 class="line number35 index34 alt2">35</div><div class="line number36 
index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div
 class="line number38 index37 alt1">38</div><div class="line number39 
index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div
 class="line number41 index40 alt2">41</div><div class="line number42 
index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div
 class="line number44 index43 alt1">44</div><div class="line number45 
index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div
 class="line number47 index46 alt2">47</div><div class="line number48 
index47 alt1">48</div><div class="line number49 index48 alt2">49</div><div
 class="line number50 index49 alt1">50</div><div class="line number51 
index50 alt2">51</div><div class="line number52 index51 alt1">52</div><div
 class="line number53 index52 alt2">53</div><div class="line number54 
index53 alt1">54</div><div class="line number55 index54 alt2">55</div><div
 class="line number56 index55 alt1">56</div><div class="line number57 
index56 alt2">57</div><div class="line number58 index57 alt1">58</div><div
 class="line number59 index58 alt2">59</div><div class="line number60 
index59 alt1">60</div><div class="line number61 index60 alt2">61</div><div
 class="line number62 index61 alt1">62</div><div class="line number63 
index62 alt2">63</div><div class="line number64 index63 alt1">64</div><div
 class="line number65 index64 alt2">65</div></td><td class="code"><div 
class="container"><div class="line number1 index0 alt2"><code class="cpp
 preprocessor">#include &lt;cstdio&gt;</code></div><div class="line 
number2 index1 alt1"><code class="cpp keyword bold">using</code> <code 
class="cpp keyword bold">namespace</code> <code class="cpp plain">std;</code></div><div
 class="line number3 index2 alt2">&nbsp;</div><div class="line number4 
index3 alt1"><code class="cpp color1 bold">FILE</code> <code class="cpp 
plain">*fout = </code><code class="cpp functions bold">fopen</code> <code
 class="cpp plain">(</code><code class="cpp string">"profits.out"</code><code
 class="cpp plain">, </code><code class="cpp string">"w"</code><code 
class="cpp plain">);</code></div><div class="line number5 index4 alt2"><code
 class="cpp color1 bold">FILE</code> <code class="cpp plain">*fin = </code><code
 class="cpp functions bold">fopen</code> <code class="cpp plain">(</code><code
 class="cpp string">"profits.in"</code><code class="cpp plain">, </code><code
 class="cpp string">"r"</code><code class="cpp plain">);</code></div><div
 class="line number6 index5 alt1">&nbsp;</div><div class="line number7 
index6 alt2"><code class="cpp keyword bold">const</code> <code 
class="cpp color1 bold">int</code> <code class="cpp plain">INF = 
1000000000;</code></div><div class="line number8 index7 alt1"><code 
class="cpp keyword bold">const</code> <code class="cpp color1 bold">int</code>
 <code class="cpp plain">MAXN = 100005;</code></div><div class="line 
number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code
 class="cpp color1 bold">int</code> <code class="cpp plain">N;</code></div><div
 class="line number11 index10 alt2"><code class="cpp color1 bold">int</code>
 <code class="cpp plain">nums [MAXN];</code></div><div class="line 
number12 index11 alt1"><code class="cpp color1 bold">int</code> <code 
class="cpp plain">ans = -INF;</code></div><div class="line number13 
index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code 
class="cpp comments">// finds the best sum in the interval [left, right)</code></div><div
 class="line number15 index14 alt2"><code class="cpp keyword bold">void</code>
 <code class="cpp plain">solve (</code><code class="cpp color1 bold">int</code>
 <code class="cpp plain">left, </code><code class="cpp color1 bold">int</code>
 <code class="cpp plain">right) {</code></div><div class="line number16 
index15 alt1"><code class="cpp spaces">&nbsp;&nbsp;</code><code 
class="cpp comments">// base case</code></div><div class="line number17 
index16 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">if</code> <code class="cpp plain">(left + 1 
&gt;= right) {</code></div><div class="line number18 index17 alt1"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">if</code> <code class="cpp plain">(nums [left]
 &gt; ans)</code></div><div class="line number19 index18 alt2"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">ans = nums [left];</code></div><div class="line 
number20 index19 alt1">&nbsp;</div><div class="line number21 index20 
alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">return</code><code class="cpp plain">;</code></div><div
 class="line number22 index21 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">}</code></div><div class="line number23 index22 alt2">&nbsp;</div><div
 class="line number24 index23 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">mid = ((left
 + right) &gt;&gt; 1);</code></div><div class="line number25 index24 
alt2">&nbsp;</div><div class="line number26 index25 alt1"><code 
class="cpp spaces">&nbsp;&nbsp;</code><code class="cpp comments">// 
break up into two intervals</code></div><div class="line number27 
index26 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">solve (left, mid);</code></div><div class="line 
number28 index27 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">solve (mid, right);</code></div><div class="line 
number29 index28 alt2">&nbsp;</div><div class="line number30 index29 
alt1">&nbsp;</div><div class="line number31 index30 alt2"><code 
class="cpp spaces">&nbsp;&nbsp;</code><code class="cpp comments">// find
 the best sum that goes through the middle (this can be done greedily)</code></div><div
 class="line number32 index31 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">best1 = 
-INF, best2 = -INF, sum = 0;</code></div><div class="line number33 
index32 alt2">&nbsp;</div><div class="line number34 index33 alt1"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
keyword bold">for</code> <code class="cpp plain">(</code><code 
class="cpp color1 bold">int</code> <code class="cpp plain">i = mid - 1; i
 &gt;= left; i--) {</code></div><div class="line number35 index34 alt2"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">sum += nums [i];</code></div><div class="line 
number36 index35 alt1">&nbsp;</div><div class="line number37 index36 
alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">if</code> <code class="cpp plain">(sum &gt; 
best1)</code></div><div class="line number38 index37 alt1"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">best1 = sum;</code></div><div class="line number39 
index38 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">}</code></div><div class="line number40 index39 alt1">&nbsp;</div><div
 class="line number41 index40 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">sum = 0;</code></div><div class="line number42 
index41 alt1">&nbsp;</div><div class="line number43 index42 alt2"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
keyword bold">for</code> <code class="cpp plain">(</code><code 
class="cpp color1 bold">int</code> <code class="cpp plain">i = mid; i 
&lt; right; i++) {</code></div><div class="line number44 index43 alt1"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">sum += nums [i];</code></div><div class="line 
number45 index44 alt2">&nbsp;</div><div class="line number46 index45 
alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">if</code> <code class="cpp plain">(sum &gt; 
best2)</code></div><div class="line number47 index46 alt2"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">best2 = sum;</code></div><div class="line number48 
index47 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">}</code></div><div class="line number49 index48 alt2">&nbsp;</div><div
 class="line number50 index49 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">if</code> <code class="cpp plain">(best1 + 
best2 &gt; ans)</code></div><div class="line number51 index50 alt2"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">ans = best1 + best2;</code></div><div class="line 
number52 index51 alt1"><code class="cpp plain">}</code></div><div 
class="line number53 index52 alt2">&nbsp;</div><div class="line number54
 index53 alt1"><code class="cpp color1 bold">int</code> <code class="cpp
 plain">main () {</code></div><div class="line number55 index54 alt2"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
functions bold">fscanf</code> <code class="cpp plain">(fin, </code><code
 class="cpp string">"%d"</code><code class="cpp plain">, &amp;N);</code></div><div
 class="line number56 index55 alt1">&nbsp;</div><div class="line 
number57 index56 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">for</code> <code class="cpp plain">(</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">i = 0; i 
&lt; N; i++)</code></div><div class="line number58 index57 alt1"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
functions bold">fscanf</code> <code class="cpp plain">(fin, </code><code
 class="cpp string">"%d"</code><code class="cpp plain">, nums + i);</code></div><div
 class="line number59 index58 alt2">&nbsp;</div><div class="line 
number60 index59 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">solve (0, N);</code></div><div class="line number61 
index60 alt2">&nbsp;</div><div class="line number62 index61 alt1"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
functions bold">fprintf</code> <code class="cpp plain">(fout, </code><code
 class="cpp string">"%d\n"</code><code class="cpp plain">, ans);</code></div><div
 class="line number63 index62 alt2">&nbsp;</div><div class="line 
number64 index63 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">return</code> <code class="cpp plain">0;</code></div><div
 class="line number65 index64 alt2"><code class="cpp plain">}</code></div></div></td></tr></tbody></table></div></div>

<p>Finally, the following is a solution that also uses O(N) time,
but uses only O(1) memory! Why it works is left for the reader to
determine.</p>

<div><div id="highlighter_275469" class="syntaxhighlighter  cpp"><div 
class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table
 border="0" cellpadding="0" cellspacing="0"><tbody><tr><td 
class="gutter"><div class="line number1 index0 alt2">1</div><div 
class="line number2 index1 alt1">2</div><div class="line number3 index2 
alt2">3</div><div class="line number4 index3 alt1">4</div><div 
class="line number5 index4 alt2">5</div><div class="line number6 index5 
alt1">6</div><div class="line number7 index6 alt2">7</div><div 
class="line number8 index7 alt1">8</div><div class="line number9 index8 
alt2">9</div><div class="line number10 index9 alt1">10</div><div 
class="line number11 index10 alt2">11</div><div class="line number12 
index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div
 class="line number14 index13 alt1">14</div><div class="line number15 
index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div
 class="line number17 index16 alt2">17</div><div class="line number18 
index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div
 class="line number20 index19 alt1">20</div><div class="line number21 
index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div
 class="line number23 index22 alt2">23</div><div class="line number24 
index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div
 class="line number26 index25 alt1">26</div><div class="line number27 
index26 alt2">27</div><div class="line number28 index27 alt1">28</div></td><td
 class="code"><div class="container"><div class="line number1 index0 
alt2"><code class="cpp preprocessor">#include &lt;cstdio&gt;</code></div><div
 class="line number2 index1 alt1"><code class="cpp keyword bold">using</code>
 <code class="cpp keyword bold">namespace</code> <code class="cpp plain">std;</code></div><div
 class="line number3 index2 alt2">&nbsp;</div><div class="line number4 
index3 alt1"><code class="cpp color1 bold">FILE</code> <code class="cpp 
plain">*fout = </code><code class="cpp functions bold">fopen</code> <code
 class="cpp plain">(</code><code class="cpp string">"profits.out"</code><code
 class="cpp plain">, </code><code class="cpp string">"w"</code><code 
class="cpp plain">);</code></div><div class="line number5 index4 alt2"><code
 class="cpp color1 bold">FILE</code> <code class="cpp plain">*fin = </code><code
 class="cpp functions bold">fopen</code> <code class="cpp plain">(</code><code
 class="cpp string">"profits.in"</code><code class="cpp plain">, </code><code
 class="cpp string">"r"</code><code class="cpp plain">);</code></div><div
 class="line number6 index5 alt1">&nbsp;</div><div class="line number7 
index6 alt2"><code class="cpp keyword bold">const</code> <code 
class="cpp color1 bold">int</code> <code class="cpp plain">INF = 
1000000000;</code></div><div class="line number8 index7 alt1">&nbsp;</div><div
 class="line number9 index8 alt2"><code class="cpp color1 bold">int</code>
 <code class="cpp plain">N, t, sum = 0, ans = -INF;</code></div><div 
class="line number10 index9 alt1">&nbsp;</div><div class="line number11 
index10 alt2"><code class="cpp color1 bold">int</code> <code class="cpp 
plain">main () {</code></div><div class="line number12 index11 alt1"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
functions bold">fscanf</code> <code class="cpp plain">(fin, </code><code
 class="cpp string">"%d"</code><code class="cpp plain">, &amp;N);</code></div><div
 class="line number13 index12 alt2">&nbsp;</div><div class="line 
number14 index13 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">for</code> <code class="cpp plain">(</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">i = 0; i 
&lt; N; i++) {</code></div><div class="line number15 index14 alt2"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp functions bold">fscanf</code> <code class="cpp plain">(fin, </code><code
 class="cpp string">"%d"</code><code class="cpp plain">, &amp;t);</code></div><div
 class="line number16 index15 alt1">&nbsp;</div><div class="line 
number17 index16 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">sum += t;</code></div><div class="line number18 
index17 alt1">&nbsp;</div><div class="line number19 index18 alt2"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">if</code> <code class="cpp plain">(sum &gt; 
ans)</code></div><div class="line number20 index19 alt1"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">ans = sum;</code></div><div class="line number21 
index20 alt2">&nbsp;</div><div class="line number22 index21 alt1"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">if</code> <code class="cpp plain">(sum &lt; 0)</code></div><div
 class="line number23 index22 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">sum = 0;</code></div><div class="line number24 
index23 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">}</code></div><div class="line number25 index24 alt2">&nbsp;</div><div
 class="line number26 index25 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp functions bold">fprintf</code> <code class="cpp plain">(fout,
 </code><code class="cpp string">"%d\n"</code><code class="cpp plain">, 
ans);</code></div><div class="line number27 index26 alt2"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
keyword bold">return</code> <code class="cpp plain">0;</code></div><div 
class="line number28 index27 alt1"><code class="cpp plain">}</code></div></div></td></tr></tbody></table></div></div>

<script type="text/javascript" src="profits_files/shCore.js"></script>
<script type="text/javascript" src="profits_files/shBrushCpp.js"></script>
<script type="text/javascript" src="profits_files/shBrushJava.js"></script>
<link href="profits_files/shCore.css" rel="stylesheet" type="text/css">
<link href="profits_files/shThemeDefault.css" rel="stylesheet" 
type="text/css">
<script type="text/javascript">
     SyntaxHighlighter.all()
</script>


</body></html>
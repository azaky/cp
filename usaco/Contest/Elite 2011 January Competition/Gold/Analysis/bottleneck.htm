<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
 <title>USACO JAN11 bottleneck Analysis</title> 
<style type="text/css">
body       {
	     font-family:Verdana,Helvetica,Tahoma,sans-serif,Arial,Lucida;
	   }
</style>
</head><body bgcolor="#ffffff">
<center><img src="bottleneck_files/cow1.jpg" width="742" height="118"></center>
<h2>USACO JAN11 Problem 'bottleneck' Analysis</h2>
<h4>by Michael Cohen</h4>
The first key fact towards solving this problem is that the optimal 
strategy is 
to simply greedily move as much as possible from the up to field 1.  
This can 
be implemented simply: at each step, loop through the fields in a 
bottom-up 
order (i.e. each field is visited before the field it leads to) and 
transfer 
the maximum amount possible out (this is either the capacity of the path
 or the 
number of cows on the field).  It is clearly optimal: by induction on 
subtrees, 
the flow on each path is maximal at each step, and it is always better 
for cows 
to be closer to field 1.

<p>However, implementing this algorithm directly will yield a solution 
that 
takes 
time O(N*T), where T is the latest time asked for.  This is far too 
slow; it is 
not even polynomial time (in the sense of the size of the input in bits,
 since 
in B bits a time of 2^B can be described).

</p><p>The next important fact is that the flow through each path is 
monotonically 
decreasing over the course of the algorithm.  This can again be proven 
by 
induction on subtrees: it is clearly true for fields with nothing coming
 in.  
For other fields, the amount coming in to the field is monotonically 
decreasing 
by the induction hypothesis.  As long as this amount is greater than the
 
capacity of the path, the outward flow will be constantly equal to the 
capacity; as soon as it is not, the number of cows standing on the field
 is 
monotonically decreasing (as until there are no cows remaining, cows 
will be 
taken off the field to fill up the remaining capacity); the flow chosen 
by the 
greedy algorithm is thus monotonically decreasing as well.

</p><p>Now, consider the total number of cows that moves out of each 
field by any 
given time T.  This is clearly less than the smaller of the total number
 of 
cows beginning on or moving into that field (i.e. the starting cows plus
 total 
amount moving out of the field's "children") and M*T, where M is the 
capacity 
of the outward path.  Somewhat less obviously, it is in fact equal to 
the 
smaller of these two quantities.  This is because the flow into the 
field over 
time is decreasing, so the total number of cows arrived is a concave 
function; 
thus, if the total number of cows beginning on or moving into that field
 is 
greater than or equal to M*T then at time S it will be at least M*S and 
there 
will always be M cows available to send; otherwise one can send M cows 
until 
there are no longer M available and then just send all cows possible 
(ending 
with no cows on the field).  Interestingly, this algorithm really 
corresponds 
to doing one big time step of the greedy algorithm.

</p><p>This algorithm is much better, running in time O(N*K); it is a 
polynomial 
time 
algorithm.  Many competitors found this solution, and in fact nobody did
 better 
(perhaps because this was only a 3 hour contest).  However, more is 
needed to 
get full credit.

</p><p>The trick is to consider the state of the greedy algorithm over 
time.  As 
long 
as the flows on edges are not changing, the number of cows on each field
 is a 
linear function of time.  The flow on any edge is its capacity until 
there are 
too few cows on the field and moving in to sustain this; at this point, 
all the 
cows on the field disappear after 1 timestep and after this all the flow
 out of 
the field is equal to the flow in.  This occurs when the linear function
 for 
that field's is about to hit 0.

</p><p>The algorithm tracks linear functions on nodes.  It maintains a 
priority 
queue 
of events corresponding to when the current linear function for fields 
will hit 
0.  However, when these events occur, a large number of other fields' 
linear 
functions could potentially change.  However, once a path is running 
below 
capacity, that path is no constraint at all.  Thus, one could simply 
consider 
all the paths running into the field that just ran out to be directly 
running 
into its parent from then on (and since the remaining cows will move to 
the 
parent in the next timestep, they can be moved as well).  To do this 
efficiently, one uses a union-find data structure to store groups of 
nodes 
whose paths are currently connected to the same node; when a node runs 
out, its 
set is merged with that of its parent (and the corresponding linear 
functions 
are added); the new time to run out is pushed into the priority queue.  
Finally, before each event all remaining times that occur before that 
event are 
evaluated using the linear function for field 1.  The union-find data 
structure 
can be implemented very easily in conjunction with existing data 
structures of 
the problem; only path compression is needed as this guarantees a log N 
runtime 
of the operations.  Overall, the simulation part of the algorithm is O(N
 log N) 
from the priority queue and the union find, and sorting the list of 
times is 
O(K log K).

</p><p>Below is Michael's solution. -Neal</p>

<div><div id="highlighter_553716" class="syntaxhighlighter  cpp"><div 
class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table
 border="0" cellpadding="0" cellspacing="0"><tbody><tr><td 
class="gutter"><div class="line number1 index0 alt2">1</div><div 
class="line number2 index1 alt1">2</div><div class="line number3 index2 
alt2">3</div><div class="line number4 index3 alt1">4</div><div 
class="line number5 index4 alt2">5</div><div class="line number6 index5 
alt1">6</div><div class="line number7 index6 alt2">7</div><div 
class="line number8 index7 alt1">8</div><div class="line number9 index8 
alt2">9</div><div class="line number10 index9 alt1">10</div><div 
class="line number11 index10 alt2">11</div><div class="line number12 
index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div
 class="line number14 index13 alt1">14</div><div class="line number15 
index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div
 class="line number17 index16 alt2">17</div><div class="line number18 
index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div
 class="line number20 index19 alt1">20</div><div class="line number21 
index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div
 class="line number23 index22 alt2">23</div><div class="line number24 
index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div
 class="line number26 index25 alt1">26</div><div class="line number27 
index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div
 class="line number29 index28 alt2">29</div><div class="line number30 
index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div
 class="line number32 index31 alt1">32</div><div class="line number33 
index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div
 class="line number35 index34 alt2">35</div><div class="line number36 
index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div
 class="line number38 index37 alt1">38</div><div class="line number39 
index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div
 class="line number41 index40 alt2">41</div><div class="line number42 
index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div
 class="line number44 index43 alt1">44</div><div class="line number45 
index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div
 class="line number47 index46 alt2">47</div><div class="line number48 
index47 alt1">48</div><div class="line number49 index48 alt2">49</div><div
 class="line number50 index49 alt1">50</div><div class="line number51 
index50 alt2">51</div><div class="line number52 index51 alt1">52</div><div
 class="line number53 index52 alt2">53</div><div class="line number54 
index53 alt1">54</div><div class="line number55 index54 alt2">55</div><div
 class="line number56 index55 alt1">56</div><div class="line number57 
index56 alt2">57</div><div class="line number58 index57 alt1">58</div><div
 class="line number59 index58 alt2">59</div><div class="line number60 
index59 alt1">60</div><div class="line number61 index60 alt2">61</div><div
 class="line number62 index61 alt1">62</div><div class="line number63 
index62 alt2">63</div><div class="line number64 index63 alt1">64</div><div
 class="line number65 index64 alt2">65</div><div class="line number66 
index65 alt1">66</div><div class="line number67 index66 alt2">67</div><div
 class="line number68 index67 alt1">68</div><div class="line number69 
index68 alt2">69</div><div class="line number70 index69 alt1">70</div><div
 class="line number71 index70 alt2">71</div><div class="line number72 
index71 alt1">72</div><div class="line number73 index72 alt2">73</div><div
 class="line number74 index73 alt1">74</div><div class="line number75 
index74 alt2">75</div><div class="line number76 index75 alt1">76</div><div
 class="line number77 index76 alt2">77</div><div class="line number78 
index77 alt1">78</div><div class="line number79 index78 alt2">79</div><div
 class="line number80 index79 alt1">80</div><div class="line number81 
index80 alt2">81</div><div class="line number82 index81 alt1">82</div><div
 class="line number83 index82 alt2">83</div><div class="line number84 
index83 alt1">84</div><div class="line number85 index84 alt2">85</div><div
 class="line number86 index85 alt1">86</div><div class="line number87 
index86 alt2">87</div><div class="line number88 index87 alt1">88</div><div
 class="line number89 index88 alt2">89</div><div class="line number90 
index89 alt1">90</div><div class="line number91 index90 alt2">91</div><div
 class="line number92 index91 alt1">92</div><div class="line number93 
index92 alt2">93</div></td><td class="code"><div class="container"><div 
class="line number1 index0 alt2"><code class="cpp preprocessor">#include
 &lt;fstream&gt;</code></div><div class="line number2 index1 alt1"><code
 class="cpp preprocessor">#include &lt;queue&gt;</code></div><div 
class="line number3 index2 alt2"><code class="cpp preprocessor">#include
 &lt;algorithm&gt;</code></div><div class="line number4 index3 alt1"><code
 class="cpp preprocessor">#define endl '\n'</code></div><div class="line
 number5 index4 alt2"><code class="cpp keyword bold">using</code> <code 
class="cpp keyword bold">namespace</code> <code class="cpp plain">std;</code></div><div
 class="line number6 index5 alt1">&nbsp;</div><div class="line number7 
index6 alt2"><code class="cpp color1 bold">int</code> <code class="cpp 
plain">N, K;</code></div><div class="line number8 index7 alt1"><code 
class="cpp color1 bold">int</code> <code class="cpp plain">P[100000];</code></div><div
 class="line number9 index8 alt2"><code class="cpp color1 bold">long</code>
 <code class="cpp color1 bold">long</code> <code class="cpp plain">M[100000];</code></div><div
 class="line number10 index9 alt1"><code class="cpp color1 bold">long</code>
 <code class="cpp color1 bold">long</code> <code class="cpp plain">current[100000];</code></div><div
 class="line number11 index10 alt2"><code class="cpp color1 bold">long</code>
 <code class="cpp color1 bold">long</code> <code class="cpp plain">incoming[100000];</code></div><div
 class="line number12 index11 alt1"><code class="cpp color1 bold">long</code>
 <code class="cpp color1 bold">long</code> <code class="cpp plain">when[100000];</code></div><div
 class="line number13 index12 alt2"><code class="cpp color1 bold">bool</code>
 <code class="cpp plain">alive[100000];</code></div><div class="line 
number14 index13 alt1">&nbsp;</div><div class="line number15 index14 
alt2"><code class="cpp keyword bold">struct</code> <code class="cpp 
plain">event {</code></div><div class="line number16 index15 alt1"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
color1 bold">int</code> <code class="cpp plain">n;</code></div><div 
class="line number17 index16 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">t;</code></div><div
 class="line number18 index17 alt1"><code class="cpp plain">};</code></div><div
 class="line number19 index18 alt2">&nbsp;</div><div class="line 
number20 index19 alt1"><code class="cpp plain">event T[10000];</code></div><div
 class="line number21 index20 alt2"><code class="cpp color1 bold">long</code>
 <code class="cpp color1 bold">long</code> <code class="cpp plain">ans[10000];</code></div><div
 class="line number22 index21 alt1">&nbsp;</div><div class="line 
number23 index22 alt2"><code class="cpp color1 bold">bool</code> <code 
class="cpp plain">operator&lt;(event a, event b) {</code></div><div 
class="line number24 index23 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">return</code> <code class="cpp plain">a.t &gt;
 b.t;</code></div><div class="line number25 index24 alt2"><code 
class="cpp plain">}</code></div><div class="line number26 index25 alt1">&nbsp;</div><div
 class="line number27 index26 alt2"><code class="cpp color1 bold">int</code>
 <code class="cpp plain">find(</code><code class="cpp color1 bold">int</code>
 <code class="cpp plain">i) {</code></div><div class="line number28 
index27 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">if</code> <code class="cpp plain">(alive[i]) </code><code
 class="cpp keyword bold">return</code> <code class="cpp plain">i;</code></div><div
 class="line number29 index28 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">else</code> <code class="cpp keyword bold">return</code>
 <code class="cpp plain">(P[i] = find(P[i]));</code></div><div 
class="line number30 index29 alt1"><code class="cpp plain">}</code></div><div
 class="line number31 index30 alt2">&nbsp;</div><div class="line 
number32 index31 alt1"><code class="cpp color1 bold">int</code> <code 
class="cpp plain">kill(</code><code class="cpp color1 bold">int</code> <code
 class="cpp plain">i) {</code></div><div class="line number33 index32 
alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code 
class="cpp color1 bold">int</code> <code class="cpp plain">p = 
find(P[i]);</code></div><div class="line number34 index33 alt1"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
plain">current[p] += current[i];</code></div><div class="line number35 
index34 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">incoming[p] += incoming[i]-M[i];</code></div><div 
class="line number36 index35 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">alive[i] = </code><code class="cpp keyword bold">false</code><code
 class="cpp plain">;</code></div><div class="line number37 index36 alt2"><code
 class="cpp plain">}</code></div><div class="line number38 index37 alt1">&nbsp;</div><div
 class="line number39 index38 alt2"><code class="cpp color1 bold">int</code>
 <code class="cpp plain">main()</code></div><div class="line number40 
index39 alt1"><code class="cpp plain">{</code></div><div class="line 
number41 index40 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">ifstream inp(</code><code class="cpp string">"bottleneck.in"</code><code
 class="cpp plain">);</code></div><div class="line number42 index41 
alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code 
class="cpp plain">ofstream outp(</code><code class="cpp string">"bottleneck.out"</code><code
 class="cpp plain">);</code></div><div class="line number43 index42 
alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div
 class="line number44 index43 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">inp &gt;&gt; N &gt;&gt; K;</code></div><div 
class="line number45 index44 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">alive[0] = </code><code class="cpp keyword bold">true</code><code
 class="cpp plain">;</code></div><div class="line number46 index45 alt1"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
keyword bold">for</code> <code class="cpp plain">(</code><code 
class="cpp color1 bold">int</code> <code class="cpp plain">i = 1; i &lt;
 N; i++) {</code></div><div class="line number47 index46 alt2"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">inp &gt;&gt; P[i] &gt;&gt; current[i] &gt;&gt; M[i];</code></div><div
 class="line number48 index47 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">P[i]--;</code></div><div class="line number49 index48
 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">alive[i] = </code><code class="cpp keyword bold">true</code><code
 class="cpp plain">;</code></div><div class="line number50 index49 alt1"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">incoming[P[i]] += M[i];</code></div><div class="line 
number51 index50 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">}</code></div><div class="line number52 index51 alt1"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div 
class="line number53 index52 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">for</code> <code class="cpp plain">(</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">i = 0; i 
&lt; K; i++) {</code></div><div class="line number54 index53 alt1"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">inp &gt;&gt; T[i].t;</code></div><div class="line 
number55 index54 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">T[i].n = i;</code></div><div class="line number56 
index55 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">}</code></div><div class="line number57 index56 alt2"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
plain">sort(T, T+K);</code></div><div class="line number58 index57 alt1"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div 
class="line number59 index58 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">priority_queue&lt;event&gt; pq;</code></div><div 
class="line number60 index59 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">for</code> <code class="cpp plain">(</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">i = 1; i 
&lt; N; i++) {</code></div><div class="line number61 index60 alt2"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">if</code> <code class="cpp plain">(M[i] &gt; 
incoming[i]) {</code></div><div class="line number62 index61 alt1"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">when[i] = current[i]/(M[i]-incoming[i]);</code></div><div
 class="line number63 index62 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">event e = { i, when[i] };</code></div><div 
class="line number64 index63 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">pq.push(e);</code></div><div class="line number65 
index64 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">}</code></div><div class="line number66 index65 alt1"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
plain">}</code></div><div class="line number67 index66 alt2"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div 
class="line number68 index67 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp color1 bold">int</code> <code class="cpp functions bold">ctime</code>
 <code class="cpp plain">= K-1;</code></div><div class="line number69 
index68 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">while</code> <code class="cpp plain">(!pq.empty())
 {</code></div><div class="line number70 index69 alt1"><code class="cpp 
spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code 
class="cpp plain">event f = pq.top();</code></div><div class="line 
number71 index70 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">pq.pop();</code></div><div class="line number72 
index71 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div
 class="line number73 index72 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">while</code> <code class="cpp plain">(</code><code
 class="cpp functions bold">ctime</code> <code class="cpp plain">&gt;= 0
 &amp;&amp; f.t &gt;= T[</code><code class="cpp functions bold">ctime</code><code
 class="cpp plain">].t) {</code></div><div class="line number74 index73 
alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">ans[T[</code><code class="cpp functions bold">ctime</code><code
 class="cpp plain">].n] = current[0]+T[</code><code class="cpp functions
 bold">ctime</code><code class="cpp plain">].t*incoming[0];</code></div><div
 class="line number75 index74 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp functions bold">ctime</code><code class="cpp plain">--;</code></div><div
 class="line number76 index75 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">}</code></div><div class="line number77 index76 alt2"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div
 class="line number78 index77 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">if</code> <code class="cpp plain">(!alive[f.n]
 || f.t != when[f.n]) </code><code class="cpp keyword bold">continue</code><code
 class="cpp plain">;</code></div><div class="line number79 index78 alt2"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">kill(f.n);</code></div><div class="line number80 
index79 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">p = 
find(f.n);</code></div><div class="line number81 index80 alt2"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">if</code> <code class="cpp plain">(M[p] &gt; 
incoming[p]) {</code></div><div class="line number82 index81 alt1"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">when[p] = (current[p]-1)/(M[p]-incoming[p]);</code></div><div
 class="line number83 index82 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">event e = { p, when[p] };</code></div><div 
class="line number84 index83 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">pq.push(e);</code></div><div class="line number85 
index84 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">}</code></div><div class="line number86 index85 alt1"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
plain">}</code></div><div class="line number87 index86 alt2"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
keyword bold">while</code> <code class="cpp plain">(</code><code 
class="cpp functions bold">ctime</code> <code class="cpp plain">&gt;= 0)
 {</code></div><div class="line number88 index87 alt1"><code class="cpp 
spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code 
class="cpp plain">ans[T[</code><code class="cpp functions bold">ctime</code><code
 class="cpp plain">].n] = current[0]+T[</code><code class="cpp functions
 bold">ctime</code><code class="cpp plain">].t*incoming[0];</code></div><div
 class="line number89 index88 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp functions bold">ctime</code><code class="cpp plain">--;</code></div><div
 class="line number90 index89 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">}</code></div><div class="line number91 index90 alt2"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
keyword bold">for</code> <code class="cpp plain">(</code><code 
class="cpp color1 bold">int</code> <code class="cpp plain">i = 0; i &lt;
 K; i++) outp &lt;&lt; ans[i] &lt;&lt; endl;</code></div><div 
class="line number92 index91 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">return</code> <code class="cpp plain">0;</code></div><div
 class="line number93 index92 alt2"><code class="cpp plain">}</code></div></div></td></tr></tbody></table></div></div>

<script type="text/javascript" src="bottleneck_files/shCore.js"></script>
<script type="text/javascript" src="bottleneck_files/shBrushCpp.js"></script>
<script type="text/javascript" src="bottleneck_files/shBrushJava.js"></script>
<link href="bottleneck_files/shCore.css" rel="stylesheet" 
type="text/css">
<link href="bottleneck_files/shThemeDefault.css" rel="stylesheet" 
type="text/css">
<script type="text/javascript">
     SyntaxHighlighter.all()
</script>


</body></html>
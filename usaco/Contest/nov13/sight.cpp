/*
ID: a_zaky01
PROG: sight
LANG: C++
*/

#include <vector>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <algorithm>
#include <utility>
#include <numeric>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <limits>
using namespace std;

#ifdef DEBUG
	#define debug(...) printf(__VA_ARGS__)
	#define GetTime() fprintf(stderr,"Running time: %.3lf second\n",((double)clock())/CLOCKS_PER_SEC)
#else
	#define debug(...) 
	#define GetTime() 
#endif

//type definitions
typedef long long ll;
typedef double db;
typedef pair<int,int> pii;
typedef vector<int> vint;

//abbreviations
#define A first
#define B second
#define MP make_pair
#define PB push_back

//macros
#define REP(i,n) for (int i = 0; i < (n); ++i)
#define REPD(i,n) for (int i = (n)-1; 0 <= i; --i)
#define FOR(i,a,b) for (int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for (int i = (a); (b) <= i; --i)
#define FORIT(it,c) for (__typeof ((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define ALL(a) (a).begin(),(a).end()
#define SZ(a) ((int)(a).size())
#define RESET(a,x) memset(a,x,sizeof(a))
#define EXIST(a,s) ((s).find(a) != (s).end())
#define MX(a,b) a = max((a),(b));
#define MN(a,b) a = min((a),(b));

inline void OPEN(const string &s) {
	freopen((s + ".in").c_str(), "r", stdin);
	freopen((s + ".out").c_str(), "w", stdout);
}

/* -------------- end of azaky's template -------------- */
double _acos(double x) {
	double ret = acos(x);
	if (ret == ret) return ret;
	if (x < 0) return acos(-1.0);
	return acos(1.0);
}
#define acos _acos
#define sqr(x) ((x)*(x))

const double PI = acos(-1);
const double EPS = 1e-9;
const double INF = 1e300;

struct point{
	double x, y;
	point() { x = y = 0; }
	point(double x, double y) : x(x), y(y) {}
};

double dist(const point &p){
	/* returns distance of p from the origin */
	return sqrt(sqr(p.x) + sqr(p.y));
}
double dist(const point &p1, const point &p2) {
	/* returns distance between two points */
	return sqrt(sqr(p1.x - p2.x) + sqr(p1.y - p2.y));
}

/* ------------------- end of azaky's geometry template ---------------------- */

#define MAXN 200200
db r;
point p[MAXN];
map<db,int> _idx;
int n, ii, idx[MAXN], has[MAXN], prev[MAXN], bit[MAXN], ans;

void update(int x, int v){
	for (; x <= ii; x += (x & -x)) bit[x] += v;
}
int query(int x){
	int ret = 0;
	for (; x > 0; x -= (x & -x)) ret += bit[x];
	return ret;
}
int query(int x, int y){
	return query(y) - query(x-1);
}

int main(){
	OPEN("sight");
	scanf("%d%lf",&n,&r);
	FOR(i,1,n) scanf("%lf%lf",&p[i].x,&p[i].y);
	FOR(i,1,n){
		db polarAngle = atan2(p[i].y,p[i].x);
		db theta = acos(r/dist(p[i]));
		db ang1 = polarAngle - theta;
		db ang2 = polarAngle + theta;
		while (ang1 < 0.) ang1 += 2.*PI;
		while (ang1 > 2.*PI) ang1 -= 2.*PI;
		while (ang2 < 0.) ang2 += 2.*PI;
		while (ang2 > 2.*PI) ang2 -= 2.*PI;
		while (ang1 > ang2) ang2 += 2.*PI;
		_idx[ang1] = _idx[ang2] = _idx[ang1 + 2.*PI] = i;
	}
	ii = 0;
	FORIT(it,_idx){
		ii++;
		idx[ii] = it->B;
//		printf("%d (%.3lf rad)\n",it->B,it->A);
	}
	assert(ii == 3*n);
	FOR(i,1,ii){
		int v = idx[i];
		if (has[v] == 0){
			prev[v] = i;
			update(i,+1);
		}
		else if (has[v] == 1){
			ans += query(prev[v]+1,i-1);
		}
		else if (has[v] == 2){
			update(i,+1);
		}
		has[v]++;
	}
	printf("%d\n",ans);
	
	return 0;
}

/* Generated by UsacoTemp v3.0 */

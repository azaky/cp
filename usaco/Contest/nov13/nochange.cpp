/*
ID: a_zaky01
PROG: nochange
LANG: C++
*/

#include <vector>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <algorithm>
#include <utility>
#include <numeric>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <limits>
using namespace std;

#ifdef DEBUG
	#define debug(...) printf(__VA_ARGS__)
	#define GetTime() fprintf(stderr,"Running time: %.3lf second\n",((double)clock())/CLOCKS_PER_SEC)
#else
	#define debug(...) 
	#define GetTime() 
#endif

//type definitions
typedef long long ll;
typedef double db;
typedef pair<int,int> pii;
typedef vector<int> vint;

//abbreviations
#define A first
#define B second
#define MP make_pair
#define PB push_back

//macros
#define REP(i,n) for (int i = 0; i < (n); ++i)
#define REPD(i,n) for (int i = (n)-1; 0 <= i; --i)
#define FOR(i,a,b) for (int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for (int i = (a); (b) <= i; --i)
#define FORIT(it,c) for (__typeof ((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define ALL(a) (a).begin(),(a).end()
#define SZ(a) ((int)(a).size())
#define RESET(a,x) memset(a,x,sizeof(a))
#define EXIST(a,s) ((s).find(a) != (s).end())
#define MX(a,b) a = max((a),(b));
#define MN(a,b) a = min((a),(b));

inline void OPEN(const string &s) {
	freopen((s + ".in").c_str(), "r", stdin);
	freopen((s + ".out").c_str(), "w", stdout);
}

/* -------------- end of azaky's template -------------- */

#define MAXN 100100
int k, n, coin[20], a[MAXN], sum[MAXN], last[MAXN], prev, ans;

int getSum(int l, int r){
	return sum[r] - sum[l-1];
}

int main(){
	OPEN("nochange");
	scanf("%d%d",&k,&n);
	REP(i,k) scanf("%d",&coin[i]);
	FOR(i,1,n) scanf("%d",&a[i]);
	FOR(i,1,n) sum[i] = sum[i-1] + a[i];
	REP(mask,(1 << k)){
		last[mask] = 0;
		REP(i,k){
			if ((mask & (1 << i)) == 0) continue;
			prev = last[mask ^ (1 << i)];
			MX(last[mask],prev);
			if (last[mask] == n) break;
			if (a[prev+1] > coin[i]) continue;
			/* do binary search */
			int l = prev+1;
			int r = n;
			while (l != r){
				int m = (l + r + 1) >> 1;
				if (getSum(prev+1,m) <= coin[i]) l = m;
				else r = m-1;
			}
			MX(last[mask],l);
			if (last[mask] == n) break;
		}
	}
	ans = -1;
	REP(mask,(1 << k)){
		if (last[mask] == n){
			int total = 0;
			REP(i,k) if ((mask & (1 << i)) == 0) total += coin[i];
			MX(ans,total);
		}
	}
	printf("%d\n",ans);
			
	return 0;
}

/* Generated by UsacoTemp v3.0 */

/*
ID: a_zaky01
PROG: cardgame
LANG: C++
*/

#include <vector>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <algorithm>
#include <utility>
#include <numeric>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <limits>
using namespace std;

#ifdef DEBUG
	#define debug(...) printf(__VA_ARGS__)
	#define GetTime() fprintf(stderr,"Running time: %.3lf second\n",((double)clock())/CLOCKS_PER_SEC)
#else
	#define debug(...) 
	#define GetTime() 
#endif

//type definitions
typedef long long ll;
typedef double db;
typedef pair<int,int> pii;
typedef vector<int> vint;

//abbreviations
#define A first
#define B second
#define MP make_pair
#define PB push_back

//macros
#define REP(i,n) for (int i = 0; i < (n); ++i)
#define REPD(i,n) for (int i = (n)-1; 0 <= i; --i)
#define FOR(i,a,b) for (int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for (int i = (a); (b) <= i; --i)
#define FORIT(it,c) for (__typeof ((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define ALL(a) (a).begin(),(a).end()
#define SZ(a) ((int)(a).size())
#define RESET(a,x) memset(a,x,sizeof(a))
#define EXIST(a,s) ((s).find(a) != (s).end())
#define MX(a,b) a = max((a),(b));
#define MN(a,b) a = min((a),(b));

inline void OPEN(const string &s) {
	freopen((s + ".in").c_str(), "r", stdin);
	freopen((s + ".out").c_str(), "w", stdout);
}

/* -------------- end of azaky's template -------------- */

#define MAXN 100100

int n, a[MAXN], notbessie[MAXN];
vector<int> bessie;

int main(){
	OPEN("cardgame");
	scanf("%d", &n);
	REP(i, n) {
		scanf("%d", &a[i]);
		notbessie[a[i]] = 1;
	}
	FORD(i, 2*n, 1) {
		if (!notbessie[i]) {
			bessie.PB(i);
		}
	}
	assert(SZ(bessie) == n);
	int n2 = n / 2;
	sort(a, a + n2); reverse(a, a + n2);
	sort(a + n2, a + n);

	int wins = 0;
	int ibessie = 0;
	REP(i, n2) {
		if (bessie[ibessie] > a[i]) {
			wins++;
			ibessie++;
		} else {
			// do nothing
		}
	}
	ibessie = n - 1;
	FOR(i, n2, n - 1) {
		if (bessie[ibessie] < a[i]) {
			wins++;
			ibessie--;
		} else {
			// do nothing
		}
	}
	printf("%d\n", wins);

	return 0;
}

/* Generated by UsacoTemp v3.0 */

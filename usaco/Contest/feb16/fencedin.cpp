/*
ID: a_zaky01
PROG: fencedin
LANG: C++
*/

#include <vector>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <algorithm>
#include <utility>
#include <numeric>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <limits>
using namespace std;

#ifdef DEBUG
	#define debug(...) printf(__VA_ARGS__)
	#define GetTime() fprintf(stderr,"Running time: %.3lf second\n",((double)clock())/CLOCKS_PER_SEC)
#else
	#define debug(...) 
	#define GetTime() 
#endif

//type definitions
typedef long long ll;
typedef double db;
typedef pair<int,int> pii;
typedef vector<int> vint;

//abbreviations
#define A first
#define B second
#define MP make_pair
#define PB push_back

//macros
#define REP(i,n) for (int i = 0; i < (n); ++i)
#define REPD(i,n) for (int i = (n)-1; 0 <= i; --i)
#define FOR(i,a,b) for (int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for (int i = (a); (b) <= i; --i)
#define FORIT(it,c) for (__typeof ((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define ALL(a) (a).begin(),(a).end()
#define SZ(a) ((int)(a).size())
#define RESET(a,x) memset(a,x,sizeof(a))
#define EXIST(a,s) ((s).find(a) != (s).end())
#define MX(a,b) a = max((a),(b));
#define MN(a,b) a = min((a),(b));

inline void OPEN(const string &s) {
	freopen((s + ".in").c_str(), "r", stdin);
	freopen((s + ".out").c_str(), "w", stdout);
}

/* -------------- end of azaky's template -------------- */

#define MAXN 25200

ll xa, xb, a[MAXN], b[MAXN];
int n, m, p[2], c[2];

int main(){
	OPEN("fencedin");
	scanf("%lld%lld%d%d", &xa, &xb, &n, &m);
	a[n + 1] = xa;
	b[m + 1] = xb;
	a[0] = b[0] = 0;
	REP(i, n) {
		scanf("%lld", &a[i + 1]);
	}
	REP(i, m) {
		scanf("%lld", &b[i + 1]);
	}
	n++; m++;
	sort(a, a + n);
	sort(b, b + m);

	vector<pair<ll, int> > x;
	REP(i, n) {
		x.PB(MP(a[i + 1] - a[i], 0));
	}
	REP(i, m) {
		x.PB(MP(b[i + 1] - b[i], 1));
	}
	p[0] = n;
	p[1] = m;
	c[0] = c[1] = 0;
	sort(ALL(x));

	ll ans = 0;
	FORIT(it, x) {
		ll len = it->A;
		int pos = it->B;
		ans += len * (p[1 - pos] - 1);
		// printf("len = %lld x %d, pos = %d\n", len, p[1 - pos] - 1, pos);
		if (c[0] && c[1] && c[1 - pos]) {
			ans -= len * (c[1 - pos] - 1);
			// printf("\tremoving %d\n", c[1 - pos] - 1);
		}
		c[pos]++;
	}
	printf("%lld\n", ans);
	
	return 0;
}

/* Generated by UsacoTemp v3.0 */

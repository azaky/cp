<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
 <title>USACO FEB11 line Analysis</title> 
<style type="text/css">
body       {
	     font-family:Verdana,Helvetica,Tahoma,sans-serif,Arial,Lucida;
	   }
</style>
</head><body bgcolor="#ffffff">
<center><img src="line_files/cow1.jpg" width="742" height="118"></center>
<h2>USACO FEB11 Problem 'line' Analysis</h2>
<h4>by Lewin Gan</h4>
<p>
First, we notice the number of ways for <tt>N</tt> cows to line up is <tt>N!</tt>,
 so with <tt>N = 20</tt>, we 
won't have to deal with numbers that are too big. However, we also see 
that <tt>20!</tt> is far too large for us 
to simply list out all the permutations, so we'll need smarter 
algorithm.
</p>

<p>
Another thing we could notice is that if the first <tt>M</tt> cows are 
fixed, there are <tt>(N-M)!</tt> ways to 
arrange the remaining cows. In fact, this is the key thing to notice in 
order to find a solution, as described 
below.
</p>

<p>
Let us first handle the case of constructing the permutation given a 
number (case 'P').
</p>

<p>
Define <tt>f(K,N,S)</tt> to be the <tt>K</tt><sup>th</sup> line number 
of <tt>N</tt> cows given that <tt>S</tt> is 
the set of usable numbers. Let's try to place the first number. We 
notice that once we place the 
first number, there are <tt>(N - 1)!</tt> ways to arrange the other 
numbers. Let <tt>i = K / (N - 1)!</tt> 
(rounded down). Then, we just remove the <tt>i</tt><sup>th</sup> element
 of <tt>S</tt> and place it in the first 
position. Then, we take <tt>p = K % (N - 1)!</tt> and append the number 
we found to <tt>f(p,N-1,S)</tt>
</p>

<p>
Since this function uses tail-recursion, we can easily get rid of it and
 use an iterative solution. See below for 
the implementation details.
</p>

<div><div id="highlighter_7657" class="syntaxhighlighter  java"><div 
class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table
 border="0" cellpadding="0" cellspacing="0"><tbody><tr><td 
class="gutter"><div class="line number1 index0 alt2">1</div><div 
class="line number2 index1 alt1">2</div><div class="line number3 index2 
alt2">3</div><div class="line number4 index3 alt1">4</div><div 
class="line number5 index4 alt2">5</div><div class="line number6 index5 
alt1">6</div><div class="line number7 index6 alt2">7</div><div 
class="line number8 index7 alt1">8</div><div class="line number9 index8 
alt2">9</div><div class="line number10 index9 alt1">10</div><div 
class="line number11 index10 alt2">11</div><div class="line number12 
index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div
 class="line number14 index13 alt1">14</div></td><td class="code"><div 
class="container"><div class="line number1 index0 alt2"><code 
class="java keyword">private</code> <code class="java keyword">static</code>
 <code class="java keyword">int</code> <code class="java plain">[] find (</code><code
 class="java keyword">long</code> <code class="java plain">k) {</code></div><div
 class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">boolean</code> <code class="java plain">[] vis = </code><code
 class="java keyword">new</code> <code class="java keyword">boolean</code>
 <code class="java plain">[N];</code></div><div class="line number3 
index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">int</code> <code class="java plain">[] arr = </code><code
 class="java keyword">new</code> <code class="java keyword">int</code> <code
 class="java plain">[N];</code></div><div class="line number4 index3 
alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code 
class="java keyword">for</code> <code class="java plain">(</code><code 
class="java keyword">int</code> <code class="java plain">i = </code><code
 class="java value">0</code><code class="java plain">; i &lt; N; i++) {</code></div><div
 class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">long</code> <code class="java plain">q = k / fact 
[N - </code><code class="java value">1</code> <code class="java plain">-
 i], p = k % fact [N - </code><code class="java value">1</code> <code 
class="java plain">- i];</code></div><div class="line number6 index5 
alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">int</code> <code class="java plain">c = </code><code
 class="java value">0</code><code class="java plain">, j = </code><code 
class="java value">0</code><code class="java plain">;</code></div><div 
class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">for</code> <code class="java plain">(;c &lt;= q 
&amp;&amp; j &lt; N; j++)</code></div><div class="line number8 index7 
alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">if</code> <code class="java plain">(!vis [j]) c++;</code></div><div
 class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java plain">arr [i] = j;</code></div><div class="line number10 
index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java plain">vis [j - </code><code class="java value">1</code><code
 class="java plain">] = </code><code class="java keyword">true</code><code
 class="java plain">;</code></div><div class="line number11 index10 
alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java plain">k = p;</code></div><div class="line number12 index11
 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code 
class="java plain">}</code></div><div class="line number13 index12 alt2"><code
 class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java 
keyword">return</code> <code class="java plain">arr;</code></div><div 
class="line number14 index13 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div>

<p>
We can deal with the case of finding the line number of a permuation 
similarly as above (case 'Q').
</p>

<p>
Define <tt>G(a,N,S)</tt> be the line number of <tt>a</tt> given that the
 set of valid remaining numbers is 
<tt>S</tt> and that we have <tt>N</tt> elements in the array. In 
addition, let the first element of <tt>a</tt> is 
the <tt>j</tt><sup>th</sup> element of <tt>S</tt>  Then, we just 
basically do the reverse of what we have done 
before. We then remove the first element from <tt>a</tt> and also remove
 that number from <tt>S</tt>. Our answer 
is simply <tt>(N-1)!*j*G(a,N-1,S)</tt>.
</p>

<p>
Again, since this function uses tail-recursion, we can easily get rid of
 it and use an iterative solution. See 
below for the implementation details.
</p>

<div><div id="highlighter_426314" class="syntaxhighlighter  java"><div 
class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table
 border="0" cellpadding="0" cellspacing="0"><tbody><tr><td 
class="gutter"><div class="line number1 index0 alt2">1</div><div 
class="line number2 index1 alt1">2</div><div class="line number3 index2 
alt2">3</div><div class="line number4 index3 alt1">4</div><div 
class="line number5 index4 alt2">5</div><div class="line number6 index5 
alt1">6</div><div class="line number7 index6 alt2">7</div><div 
class="line number8 index7 alt1">8</div><div class="line number9 index8 
alt2">9</div><div class="line number10 index9 alt1">10</div><div 
class="line number11 index10 alt2">11</div><div class="line number12 
index11 alt1">12</div></td><td class="code"><div class="container"><div 
class="line number1 index0 alt2"><code class="java keyword">private</code>
 <code class="java keyword">static</code> <code class="java keyword">long</code>
 <code class="java plain">findNum (</code><code class="java keyword">int</code>
 <code class="java plain">[] arr) {</code></div><div class="line number2
 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">long</code> <code class="java plain">ans = </code><code
 class="java value">0</code><code class="java plain">;</code></div><div 
class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">boolean</code> <code class="java plain">[] vis = </code><code
 class="java keyword">new</code> <code class="java keyword">boolean</code>
 <code class="java plain">[N];</code></div><div class="line number4 
index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">for</code> <code class="java plain">(</code><code 
class="java keyword">int</code> <code class="java plain">i = </code><code
 class="java value">0</code><code class="java plain">; i &lt; 
arr.length; i++) {</code></div><div class="line number5 index4 alt2"><code
 class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">int</code> <code class="java plain">c = </code><code
 class="java value">0</code><code class="java plain">;</code></div><div 
class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">for</code> <code class="java plain">(</code><code 
class="java keyword">int</code> <code class="java plain">j = </code><code
 class="java value">0</code><code class="java plain">; j &lt; arr [i] - </code><code
 class="java value">1</code><code class="java plain">; j++)</code></div><div
 class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">if</code> <code class="java plain">(!vis [j]) c++;</code></div><div
 class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java plain">vis [arr [i] - </code><code class="java value">1</code><code
 class="java plain">] = </code><code class="java keyword">true</code><code
 class="java plain">;</code></div><div class="line number9 index8 alt2"><code
 class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java plain">ans += fact [N - </code><code class="java value">1</code>
 <code class="java plain">- i] * c;</code></div><div class="line 
number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java plain">}</code></div><div class="line number11 index10 
alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code 
class="java keyword">return</code> <code class="java plain">ans;</code></div><div
 class="line number12 index11 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div>

<p>
Combining both of these answers is very easy now. See below for a sample
 solution.
</p>

<div><div id="highlighter_235275" class="syntaxhighlighter  java"><div 
class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table
 border="0" cellpadding="0" cellspacing="0"><tbody><tr><td 
class="gutter"><div class="line number1 index0 alt2">1</div><div 
class="line number2 index1 alt1">2</div><div class="line number3 index2 
alt2">3</div><div class="line number4 index3 alt1">4</div><div 
class="line number5 index4 alt2">5</div><div class="line number6 index5 
alt1">6</div><div class="line number7 index6 alt2">7</div><div 
class="line number8 index7 alt1">8</div><div class="line number9 index8 
alt2">9</div><div class="line number10 index9 alt1">10</div><div 
class="line number11 index10 alt2">11</div><div class="line number12 
index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div
 class="line number14 index13 alt1">14</div><div class="line number15 
index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div
 class="line number17 index16 alt2">17</div><div class="line number18 
index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div
 class="line number20 index19 alt1">20</div><div class="line number21 
index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div
 class="line number23 index22 alt2">23</div><div class="line number24 
index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div
 class="line number26 index25 alt1">26</div><div class="line number27 
index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div
 class="line number29 index28 alt2">29</div><div class="line number30 
index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div
 class="line number32 index31 alt1">32</div><div class="line number33 
index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div
 class="line number35 index34 alt2">35</div><div class="line number36 
index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div
 class="line number38 index37 alt1">38</div><div class="line number39 
index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div
 class="line number41 index40 alt2">41</div><div class="line number42 
index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div
 class="line number44 index43 alt1">44</div><div class="line number45 
index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div
 class="line number47 index46 alt2">47</div><div class="line number48 
index47 alt1">48</div><div class="line number49 index48 alt2">49</div><div
 class="line number50 index49 alt1">50</div><div class="line number51 
index50 alt2">51</div><div class="line number52 index51 alt1">52</div><div
 class="line number53 index52 alt2">53</div><div class="line number54 
index53 alt1">54</div><div class="line number55 index54 alt2">55</div><div
 class="line number56 index55 alt1">56</div><div class="line number57 
index56 alt2">57</div><div class="line number58 index57 alt1">58</div><div
 class="line number59 index58 alt2">59</div><div class="line number60 
index59 alt1">60</div><div class="line number61 index60 alt2">61</div><div
 class="line number62 index61 alt1">62</div><div class="line number63 
index62 alt2">63</div><div class="line number64 index63 alt1">64</div><div
 class="line number65 index64 alt2">65</div><div class="line number66 
index65 alt1">66</div><div class="line number67 index66 alt2">67</div><div
 class="line number68 index67 alt1">68</div><div class="line number69 
index68 alt2">69</div><div class="line number70 index69 alt1">70</div><div
 class="line number71 index70 alt2">71</div><div class="line number72 
index71 alt1">72</div><div class="line number73 index72 alt2">73</div><div
 class="line number74 index73 alt1">74</div><div class="line number75 
index74 alt2">75</div><div class="line number76 index75 alt1">76</div><div
 class="line number77 index76 alt2">77</div><div class="line number78 
index77 alt1">78</div><div class="line number79 index78 alt2">79</div><div
 class="line number80 index79 alt1">80</div></td><td class="code"><div 
class="container"><div class="line number1 index0 alt2"><code 
class="java keyword">import</code> <code class="java plain">java.io.*;</code></div><div
 class="line number2 index1 alt1"><code class="java keyword">import</code>
 <code class="java plain">java.util.*;</code></div><div class="line 
number3 index2 alt2"><code class="java keyword">import</code> <code 
class="java keyword">static</code> <code class="java plain">java.lang.Integer.parseInt;</code></div><div
 class="line number4 index3 alt1"><code class="java keyword">import</code>
 <code class="java keyword">static</code> <code class="java plain">java.lang.Long.parseLong;</code></div><div
 class="line number5 index4 alt2">&nbsp;</div><div class="line number6 
index5 alt1"><code class="java keyword">public</code> <code class="java 
keyword">class</code> <code class="java plain">line</code></div><div 
class="line number7 index6 alt2"><code class="java plain">{</code></div><div
 class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">private</code> <code class="java keyword">static</code>
 <code class="java plain">BufferedReader in;</code></div><div 
class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">private</code> <code class="java keyword">static</code>
 <code class="java plain">PrintWriter out;</code></div><div class="line 
number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div
 class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">private</code> <code class="java keyword">static</code>
 <code class="java keyword">long</code> <code class="java plain">[] 
fact;</code></div><div class="line number12 index11 alt1"><code 
class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java 
keyword">private</code> <code class="java keyword">static</code> <code 
class="java keyword">int</code> <code class="java plain">N;</code></div><div
 class="line number13 index12 alt2">&nbsp;</div><div class="line 
number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">public</code> <code class="java keyword">static</code>
 <code class="java keyword">void</code> <code class="java plain">main 
(String [] args) </code><code class="java keyword">throws</code> <code 
class="java plain">IOException {</code></div><div class="line number15 
index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java plain">in = </code><code class="java keyword">new</code> <code
 class="java plain">BufferedReader (</code><code class="java keyword">new</code>
 <code class="java plain">FileReader (</code><code class="java string">"line.in"</code><code
 class="java plain">));</code></div><div class="line number16 index15 
alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java plain">out = </code><code class="java keyword">new</code> <code
 class="java plain">PrintWriter (</code><code class="java keyword">new</code>
 <code class="java plain">BufferedWriter (</code><code class="java 
keyword">new</code> <code class="java plain">FileWriter (</code><code 
class="java string">"line.out"</code><code class="java plain">)));</code></div><div
 class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div
 class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java plain">StringTokenizer st = </code><code class="java 
keyword">new</code> <code class="java plain">StringTokenizer 
(in.readLine ());</code></div><div class="line number19 index18 alt2"><code
 class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java plain">N = parseInt (st.nextToken ());</code></div><div 
class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">int</code> <code class="java plain">K = parseInt 
(st.nextToken ());</code></div><div class="line number21 index20 alt2"><code
 class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div
 class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java plain">fact = </code><code class="java keyword">new</code> <code
 class="java keyword">long</code> <code class="java plain">[N];</code></div><div
 class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java plain">fact [</code><code class="java value">0</code><code 
class="java plain">] = </code><code class="java value">1</code><code 
class="java plain">;</code></div><div class="line number24 index23 alt1"><code
 class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">for</code> <code class="java plain">(</code><code 
class="java keyword">int</code> <code class="java plain">i = </code><code
 class="java value">1</code><code class="java plain">; i &lt; N; i++)</code></div><div
 class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java plain">fact [i] = (</code><code class="java keyword">long</code><code
 class="java plain">)i * fact [i - </code><code class="java value">1</code><code
 class="java plain">];</code></div><div class="line number26 index25 
alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div
 class="line number27 index26 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">while</code> <code class="java plain">(K-- &gt; </code><code
 class="java value">0</code><code class="java plain">) {</code></div><div
 class="line number28 index27 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">char</code> <code class="java plain">command = 
in.readLine ().charAt (</code><code class="java value">0</code><code 
class="java plain">);</code></div><div class="line number29 index28 
alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">switch</code> <code class="java plain">(command) {</code></div><div
 class="line number30 index29 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">case</code> <code class="java string">'P'</code> <code
 class="java plain">: {</code></div><div class="line number31 index30 
alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">long</code> <code class="java plain">k = parseLong
 (in.readLine ());</code></div><div class="line number32 index31 alt1"><code
 class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">int</code> <code class="java plain">[] arr = find 
(k - </code><code class="java value">1</code><code class="java plain">);</code></div><div
 class="line number33 index32 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java plain">out.print (arr [</code><code class="java value">0</code><code
 class="java plain">]);</code></div><div class="line number34 index33 
alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">for</code> <code class="java plain">(</code><code 
class="java keyword">int</code> <code class="java plain">i = </code><code
 class="java value">1</code><code class="java plain">; i &lt; N; i++)</code></div><div
 class="line number35 index34 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java plain">out.print (</code><code class="java string">" "</code>
 <code class="java plain">+ arr [i]);</code></div><div class="line 
number36 index35 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java plain">out.println ();</code></div><div class="line 
number37 index36 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">break</code><code class="java plain">;</code></div><div
 class="line number38 index37 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java plain">}</code></div><div class="line number39 index38 
alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">case</code> <code class="java string">'Q'</code> <code
 class="java plain">: {</code></div><div class="line number40 index39 
alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">int</code> <code class="java plain">[] arr = </code><code
 class="java keyword">new</code> <code class="java keyword">int</code> <code
 class="java plain">[N];</code></div><div class="line number41 index40 
alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java plain">st = </code><code class="java keyword">new</code> <code
 class="java plain">StringTokenizer (in.readLine ());</code></div><div 
class="line number42 index41 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">for</code> <code class="java plain">(</code><code 
class="java keyword">int</code> <code class="java plain">i = </code><code
 class="java value">0</code><code class="java plain">; i &lt; N; i++) </code></div><div
 class="line number43 index42 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java plain">arr [i] = parseInt (st.nextToken ());</code></div><div
 class="line number44 index43 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java plain">out.println (findNum (arr) + </code><code 
class="java value">1</code><code class="java plain">);</code></div><div 
class="line number45 index44 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">break</code><code class="java plain">;</code></div><div
 class="line number46 index45 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java plain">}</code></div><div class="line number47 index46 
alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java plain">}</code></div><div class="line number48 index47 
alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java plain">}</code></div><div class="line number49 index48 
alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java plain">out.close ();</code></div><div class="line number50 
index49 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java plain">System.exit (</code><code class="java value">0</code><code
 class="java plain">);</code></div><div class="line number51 index50 
alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code 
class="java plain">}</code></div><div class="line number52 index51 alt1"><code
 class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div 
class="line number53 index52 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">private</code> <code class="java keyword">static</code>
 <code class="java keyword">int</code> <code class="java plain">[] find (</code><code
 class="java keyword">long</code> <code class="java plain">k) {</code></div><div
 class="line number54 index53 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">boolean</code> <code class="java plain">[] vis = </code><code
 class="java keyword">new</code> <code class="java keyword">boolean</code>
 <code class="java plain">[N];</code></div><div class="line number55 
index54 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">int</code> <code class="java plain">[] arr = </code><code
 class="java keyword">new</code> <code class="java keyword">int</code> <code
 class="java plain">[N];</code></div><div class="line number56 index55 
alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">for</code> <code class="java plain">(</code><code 
class="java keyword">int</code> <code class="java plain">i = </code><code
 class="java value">0</code><code class="java plain">; i &lt; N; i++) {</code></div><div
 class="line number57 index56 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">long</code> <code class="java plain">q = k / fact 
[N - </code><code class="java value">1</code> <code class="java plain">-
 i], p = k % fact [N - </code><code class="java value">1</code> <code 
class="java plain">- i];</code></div><div class="line number58 index57 
alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">int</code> <code class="java plain">c = </code><code
 class="java value">0</code><code class="java plain">, j = </code><code 
class="java value">0</code><code class="java plain">;</code></div><div 
class="line number59 index58 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">for</code> <code class="java plain">(;c &lt;= q 
&amp;&amp; j &lt; N; j++)</code></div><div class="line number60 index59 
alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">if</code> <code class="java plain">(!vis [j]) c++;</code></div><div
 class="line number61 index60 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java plain">arr [i] = j;</code></div><div class="line number62 
index61 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java plain">vis [j - </code><code class="java value">1</code><code
 class="java plain">] = </code><code class="java keyword">true</code><code
 class="java plain">;</code></div><div class="line number63 index62 
alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java plain">k = p;</code></div><div class="line number64 index63
 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java plain">}</code></div><div class="line number65 index64 
alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">return</code> <code class="java plain">arr;</code></div><div
 class="line number66 index65 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java plain">}</code></div><div class="line number67 index66 
alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div
 class="line number68 index67 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">private</code> <code class="java keyword">static</code>
 <code class="java keyword">long</code> <code class="java plain">findNum
 (</code><code class="java keyword">int</code> <code class="java plain">[]
 arr) {</code></div><div class="line number69 index68 alt2"><code 
class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">long</code> <code class="java plain">ans = </code><code
 class="java value">0</code><code class="java plain">;</code></div><div 
class="line number70 index69 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">boolean</code> <code class="java plain">[] vis = </code><code
 class="java keyword">new</code> <code class="java keyword">boolean</code>
 <code class="java plain">[N];</code></div><div class="line number71 
index70 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">for</code> <code class="java plain">(</code><code 
class="java keyword">int</code> <code class="java plain">i = </code><code
 class="java value">0</code><code class="java plain">; i &lt; 
arr.length; i++) {</code></div><div class="line number72 index71 alt1"><code
 class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">int</code> <code class="java plain">c = </code><code
 class="java value">0</code><code class="java plain">;</code></div><div 
class="line number73 index72 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">for</code> <code class="java plain">(</code><code 
class="java keyword">int</code> <code class="java plain">j = </code><code
 class="java value">0</code><code class="java plain">; j &lt; arr [i] - </code><code
 class="java value">1</code><code class="java plain">; j++)</code></div><div
 class="line number74 index73 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">if</code> <code class="java plain">(!vis [j]) c++;</code></div><div
 class="line number75 index74 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java plain">vis [arr [i] - </code><code class="java value">1</code><code
 class="java plain">] = </code><code class="java keyword">true</code><code
 class="java plain">;</code></div><div class="line number76 index75 
alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java plain">ans += fact [N - </code><code class="java value">1</code>
 <code class="java plain">- i] * c;</code></div><div class="line 
number77 index76 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java plain">}</code></div><div class="line number78 index77 
alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java keyword">return</code> <code class="java plain">ans;</code></div><div
 class="line number79 index78 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="java plain">}</code></div><div class="line number80 index79 
alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div>

<script type="text/javascript" src="line_files/shCore.js"></script>
<script type="text/javascript" src="line_files/shBrushCpp.js"></script>
<script type="text/javascript" src="line_files/shBrushJava.js"></script>
<link href="line_files/shCore.css" rel="stylesheet" type="text/css">
<link href="line_files/shThemeDefault.css" rel="stylesheet" 
type="text/css">
<script type="text/javascript">
     SyntaxHighlighter.all()
</script>



</body></html>
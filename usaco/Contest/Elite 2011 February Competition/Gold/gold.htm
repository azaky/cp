<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">

<meta http-equiv="Pragma" content="no-cache">
<script language="javascript">
<!--
    var endtime;
    
    function initcount(secondsleft) {
        var now = new Date();
        return now.getTime() + secondsleft*1000;
    }
    function count1(i) { i = i - i%1; return i; } 
    function count2(i) { i = i - i%1; if (i < 10) return "0"+i; return i; }
    function updateclock(head, word, endtime) {
        var now = new Date();
        var delta = (endtime - now.getTime())/1000;
        var s, x;
        if(delta < 1)
            s = head + " has ended";
        else{
            s = head + " ends: ";
            s = head + ": ";
            if(delta >= 24*3600)
                s = s + count1(delta/86400) + "d";
            if(delta >= 3600)
                s = s + count2((delta/3600)%24) + "h";
            if(delta >= 60)
                s = s + count2((delta/60)%60) + "m";
            s = s + count2(delta%60) + "s";
            setTimeout("updateclock('"+head+"','"+word+"',"+endtime+")", 500);
        }

        var slot = document.getElementById(word);
        slot.innerHTML = s;
    }
-->
</script>

<title>USACO Problems</title>
<style type="text/css"><!--
table,td,body {
font-family: Helvetica, Verdana, Arial, SunSans-Regular, Sans-Serif;
}
--></style>
</head><body onload="" background="gold_files/bg9silver.jpg">

<font face="Verdana,Helvetica,Tahoma,sans-serif,Arial,Lucida Sans,Gill 
Sans">
<table><tbody><tr>
<td><img src="gold_files/cowhead2.gif">
</td>
<td valign="top">
<table cellpadding="0" cellspacing="0">
    <tbody><tr><td>Contest: FEB11 <b>SILVER</b> Division</td></tr>
    <tr><td></td></tr>
    <tr><td></td></tr>
    <tr><td></td></tr>
    
</tbody></table>
</td></tr>
</tbody></table>
<font color="red"><b>
</b></font>

<br><font size="6"><b>ANALYSIS MODE</b></font><br>
Submit solutions for your own enjoyment.

</font><pre>**********************************************************************
                           GOLD PROBLEMS
**********************************************************************
                  Three problems numbered 1 through 3
**********************************************************************

Problem 1: Cowlphabet [Michael Cohen, 2010]

Like all bovines, Farmer John's cows speak the peculiar 'Cow'
language. Like so many languages, each word in this language comprises
a sequence of upper and lowercase letters (A-Z and a-z).  A word
is valid if and only if each ordered pair of adjacent letters in
the word is a valid pair.

Farmer John, ever worried that his cows are plotting against him,
recently tried to eavesdrop on their conversation. He overheard one
word before the cows noticed his presence. The Cow language is
spoken so quickly, and its sounds are so strange, that all that
Farmer John was able to perceive was the total number of uppercase
letters, U (1 &lt;= U &lt;= 250) and the total number of lowercase
letters, L (1 &lt;= L &lt;= 250) in the word.

Farmer John knows all P (1 &lt;= P &lt;= 200) valid ordered pairs of
adjacent letters.  He wishes to know how many different valid
words are consistent with his limited data.  However, since
this number may be very large, he only needs the value modulo
97654321.

PROBLEM NAME: cowlpha

INPUT FORMAT:

* Line 1: Three space-separated integers: U, L and P

* Lines 2..P+1: Two letters (each of which may be uppercase or
        lowercase), representing one valid ordered pair of adjacent
        letters in Cow.

SAMPLE INPUT (file cowlpha.in):

2 2 7
AB
ab
BA
ba
Aa
Bb
bB

INPUT DETAILS:

The word Farmer John overheard had 2 uppercase and 2 lowercase
letters.  The valid pairs of adjacent letters are AB, ab, BA, ba,
Aa, Bb and bB.

OUTPUT FORMAT:

* Line 1: A single integer, the number of valid words consistent with
        Farmer  John's data mod 97654321.

SAMPLE OUTPUT (file cowlpha.out):

7

OUTPUT DETAILS:

The possible words are:
AabB
ABba
abBA
BAab
BbBb
bBAa
bBbB

**********************************************************************

Problem 2: The Lost Cows [Adapted, 2010]

One sunny day farmer John was kidnapped by evil farmer Marcus's
cows. FJ wasn't too concerned about his forced holiday but wanted
to make sure that his cows got home safely together.

The cows are spread out in every one of FJ's N (3 &lt;= N &lt;= 200)
pastures conveniently numbered 1..N. The barn is located at pasture
1. The farm has an interesting navigation system: at every pasture
i there are M (1 &lt;= M &lt;= 200) signs S_ij (1 &lt;= S_ij &lt;= N) which one
could reference as S_i1..S_iM; each sign points the way to a pasture.
Sometimes a sign points to a path that leads back to the same
pasture.

Farmer Marcus's cows allow FJ to write a single message to all of
his cows. FJ's plan is to write a list of sign numbers such that
any cow who follows those instructions will all arrive at the barn
when each cow has completed all the instructions.

When a cow starts at a given pasture then she will first follow the
path indicated by the first sign number on FJ's list. When she
arrives at the second pasture, she looks at the second sign of FJ's
list and follows the path marked by that sign. She continues until
she exhausts the instruction list, at which point she should be at
the barn.

Find a list of instructions containing no more than 5,000,000 sign
numbers that will guide every cow, from every pasture, to the barn
after all instructions are followed.  It is guaranteed that such a
list exists.

Consider a set of three signs in four pastures that direct the cows
like these do:
                               ** Pasture# **
                              1    2    3    4
                     Sign 1   4    4    1    3
                     Sign 2   1    3    2    4
                     Sign 3   4    2    3    1

The set of instructions below will direct cows to the barn from any
of the four pastures:

       Instruction#   Sign#            Instruction#   Sign#
            1           1                   5           3
            2           2                   6           1
            3           1                   7           3
            4           2

The cow in pasture 1 will read sign #1 at time 1 and be directed
to pasture 4.  At time 2, she is in pasture 4 and (per FJ's
instructions) read sign #2 and then be directed to pasture 4. Below
is a table that shows the cow's travels:

                  * * * *  Cow in pasture  1  * * * *

        Time    CurrentPasture#    WhichSign     Sign-&gt;Nextpasture
          1            1               1                4
          2            4               2                4 (same pasture!)
          3            4               1                3
          4            3               2                2
          5            2               3                2 (same pasture)
          6            2               1                4
          7            4               3                1 Barn!

Similarly: Pasture 2's cow visits pastures [2]-4-4-3-2-2-4-1. 
           Pasture 3's cow visits pastures [3]-1-1-4-4-1-4-1.
           Pasture 4's cow visits pastures [4]-3-2-4-4-1-4-1.

Given a set of signs, create a set of instructions.

PROBLEM NAME: lostcows

INPUT FORMAT:

* Line 1: Two space separated integers: N and M

* Lines 2..M+1: Line i+1 describes the contents of each pasture's N
        signs with N integers: S_1i..S_Ni

SAMPLE INPUT (file lostcows.in):

4 3
4 4 1 3
1 3 2 4
4 2 3 1

OUTPUT FORMAT:

* Lines 1..?: The sign numbers the cows should follow, one per line.

SAMPLE OUTPUT (file lostcows.out):

1
2
1
2
3
1
3

**********************************************************************

Problem 3: Generic Cow Protests [Neal Wu, 2010]

Farmer John's N (1 &lt;= N &lt;= 100,000) cows are lined up in a row and
numbered 1..N. The cows are conducting another one of their strange
protests, so each cow i is holding up a sign with an integer A_i
(-10,000 &lt;= A_i &lt;= 10,000).

FJ knows the mob of cows will behave if they are properly grouped
and thus would like to arrange the cows into one or more contiguous
groups so that every cow is in exactly one group and that every
group has a nonnegative sum.

Help him count the number of ways he can do this, modulo 1,000,000,009.

By way of example, if N = 4 and the cows' signs are 2, 3, -3, and
1, then the following are the only four valid ways of arranging the
cows:

(2 3 -3 1)
(2 3 -3) (1)
(2) (3 -3 1)
(2) (3 -3) (1)

Note that this example demonstrates the rule for counting different
orders of the arrangements.

PROBLEM NAME: protest

INPUT FORMAT:

* Line 1: A single integer: N

* Lines 2..N + 1: Line i + 1 contains a single integer: A_i

SAMPLE INPUT (file protest.in):

4
2
3
-3
1

OUTPUT FORMAT:

* Line 1: A single integer, the number of arrangements modulo
        1,000,000,009.

SAMPLE OUTPUT (file protest.out):

4

**********************************************************************

</pre><hr>
<form action="/ioiupload" enctype="multipart/form-data" method="POST">
<input name="a" value="WbxtyAjAGkY" type="hidden">

<table>
<tbody><tr><td>

<table width="100%" bgcolor="#000000" border="0" cellpadding="0" 
cellspacing="0">
<tbody><tr><td height="1"></td></tr>
<tr><td width="1"></td><td>

  <font face="Verdana,Helvetica,Tahoma,sans-serif,Arial,Lucida Sans,Gill
 Sans">
  <table width="100%" bgcolor="#bfffbf" cellpadding="5">
  <tbody><tr><td><b>Submit a program  for grading:&nbsp;<b><input 
name="filename" type="file">
  &nbsp;&nbsp;
  <input value="Submit" name="submit" type="submit"></b></b></td></tr>
  </tbody></table>

</font></td><td width="1"></td></tr>
<tr height="1"><td></td></tr>
</tbody></table>


</td></tr>

<tr><td><hr></td></tr>

<tr><td>

<table width="100%" bgcolor="#000000" border="0" cellpadding="0" 
cellspacing="0">
<tbody><tr><td height="1"></td></tr>
<tr><td width="1"></td><td>

   <table width="100%" bgcolor="#bfffbf" cellpadding="5">
   <tbody><tr><td colspan="2">
   <font face="Verdana,Helvetica,Tahoma,sans-serif,Arial,Lucida 
Sans,Gill Sans">
   <b>To run your program with your own test data, enter the program<br>
   file name and input file name then click 'Test':</b></font></td></tr>

  <tr><td>

   <table>
   <tbody><tr><td>
     <table>
     <tbody><tr><td>
     <font face="Verdana,Helvetica,Tahoma,sans-serif,Arial,Lucida 
Sans,Gill Sans">
     <b>Program&nbsp;File:&nbsp;</b></font></td>
         <td><input name="testprogramname" type="file"></td></tr>
     <tr><td align="right">
         <font face="Verdana,Helvetica,Tahoma,sans-serif,Arial,Lucida 
Sans,Gill Sans">
         <b>Input&nbsp;File:&nbsp;</b></font></td>
         <td><input name="testfilename" type="file"></td></tr>
     </tbody></table>
   </td>
   <td>&nbsp;&nbsp;</td>
   <td><input value="Test" name="submit" type="submit"></td>
   </tr>
   </tbody></table>

   </td></tr></tbody></table>

</td><td width="1"></td></tr>
<tr height="1"><td></td></tr>
</tbody></table>

</td></tr>
<tr><td><hr></td></tr>

<tr><td>

  <table width="100%" bgcolor="#000000" border="0" cellpadding="0" 
cellspacing="0">
    <tbody><tr><td height="1"></td></tr>
    <tr><td width="1"></td><td>

    <table width="100%" bgcolor="#bfffbf" cellpadding="5">
      <tbody><tr><td>
      <font face="Verdana,Helvetica,Tahoma,sans-serif,Arial,Lucida 
Sans,Gill Sans">
      <b>Backup a file:&nbsp;</b><input name="backupfilename" 
type="file">
      &nbsp;&nbsp;&nbsp;<input value="Backup" name="submit" 
type="submit">
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      <input value="See Backups" name="submit" type="submit">
      </font></td></tr>
    </tbody></table>

    </td><td width="1"></td></tr>
    <tr><td height="1"></td><td></td></tr>
  </tbody></table>

</td></tr>
<tr><td><hr></td></tr>

</tbody></table>
<font face="Verdana,Helvetica,Tahoma,sans-serif,Arial,Lucida Sans,Gill 
Sans"> The following solution files are saved for grading:<br>
<table cellspacing="3">
<tbody><tr><th>Name</th><th>Size</th><th>When</th><th>Age</th></tr>
<tr><td><a 
href="http://ace.delos.com/ioiupload?a=WbxtyAjAGkY&amp;seesaved=line.p">line.p</a></td>
<td align="right">1243</td>
<td align="center"> 5h38:04</td>
<td align="center">1508h43:10</td>
</tr>
<tr><td><a 
href="http://ace.delos.com/ioiupload?a=WbxtyAjAGkY&amp;seesaved=paren.p">paren.p</a></td>
<td align="right">1176</td>
<td align="center"> 6h33:08</td>
<td align="center">1507h48:06</td>
</tr>
<tr><td><a 
href="http://ace.delos.com/ioiupload?a=WbxtyAjAGkY&amp;seesaved=tri.p">tri.p</a></td>
<td align="right">1401</td>
<td align="center"> 8h19:49</td>
<td align="center">1506h01:25</td>
</tr>
</tbody></table>
</font><hr>
<center>
<font face="Verdana,Helvetica,Tahoma,sans-serif,Arial,Lucida Sans,Gill 
Sans"><a href="http://ace.delos.com/ioiedit?a=WbxtyAjAGkY">Edit your 
database record</a>&nbsp;|&nbsp;

<a href="http://ace.delos.com/ioiupload?a=WbxtyAjAGkY&amp;logout=1"> 
Logout </a>
<!--<a href="https://ace.delos.com/rules.html" target="_blank"> Rules </a>-->
&nbsp;|&nbsp;
<a href="http://ace.delos.com/ioiupload?init=1&amp;a=WbxtyAjAGkY">Main 
contest index</a>
</font></center>
<!--&nbsp;|&nbsp;-->
<center>
<font face="Verdana,Helvetica,Tahoma,sans-serif,Arial,Lucida Sans,Gill 
Sans"><a 
href="http://ace.delos.com/ioiupload?a=WbxtyAjAGkY&amp;showsubmit">See 
submitted solutions</a>
&nbsp;|&nbsp;
<a href="http://ace.delos.com/ioiupload?a=WbxtyAjAGkY&amp;suggestionbox">Send
 message
to operations staff</a>
&nbsp;|&nbsp;
Phone: +1 719-321-7333
<br>
Director is not online<br>
This page was generated at 9:21:14 GMT.
</font></center>
</form></body></html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
 <title>USACO FEB11 protest Analysis</title> 
<style type="text/css">
body       {
	     font-family:Verdana,Helvetica,Tahoma,sans-serif,Arial,Lucida;
	   }
</style>
</head><body bgcolor="#ffffff">
<center><img src="protest_files/cow1.jpg" width="742" height="118"></center>
<h2>USACO FEB11 Problem 'protest' Analysis</h2>
<h4>by Neal Wu</h4>
<p>We first perform the standard trick of computing psum [k] = A_1 + ...
 + A_k.
Then the sum A_i + ... + A_j simply becomes psum [j] - psum [i - 1].</p>

<p>We can then use dynamic programming to compute dp [k] = the number of
 ways
to partition A_1 through A_k into nonnegative-sum groups. We define dp 
[0] = 1,
and then dp [j] is the sum of dp [i] for all 0 &lt;= i &lt; j where psum
 [i] &lt;= psum
[j] (which corresponds to choosing the last group to start at i + 1 and 
end at
j), giving us a simple O(N<sup>2</sup>) solution.</p>

<p>In fact by using a segment tree data structure we can optimize this 
to O(N
log N). At each step we query the sum of previous DP values which had a 
partial
sum no greater than our current sum, and then we insert our current DP 
value
into the tree according to its partial sum. (Note that to do this it is
necessary to compress the partial sums by order into the range 0 to N.) 
See the
code below, which in particular uses a binary-indexed tree, for more 
details:</p>

<div><div id="highlighter_905225" class="syntaxhighlighter  cpp"><div 
class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table
 border="0" cellpadding="0" cellspacing="0"><tbody><tr><td 
class="gutter"><div class="line number1 index0 alt2">1</div><div 
class="line number2 index1 alt1">2</div><div class="line number3 index2 
alt2">3</div><div class="line number4 index3 alt1">4</div><div 
class="line number5 index4 alt2">5</div><div class="line number6 index5 
alt1">6</div><div class="line number7 index6 alt2">7</div><div 
class="line number8 index7 alt1">8</div><div class="line number9 index8 
alt2">9</div><div class="line number10 index9 alt1">10</div><div 
class="line number11 index10 alt2">11</div><div class="line number12 
index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div
 class="line number14 index13 alt1">14</div><div class="line number15 
index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div
 class="line number17 index16 alt2">17</div><div class="line number18 
index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div
 class="line number20 index19 alt1">20</div><div class="line number21 
index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div
 class="line number23 index22 alt2">23</div><div class="line number24 
index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div
 class="line number26 index25 alt1">26</div><div class="line number27 
index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div
 class="line number29 index28 alt2">29</div><div class="line number30 
index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div
 class="line number32 index31 alt1">32</div><div class="line number33 
index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div
 class="line number35 index34 alt2">35</div><div class="line number36 
index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div
 class="line number38 index37 alt1">38</div><div class="line number39 
index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div
 class="line number41 index40 alt2">41</div><div class="line number42 
index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div
 class="line number44 index43 alt1">44</div><div class="line number45 
index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div
 class="line number47 index46 alt2">47</div><div class="line number48 
index47 alt1">48</div><div class="line number49 index48 alt2">49</div><div
 class="line number50 index49 alt1">50</div><div class="line number51 
index50 alt2">51</div><div class="line number52 index51 alt1">52</div><div
 class="line number53 index52 alt2">53</div><div class="line number54 
index53 alt1">54</div><div class="line number55 index54 alt2">55</div><div
 class="line number56 index55 alt1">56</div><div class="line number57 
index56 alt2">57</div><div class="line number58 index57 alt1">58</div><div
 class="line number59 index58 alt2">59</div></td><td class="code"><div 
class="container"><div class="line number1 index0 alt2"><code class="cpp
 preprocessor">#include &lt;cstdio&gt;</code></div><div class="line 
number2 index1 alt1"><code class="cpp preprocessor">#include 
&lt;algorithm&gt;</code></div><div class="line number3 index2 alt2"><code
 class="cpp keyword bold">using</code> <code class="cpp keyword bold">namespace</code>
 <code class="cpp plain">std;</code></div><div class="line number4 
index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code 
class="cpp color1 bold">FILE</code> <code class="cpp plain">*in = </code><code
 class="cpp functions bold">fopen</code> <code class="cpp plain">(</code><code
 class="cpp string">"protest.in"</code><code class="cpp plain">, </code><code
 class="cpp string">"r"</code><code class="cpp plain">), *out = </code><code
 class="cpp functions bold">fopen</code> <code class="cpp plain">(</code><code
 class="cpp string">"protest.out"</code><code class="cpp plain">, </code><code
 class="cpp string">"w"</code><code class="cpp plain">);</code></div><div
 class="line number6 index5 alt1">&nbsp;</div><div class="line number7 
index6 alt2"><code class="cpp keyword bold">const</code> <code 
class="cpp color1 bold">int</code> <code class="cpp plain">MAXN = 
100005, MOD = 1000000009;</code></div><div class="line number8 index7 
alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="cpp
 color1 bold">int</code> <code class="cpp plain">N, A [MAXN], tree 
[MAXN];</code></div><div class="line number10 index9 alt1"><code 
class="cpp color1 bold">int</code> <code class="cpp plain">P, psums 
[MAXN];</code></div><div class="line number11 index10 alt2">&nbsp;</div><div
 class="line number12 index11 alt1"><code class="cpp keyword bold">inline</code>
 <code class="cpp color1 bold">int</code> <code class="cpp plain">search
 (</code><code class="cpp color1 bold">int</code> <code class="cpp 
plain">val)</code></div><div class="line number13 index12 alt2"><code 
class="cpp plain">{</code></div><div class="line number14 index13 alt1"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
keyword bold">return</code> <code class="cpp plain">lower_bound (psums, 
psums + P, val) - psums;</code></div><div class="line number15 index14 
alt2"><code class="cpp plain">}</code></div><div class="line number16 
index15 alt1">&nbsp;</div><div class="line number17 index16 alt2"><code 
class="cpp keyword bold">inline</code> <code class="cpp color1 bold">int</code>
 <code class="cpp plain">query (</code><code class="cpp color1 bold">int</code>
 <code class="cpp plain">x)</code></div><div class="line number18 
index17 alt1"><code class="cpp plain">{</code></div><div class="line 
number19 index18 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">sum = 0;</code></div><div
 class="line number20 index19 alt1">&nbsp;</div><div class="line 
number21 index20 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">for</code> <code class="cpp plain">(</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">i = x + 1; i
 &gt; 0; i -= i &amp; -i)</code></div><div class="line number22 index21 
alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">sum = (sum + tree [i]) % MOD;</code></div><div 
class="line number23 index22 alt2">&nbsp;</div><div class="line number24
 index23 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">return</code> <code class="cpp plain">sum;</code></div><div
 class="line number25 index24 alt2"><code class="cpp plain">}</code></div><div
 class="line number26 index25 alt1">&nbsp;</div><div class="line 
number27 index26 alt2"><code class="cpp keyword bold">inline</code> <code
 class="cpp keyword bold">void</code> <code class="cpp plain">update (</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">x, </code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">val)</code></div><div
 class="line number28 index27 alt1"><code class="cpp plain">{</code></div><div
 class="line number29 index28 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">for</code> <code class="cpp plain">(</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">i = x + 1; i
 &lt;= P; i += i &amp; -i)</code></div><div class="line number30 index29
 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">tree [i] = (tree [i] + val) % MOD;</code></div><div 
class="line number31 index30 alt2"><code class="cpp plain">}</code></div><div
 class="line number32 index31 alt1">&nbsp;</div><div class="line 
number33 index32 alt2"><code class="cpp color1 bold">int</code> <code 
class="cpp plain">main ()</code></div><div class="line number34 index33 
alt1"><code class="cpp plain">{</code></div><div class="line number35 
index34 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp functions bold">fscanf</code> <code class="cpp plain">(in, </code><code
 class="cpp string">"%d"</code><code class="cpp plain">, &amp;N);</code></div><div
 class="line number36 index35 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">psums [0] = 0;</code></div><div class="line number37 
index36 alt2">&nbsp;</div><div class="line number38 index37 alt1"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
keyword bold">for</code> <code class="cpp plain">(</code><code 
class="cpp color1 bold">int</code> <code class="cpp plain">i = 0; i &lt;
 N; i++)</code></div><div class="line number39 index38 alt2"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
plain">{</code></div><div class="line number40 index39 alt1"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp functions bold">fscanf</code> <code class="cpp plain">(in, </code><code
 class="cpp string">"%d"</code><code class="cpp plain">, A + i);</code></div><div
 class="line number41 index40 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">psums [i + 1] = psums [i] + A [i];</code></div><div 
class="line number42 index41 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">}</code></div><div class="line number43 index42 alt2">&nbsp;</div><div
 class="line number44 index43 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">P = N + 1;</code></div><div class="line number45 
index44 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">sort (psums, psums + P);</code></div><div class="line
 number46 index45 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">P = unique (psums, psums + P) - psums;</code></div><div
 class="line number47 index46 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">update (search (0), 1);</code></div><div class="line 
number48 index47 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">dp, sum = 0;</code></div><div
 class="line number49 index48 alt2">&nbsp;</div><div class="line 
number50 index49 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">for</code> <code class="cpp plain">(</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">i = 0; i 
&lt; N; i++)</code></div><div class="line number51 index50 alt2"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
plain">{</code></div><div class="line number52 index51 alt1"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">sum += A [i];</code></div><div class="line number53 
index52 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">dp = query (search (sum));</code></div><div 
class="line number54 index53 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">update (search (sum), dp);</code></div><div 
class="line number55 index54 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">}</code></div><div class="line number56 index55 alt1">&nbsp;</div><div
 class="line number57 index56 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp functions bold">fprintf</code> <code class="cpp plain">(out,
 </code><code class="cpp string">"%d\n"</code><code class="cpp plain">, 
dp);</code></div><div class="line number58 index57 alt1"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
keyword bold">return</code> <code class="cpp plain">0;</code></div><div 
class="line number59 index58 alt2"><code class="cpp plain">}</code></div></div></td></tr></tbody></table></div></div>
<script type="text/javascript" src="protest_files/shCore.js"></script>
<script type="text/javascript" src="protest_files/shBrushCpp.js"></script>
<script type="text/javascript" src="protest_files/shBrushJava.js"></script>
<link href="protest_files/shCore.css" rel="stylesheet" type="text/css">
<link href="protest_files/shThemeDefault.css" rel="stylesheet" 
type="text/css">
<script type="text/javascript">
     SyntaxHighlighter.all()
</script>

</body></html>
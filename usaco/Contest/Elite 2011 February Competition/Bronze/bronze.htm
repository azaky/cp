<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">

<meta http-equiv="Pragma" content="no-cache">
<script language="javascript">
<!--
    var endtime;
    
    function initcount(secondsleft) {
        var now = new Date();
        return now.getTime() + secondsleft*1000;
    }
    function count1(i) { i = i - i%1; return i; } 
    function count2(i) { i = i - i%1; if (i < 10) return "0"+i; return i; }
    function updateclock(head, word, endtime) {
        var now = new Date();
        var delta = (endtime - now.getTime())/1000;
        var s, x;
        if(delta < 1)
            s = head + " has ended";
        else{
            s = head + " ends: ";
            s = head + ": ";
            if(delta >= 24*3600)
                s = s + count1(delta/86400) + "d";
            if(delta >= 3600)
                s = s + count2((delta/3600)%24) + "h";
            if(delta >= 60)
                s = s + count2((delta/60)%60) + "m";
            s = s + count2(delta%60) + "s";
            setTimeout("updateclock('"+head+"','"+word+"',"+endtime+")", 500);
        }

        var slot = document.getElementById(word);
        slot.innerHTML = s;
    }
-->
</script>

<title>USACO Problems</title>
<style type="text/css"><!--
table,td,body {
font-family: Helvetica, Verdana, Arial, SunSans-Regular, Sans-Serif;
}
--></style>
</head><body onload="" background="bronze_files/bg9silver.jpg">

<font face="Verdana,Helvetica,Tahoma,sans-serif,Arial,Lucida Sans,Gill 
Sans">
<table><tbody><tr>
<td><img src="bronze_files/cowhead2.gif">
</td>
<td valign="top">
<table cellpadding="0" cellspacing="0">
    <tbody><tr><td>Contest: FEB11 <b>SILVER</b> Division</td></tr>
    <tr><td></td></tr>
    <tr><td></td></tr>
    <tr><td></td></tr>
    
</tbody></table>
</td></tr>
</tbody></table>
<font color="red"><b>
</b></font>

<br><font size="6"><b>ANALYSIS MODE</b></font><br>
Submit solutions for your own enjoyment.

</font><pre>**********************************************************************
                           BRONZE PROBLEMS
**********************************************************************
                  Three problems numbered 11 through 13
**********************************************************************

Problem 11: Cow Cotillion [Sherry Wu &amp; Rob Kolstad, 2011]

The cow cotillion, a fancy dance every spring, requires the cows
(shown as "&gt;") and bulls (shown as "&lt;") to bow to each other during
a dance. Schematically, one properly bowing pair of cattle is shown
like this: "&gt;&lt;". Sometimes another pair of cattle will sashay between
a pair of bowing cows: "&gt; &gt;&lt; &lt;".

In fact, sometimes a larger number of cows will mix it up on the
dance floor: "&gt; &gt;&lt; &lt; &gt;&lt;" (this includes a second set of bowing cows
on the right). Complex arrangements can be perfectly legal dance
formations:
              &gt; &gt; &gt; &gt;&lt; &lt; &gt;&lt; &lt; &gt;&lt; &gt;&lt; &gt;&lt; &lt;
 
              | | | -- | -- | -- -- -- |
              | | ------    |          |
              | -------------          |
              --------------------------

Farmer John notices that a stray heifer sometimes sneaks into a
group and unbalances it: "&gt; &gt;&lt; &lt; &lt;&gt;&lt;". This is strictly forbidden;
FJ wants to punish the interlopers.

FJ has copied down records of as many as 500 cows participating in
dance lines and wonders if the dance line is properly balanced
(i.e., all of the cattle can be paired off in at least one way as
properly bowing pair by pair). He copied only the direction each
cow was bowing without any extra spaces to help determine which cow
was bowing to which bull, strings like this rendition of the illegal
example from the previous paragraph: "&gt;&gt;&lt;&lt;&lt;&gt;&lt;". He wants you to
write a program to tell him if the dance line is legal.

FJ has N (1 &lt;= N &lt;= 1,000) pattern recordings P_i comprising just
the characters '&gt;' and '&lt;' with varying length K_i (1 &lt;= K_i &lt;=
200).  Print "legal" for those patterns that include proper pairs
of bowing cows and "illegal" for those that don't.

PROBLEM NAME: dance2

INPUT FORMAT:

* Line 1: A single integer: N

* Lines 2..N+1: Line i contains an integer followed by a space and a
        string of K characters '&gt;' and '&lt;': K_i and P_i

SAMPLE INPUT (file dance2.in):

2
6 &gt;&gt;&lt;&lt;&gt;&lt;
4 &gt;&lt;&lt;&gt;

OUTPUT FORMAT:

* Lines 1..N: Line i contains either the word "legal" or "illegal"
        (without the quotes, of course) depending on whether the input
        has a legal bowing configuration.

SAMPLE OUTPUT (file dance2.out):

legal
illegal

**********************************************************************

Problem 12: Cow Treats [Rob Kolstad, 2010]

The cows celebrated another banner month for record milk production
and thus have each earned a special treat. They completely fill a
W x H rectangle formation (1 &lt;= W &lt;= 25; 1 &lt;= H &lt;= 25) awaiting
their treat.

Each cow has a unique figure of merit F_rc (1 &lt;= F_rc &lt;= 1,000,000)
which denotes her overall milk production performance. Farmer John
thinks it is only fair to prioritize the treats handed out, rewarding
the highest producing cows first. He plans to traverse the rectangular
formation one row at a time, starting at the beginning of row 1 and
giving out all row 1's treats before he starts on row 2 using the
same method.

He has asked the cows to reorganize themselves so that the cows
with better production are rewarded first. The cows, though, are
not so very good at organization. They can either swap a pair of
rows or swap a pair of columns of their formation. FJ has asked
them to do the best they can by moving the best cow to the upper
left corner (row 1, column 1), the next best cow to row 1, column
2 (if possible), and so on. Of course, the cows can not fully sort
themselves, but they can do their best by following this heuristic:

    * determine the order of FJ's treat awards:
            1    2   3  ...
            W+1 W+2 W+3 ...

    * find the highest rated cow; swap rows and columns until she
      is at row 1, column 1; never move her again

    * Then execute this rule until as many cows are placed as possible:

	Find the next highest rated cow. Swap rows and columns
	(without moving any higher-rated cow) to move her to the
	best possible spot that is still available (e.g., row 1,
	column 2 if it's available of row 2, column 1 if no slots
	can be achieved in row 1.

By way of example, consider this set of 3 x 4 cows:

         5  7  4  1
         9 99  2  6
         8  3 10 11

The cow with 99 is clearly the highest-rated and belows in the upper
left corner. Swap rows 1 and 2 then swap columns 1 and 2 (or do it
the other way around -- the answer is the same):

         99  9  2  6
          7  5  4  1
          3  8 10 11

The cow with 11 should be rewarded as soon as possible after the
highest-rated cow. She is current in slot (3,4), the last slot to
be rewarded. At this point, it's too late to swap her into the first
row or even the first column. Thus, she needs to move to (2,2) by
swapping columns 2 and 4 then swapping rows 2 and 3:

       Swap cols 2 and 4     Swap rows 2 and 3
         99   6  2  9          99   6  2  9
          7   1  4  5    -&gt;     3  11 10  8
          3  11 10  8           7   1  4  5

The cow with 10 is rewarded directly after the cow with 11.  The
cow 9 is already rewarded. The cow with 8 is awarded just after the
cow with 10. The cow with 7 is rewarded directly after the cow with
8.  The cow with 6 is already rewarded. The cow with 5 would best
move to row 3, column 2 but the rows 1 and 2 are frozen as are all
the columns.  Thus, cows 1, 4, and 5 do not move, and the second
diagram above is the "best the cows can do".

Implement this algorithm for other rectangular arrays of cows.

PROBLEM NAME: treats

INPUT FORMAT:

* Line 1: Two space-separated integers: W and H

* Lines 2..H+1: Line i+1 contains W space-separated integers F_ic,
        where c ranges from 1 to W.

SAMPLE INPUT (file treats.in):

4 3
5 7 4 1
9 99 2 6
8 3 10 11

OUTPUT FORMAT:

* Lines 1..H: Line i contains W space-separated integers representing
        the i-th row of cows in the cows' final formation.

SAMPLE OUTPUT (file treats.out):

99 6 2 9
3 11 10 8
7 1 4 5

**********************************************************************

Problem 13: Hexagonal Pasture Network [Andre Kessler, 2011]

Farmer John recently acquired some new land to expand his farm. His
cows have taken a liking to the hexagonal structure of bee honeycombs,
and, ever willing to please his herd, Farmer John has set up a new
system of pastures and cowpaths in this format.

The full plot of pastures and cowpaths forms a hexagon with side
length K (2 &lt;= K &lt;= 50). Pastures are conveniently numbered
1..3*K*(K-1)+1 starting in the bottom left and ending in the upper
right using the pattern generalized from this illustration where K
= 3:

<img src="bronze_files/1183.gif">

Each pasture is connected to all of its immediate neighbors. This
means that if a pasture is on the inside of the hexagon, it is
adjacent to exactly six other pastures. For example, in the diagram
above, pasture #10 is adjacent to pastures #5, #6, #11, #15, #14,
and #9. Pastures on the edge (but not on a corner) of the structure
are adjacent to exactly four other pastures (for example, pasture
#4 is adjacent to #1, #5, #9, and #8) while pastures at a corner
are adjacent to only three pastures (e.g., pasture #1 is connected
to pastures #2, #5, and #4). The length of any cowpath connecting
two pastures is 1 and the distance between two pastures is defined
to be the length of the shortest possible route between them.

Farmer John's Holstein cows have been munching on the grass in
pasture H (1 &lt;= H &lt;= 3*K*(K-1)+1) for several days now and have
grown fat and lazy. To force his cows to get some exercise, Farmer
John has laid down tasty cow treats in pastures exactly distance
of L (1 &lt;= L &lt;= 2*K-2) away from the cows. He guarantees the cows
that he has placed at least one treat, but he doesn't tell the cows
the pastures in which he's placed them.

Please help the cows avoid any unnecessary exercise by printing the
number of possible pastures which might hold the treats and a list
of those possible pastures in ascending order.

By way of example, suppose K = 3, the Holsteins are in pasture #1, and
Farmer John says he's placed some treats in pastures a distance of
2 away.  The possible locations of the treats are pastures #3, #6,
#10, #9, and #8, as shown below.

<img src="bronze_files/1183_002.gif">

PROBLEM NAME: hexagon

INPUT FORMAT:

* Line 1: Three space-separated integers: K, H, and L

SAMPLE INPUT (file hexagon.in):

3 1 2

OUTPUT FORMAT:

* Line 1: A single integer: the number of pastures a distance of L
        away from pasture H

* Lines 2..N+1: Line i+1 contains the i-th such pasture, printed in
        ascending order

SAMPLE OUTPUT (file hexagon.out):

5
3
6
8
9
10

**********************************************************************

</pre><hr>
<form action="/ioiupload" enctype="multipart/form-data" method="POST">
<input name="a" value="WbxtyAjAGkY" type="hidden">

<table>
<tbody><tr><td>

<table width="100%" bgcolor="#000000" border="0" cellpadding="0" 
cellspacing="0">
<tbody><tr><td height="1"></td></tr>
<tr><td width="1"></td><td>

  <font face="Verdana,Helvetica,Tahoma,sans-serif,Arial,Lucida Sans,Gill
 Sans">
  <table width="100%" bgcolor="#bfffbf" cellpadding="5">
  <tbody><tr><td><b>Submit a program  for grading:&nbsp;<b><input 
name="filename" type="file">
  &nbsp;&nbsp;
  <input value="Submit" name="submit" type="submit"></b></b></td></tr>
  </tbody></table>

</font></td><td width="1"></td></tr>
<tr height="1"><td></td></tr>
</tbody></table>


</td></tr>

<tr><td><hr></td></tr>

<tr><td>

<table width="100%" bgcolor="#000000" border="0" cellpadding="0" 
cellspacing="0">
<tbody><tr><td height="1"></td></tr>
<tr><td width="1"></td><td>

   <table width="100%" bgcolor="#bfffbf" cellpadding="5">
   <tbody><tr><td colspan="2">
   <font face="Verdana,Helvetica,Tahoma,sans-serif,Arial,Lucida 
Sans,Gill Sans">
   <b>To run your program with your own test data, enter the program<br>
   file name and input file name then click 'Test':</b></font></td></tr>

  <tr><td>

   <table>
   <tbody><tr><td>
     <table>
     <tbody><tr><td>
     <font face="Verdana,Helvetica,Tahoma,sans-serif,Arial,Lucida 
Sans,Gill Sans">
     <b>Program&nbsp;File:&nbsp;</b></font></td>
         <td><input name="testprogramname" type="file"></td></tr>
     <tr><td align="right">
         <font face="Verdana,Helvetica,Tahoma,sans-serif,Arial,Lucida 
Sans,Gill Sans">
         <b>Input&nbsp;File:&nbsp;</b></font></td>
         <td><input name="testfilename" type="file"></td></tr>
     </tbody></table>
   </td>
   <td>&nbsp;&nbsp;</td>
   <td><input value="Test" name="submit" type="submit"></td>
   </tr>
   </tbody></table>

   </td></tr></tbody></table>

</td><td width="1"></td></tr>
<tr height="1"><td></td></tr>
</tbody></table>

</td></tr>
<tr><td><hr></td></tr>

<tr><td>

  <table width="100%" bgcolor="#000000" border="0" cellpadding="0" 
cellspacing="0">
    <tbody><tr><td height="1"></td></tr>
    <tr><td width="1"></td><td>

    <table width="100%" bgcolor="#bfffbf" cellpadding="5">
      <tbody><tr><td>
      <font face="Verdana,Helvetica,Tahoma,sans-serif,Arial,Lucida 
Sans,Gill Sans">
      <b>Backup a file:&nbsp;</b><input name="backupfilename" 
type="file">
      &nbsp;&nbsp;&nbsp;<input value="Backup" name="submit" 
type="submit">
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      <input value="See Backups" name="submit" type="submit">
      </font></td></tr>
    </tbody></table>

    </td><td width="1"></td></tr>
    <tr><td height="1"></td><td></td></tr>
  </tbody></table>

</td></tr>
<tr><td><hr></td></tr>

</tbody></table>
<font face="Verdana,Helvetica,Tahoma,sans-serif,Arial,Lucida Sans,Gill 
Sans"> The following solution files are saved for grading:<br>
<table cellspacing="3">
<tbody><tr><th>Name</th><th>Size</th><th>When</th><th>Age</th></tr>
<tr><td><a 
href="http://ace.delos.com/ioiupload?a=WbxtyAjAGkY&amp;seesaved=line.p">line.p</a></td>
<td align="right">1243</td>
<td align="center"> 5h38:04</td>
<td align="center">1508h47:09</td>
</tr>
<tr><td><a 
href="http://ace.delos.com/ioiupload?a=WbxtyAjAGkY&amp;seesaved=paren.p">paren.p</a></td>
<td align="right">1176</td>
<td align="center"> 6h33:08</td>
<td align="center">1507h52:05</td>
</tr>
<tr><td><a 
href="http://ace.delos.com/ioiupload?a=WbxtyAjAGkY&amp;seesaved=tri.p">tri.p</a></td>
<td align="right">1401</td>
<td align="center"> 8h19:49</td>
<td align="center">1506h05:24</td>
</tr>
</tbody></table>
</font><hr>
<center>
<font face="Verdana,Helvetica,Tahoma,sans-serif,Arial,Lucida Sans,Gill 
Sans"><a href="http://ace.delos.com/ioiedit?a=WbxtyAjAGkY">Edit your 
database record</a>&nbsp;|&nbsp;

<a href="http://ace.delos.com/ioiupload?a=WbxtyAjAGkY&amp;logout=1"> 
Logout </a>
<!--<a href="https://ace.delos.com/rules.html" target="_blank"> Rules </a>-->
&nbsp;|&nbsp;
<a href="http://ace.delos.com/ioiupload?init=1&amp;a=WbxtyAjAGkY">Main 
contest index</a>
</font></center>
<!--&nbsp;|&nbsp;-->
<center>
<font face="Verdana,Helvetica,Tahoma,sans-serif,Arial,Lucida Sans,Gill 
Sans"><a 
href="http://ace.delos.com/ioiupload?a=WbxtyAjAGkY&amp;showsubmit">See 
submitted solutions</a>
&nbsp;|&nbsp;
<a href="http://ace.delos.com/ioiupload?a=WbxtyAjAGkY&amp;suggestionbox">Send
 message
to operations staff</a>
&nbsp;|&nbsp;
Phone: +1 719-321-7333
<br>
Director is not online<br>
This page was generated at 9:25:13 GMT.
</font></center>
</form></body></html>
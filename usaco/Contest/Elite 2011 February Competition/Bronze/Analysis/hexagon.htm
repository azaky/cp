<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
 <title>USACO FEB11 hexagon Analysis</title> 
<style type="text/css">
body       {
	     font-family:Verdana,Helvetica,Tahoma,sans-serif,Arial,Lucida;
	   }
</style>
</head><body bgcolor="#ffffff">
<center><img src="hexagon_files/cow1.jpg" width="742" height="118"></center>
<h2>USACO FEB11 Problem 'hexagon' Analysis</h2>
<h4>by Andre Kessler</h4>
We first make the observation that numbers at a distance of L away from a
 given
number H form the outline of a hexagon of side length L+1 (which might 
be
partially "cut off" by the given size of the board). Thus, if we can 
simply
figure out a way to "walk around" this hexagonal outline while 
collecting the
numbers we step over, then we'll be done. To make this clearer, consider
 the
size 3 hexagon and all numbers (marked with asterisks) at distance 2 
from 14.
We can imagine extending the marked numbers (as shown with 'x's) to form
 a
complete hexagon.
<pre>      12                        12
    7     *                   7     *     
 3     *     *             3     *     *    
    *    15                   *    15     x 
 2    10    18    -&gt;       2    10    18    
    *    14                   *    14     x 
 1     9    17             1     9    17    
    *    13                   *    13     x 
       *                         *     x    
                                    x        
</pre>
<p>
To figure out the marked numbers easily, we will want to give 
coordinates to
each number in the hexagonal grid. Columns are easy to define and index 
as
shown on this size 3 board:
</p><pre>       3
    2     4
 1     3     5
    2     4 
 1     3     5
    2     4
 1     3     5
    2     4
       3
</pre>
We can define "rows" in a trickier fashion, as shown below.
<pre>    _  5  _    
 _  4\___/4  _ 
 3\__  4  __/3
 _  3\___/3  _
 2\__  3  __/2
 _  2\___/2  _
 1\__  2  __/1
    1\___/1
       1 
</pre>
The number of rows in the c-th column is clearly K+c-1 for c &lt;= K, 
and then
3*K-c-1 for c &gt; K. This allows us to quickly convert from (r,c) 
coordinates to
numbers in the given hexagon. An example function to do this is shown 
below.
<div><div id="highlighter_651760" class="syntaxhighlighter  cpp"><div 
class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table
 border="0" cellpadding="0" cellspacing="0"><tbody><tr><td 
class="gutter"><div class="line number1 index0 alt2">1</div><div 
class="line number2 index1 alt1">2</div><div class="line number3 index2 
alt2">3</div><div class="line number4 index3 alt1">4</div><div 
class="line number5 index4 alt2">5</div><div class="line number6 index5 
alt1">6</div><div class="line number7 index6 alt2">7</div><div 
class="line number8 index7 alt1">8</div><div class="line number9 index8 
alt2">9</div><div class="line number10 index9 alt1">10</div><div 
class="line number11 index10 alt2">11</div><div class="line number12 
index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div
 class="line number14 index13 alt1">14</div><div class="line number15 
index14 alt2">15</div><div class="line number16 index15 alt1">16</div></td><td
 class="code"><div class="container"><div class="line number1 index0 
alt2"><code class="cpp comments">/* Tells us how many rows are in column
 C */</code></div><div class="line number2 index1 alt1"><code class="cpp
 keyword bold">inline</code> <code class="cpp color1 bold">int</code> <code
 class="cpp plain">rows (</code><code class="cpp color1 bold">int</code>
 <code class="cpp plain">c)</code></div><div class="line number3 index2 
alt2"><code class="cpp plain">{</code></div><div class="line number4 
index3 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">return</code> <code class="cpp plain">c &lt;= K
 ? c + K - 1 : 3 * K - c - 1;</code></div><div class="line number5 
index4 alt2"><code class="cpp plain">}</code></div><div class="line 
number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code
 class="cpp comments">/* Gives us the number at location (r, c) */</code></div><div
 class="line number8 index7 alt1"><code class="cpp keyword bold">inline</code>
 <code class="cpp color1 bold">int</code> <code class="cpp plain">get_num
 (pair &lt;</code><code class="cpp color1 bold">int</code><code 
class="cpp plain">, </code><code class="cpp color1 bold">int</code><code
 class="cpp plain">&gt; cur)</code></div><div class="line number9 index8
 alt2"><code class="cpp plain">{</code></div><div class="line number10 
index9 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">n = 
cur.first, c = cur.second;</code></div><div class="line number11 index10
 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
keyword bold">for</code> <code class="cpp plain">(</code><code 
class="cpp color1 bold">int</code> <code class="cpp plain">i = 1; i &lt;
 c; i++)</code></div><div class="line number13 index12 alt2"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">n += rows (i);</code></div><div class="line number14 
index13 alt1">&nbsp;</div><div class="line number15 index14 alt2"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
keyword bold">return</code> <code class="cpp plain">n;</code></div><div 
class="line number16 index15 alt1"><code class="cpp plain">}</code></div></div></td></tr></tbody></table></div></div>
We can also convert from numbers to (r,c) coordinates:
<div><div id="highlighter_104482" class="syntaxhighlighter  cpp"><div 
class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table
 border="0" cellpadding="0" cellspacing="0"><tbody><tr><td 
class="gutter"><div class="line number1 index0 alt2">1</div><div 
class="line number2 index1 alt1">2</div><div class="line number3 index2 
alt2">3</div><div class="line number4 index3 alt1">4</div><div 
class="line number5 index4 alt2">5</div><div class="line number6 index5 
alt1">6</div><div class="line number7 index6 alt2">7</div><div 
class="line number8 index7 alt1">8</div><div class="line number9 index8 
alt2">9</div><div class="line number10 index9 alt1">10</div><div 
class="line number11 index10 alt2">11</div><div class="line number12 
index11 alt1">12</div><div class="line number13 index12 alt2">13</div></td><td
 class="code"><div class="container"><div class="line number1 index0 
alt2"><code class="cpp comments">/* Gives us the (r, c) coordinates for 
some number h */</code></div><div class="line number2 index1 alt1"><code
 class="cpp keyword bold">inline</code> <code class="cpp plain">pair 
&lt;</code><code class="cpp color1 bold">int</code><code class="cpp 
plain">, </code><code class="cpp color1 bold">int</code><code class="cpp
 plain">&gt; get_loc (</code><code class="cpp color1 bold">int</code> <code
 class="cpp plain">h)</code></div><div class="line number3 index2 alt2"><code
 class="cpp plain">{</code></div><div class="line number4 index3 alt1"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
color1 bold">int</code> <code class="cpp plain">p = 1, c;</code></div><div
 class="line number5 index4 alt2">&nbsp;</div><div class="line number6 
index5 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">for</code> <code class="cpp plain">(c = 1; c 
&lt;= 2 * K - 1; c++)</code></div><div class="line number7 index6 alt2"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">if</code> <code class="cpp plain">(p + rows 
(c) &gt; h)</code></div><div class="line number8 index7 alt1"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">break</code><code class="cpp plain">;</code></div><div
 class="line number9 index8 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">else</code></div><div class="line number10 
index9 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">p += rows (c);</code></div><div class="line number11 
index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
keyword bold">return</code> <code class="cpp plain">make_pair (h - p + 
1, c);</code></div><div class="line number13 index12 alt2"><code 
class="cpp plain">}</code></div></div></td></tr></tbody></table></div></div>
Our coordinates also allow us to easily "make moves" in any legal 
direction we
want. Those six directions are: straight up, straight down, up and to 
the
right, up and to the left, down and to the right, and down and to the 
left.

<p> The way we change the (r,c) coordinates when we make a move is 
obvious when
we're moving up or down (just increment or decrement the row index) but 
it's
less obvious when we're moving right or left. In these cases, the 
changes
depend upon the index of our column, so we need to take that into 
account. An
example function to give the next (r,c) coordinates after making a move 
is
shown below. 
</p><div><div id="highlighter_49722" class="syntaxhighlighter  cpp"><div
 class="toolbar"><span><a href="#" class="toolbar_item command_help 
help">?</a></span></div><table border="0" cellpadding="0" 
cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 
index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div 
class="line number3 index2 alt2">3</div><div class="line number4 index3 
alt1">4</div><div class="line number5 index4 alt2">5</div><div 
class="line number6 index5 alt1">6</div><div class="line number7 index6 
alt2">7</div><div class="line number8 index7 alt1">8</div><div 
class="line number9 index8 alt2">9</div><div class="line number10 index9
 alt1">10</div><div class="line number11 index10 alt2">11</div><div 
class="line number12 index11 alt1">12</div><div class="line number13 
index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div
 class="line number15 index14 alt2">15</div><div class="line number16 
index15 alt1">16</div></td><td class="code"><div class="container"><div 
class="line number1 index0 alt2"><code class="cpp keyword bold">inline</code>
 <code class="cpp plain">pair &lt;</code><code class="cpp color1 bold">int</code><code
 class="cpp plain">, </code><code class="cpp color1 bold">int</code><code
 class="cpp plain">&gt; get_next (pair &lt;</code><code class="cpp 
color1 bold">int</code><code class="cpp plain">, </code><code class="cpp
 color1 bold">int</code><code class="cpp plain">&gt; cur, </code><code 
class="cpp color1 bold">int</code> <code class="cpp plain">move)</code></div><div
 class="line number2 index1 alt1"><code class="cpp plain">{</code></div><div
 class="line number3 index2 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">nr, nc, r = 
cur.first, c = cur.second;</code></div><div class="line number4 index3 
alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="cpp
 spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">switch</code>&nbsp;
 <code class="cpp plain">(move)</code></div><div class="line number6 
index5 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">{</code></div><div class="line number7 index6 alt2"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">case</code> <code class="cpp plain">UP:&nbsp;&nbsp;
 nc = c;&nbsp;&nbsp;&nbsp;&nbsp; nr = r + 
1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 </code><code class="cpp keyword bold">break</code><code class="cpp 
plain">;</code></div><div class="line number8 index7 alt1"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">case</code> <code class="cpp plain">DOWN: nc =
 c;&nbsp;&nbsp;&nbsp;&nbsp; nr = r - 
1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 </code><code class="cpp keyword bold">break</code><code class="cpp 
plain">;</code></div><div class="line number9 index8 alt2"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">case</code> <code class="cpp plain">RU:&nbsp;&nbsp;
 nc = c + 1; nr = r + (c &gt;= K ? 0 : 1); </code><code class="cpp 
keyword bold">break</code><code class="cpp plain">;</code></div><div 
class="line number10 index9 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">case</code> <code class="cpp plain">RD:&nbsp;&nbsp;
 nc = c + 1; nr = r - (c &gt;= K ? 1 : 0); </code><code class="cpp 
keyword bold">break</code><code class="cpp plain">;</code></div><div 
class="line number11 index10 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">case</code> <code class="cpp plain">LU:&nbsp;&nbsp;
 nc = c - 1; nr = r + (c &gt; K ? 1 : 0);&nbsp; </code><code class="cpp 
keyword bold">break</code><code class="cpp plain">;</code></div><div 
class="line number12 index11 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">case</code> <code class="cpp plain">LD:&nbsp;&nbsp;
 nc = c - 1; nr = r - (c &gt; K ? 0 : 1);&nbsp; </code><code class="cpp 
keyword bold">break</code><code class="cpp plain">;</code></div><div 
class="line number13 index12 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">}</code></div><div class="line number14 index13 alt1">&nbsp;</div><div
 class="line number15 index14 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">return</code> <code class="cpp plain">valid 
(nr, nc) ? make_pair (nr, nc) : INVALID;</code></div><div class="line 
number16 index15 alt1"><code class="cpp plain">}</code></div></div></td></tr></tbody></table></div></div>
<p>
Once we can get the next (r,c) location after making a move, the rest of
 the
program becomes simple. To get all of the points on the hexagon, we will
 walk
to each vertex of the hexagon, and then walk along each of the two 
adjacent edges.

</p><p> Finally, the procedure above ensures that we find all locations,
 but it
might cover some twice. To rectify this, we can simply sort the found 
locations
(we'll need to print them in sorted order anyways) and then make sure to
 print
each location just once. 

</p><p> My complete code for this solution is below.
</p><div><div id="highlighter_526007" class="syntaxhighlighter  cpp"><div
 class="toolbar"><span><a href="#" class="toolbar_item command_help 
help">?</a></span></div><table border="0" cellpadding="0" 
cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 
index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div 
class="line number3 index2 alt2">3</div><div class="line number4 index3 
alt1">4</div><div class="line number5 index4 alt2">5</div><div 
class="line number6 index5 alt1">6</div><div class="line number7 index6 
alt2">7</div><div class="line number8 index7 alt1">8</div><div 
class="line number9 index8 alt2">9</div><div class="line number10 index9
 alt1">10</div><div class="line number11 index10 alt2">11</div><div 
class="line number12 index11 alt1">12</div><div class="line number13 
index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div
 class="line number15 index14 alt2">15</div><div class="line number16 
index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div
 class="line number18 index17 alt1">18</div><div class="line number19 
index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div
 class="line number21 index20 alt2">21</div><div class="line number22 
index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div
 class="line number24 index23 alt1">24</div><div class="line number25 
index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div
 class="line number27 index26 alt2">27</div><div class="line number28 
index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div
 class="line number30 index29 alt1">30</div><div class="line number31 
index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div
 class="line number33 index32 alt2">33</div><div class="line number34 
index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div
 class="line number36 index35 alt1">36</div><div class="line number37 
index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div
 class="line number39 index38 alt2">39</div><div class="line number40 
index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div
 class="line number42 index41 alt1">42</div><div class="line number43 
index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div
 class="line number45 index44 alt2">45</div><div class="line number46 
index45 alt1">46</div><div class="line number47 index46 alt2">47</div><div
 class="line number48 index47 alt1">48</div><div class="line number49 
index48 alt2">49</div><div class="line number50 index49 alt1">50</div><div
 class="line number51 index50 alt2">51</div><div class="line number52 
index51 alt1">52</div><div class="line number53 index52 alt2">53</div><div
 class="line number54 index53 alt1">54</div><div class="line number55 
index54 alt2">55</div><div class="line number56 index55 alt1">56</div><div
 class="line number57 index56 alt2">57</div><div class="line number58 
index57 alt1">58</div><div class="line number59 index58 alt2">59</div><div
 class="line number60 index59 alt1">60</div><div class="line number61 
index60 alt2">61</div><div class="line number62 index61 alt1">62</div><div
 class="line number63 index62 alt2">63</div><div class="line number64 
index63 alt1">64</div><div class="line number65 index64 alt2">65</div><div
 class="line number66 index65 alt1">66</div><div class="line number67 
index66 alt2">67</div><div class="line number68 index67 alt1">68</div><div
 class="line number69 index68 alt2">69</div><div class="line number70 
index69 alt1">70</div><div class="line number71 index70 alt2">71</div><div
 class="line number72 index71 alt1">72</div><div class="line number73 
index72 alt2">73</div><div class="line number74 index73 alt1">74</div><div
 class="line number75 index74 alt2">75</div><div class="line number76 
index75 alt1">76</div><div class="line number77 index76 alt2">77</div><div
 class="line number78 index77 alt1">78</div><div class="line number79 
index78 alt2">79</div><div class="line number80 index79 alt1">80</div><div
 class="line number81 index80 alt2">81</div><div class="line number82 
index81 alt1">82</div><div class="line number83 index82 alt2">83</div><div
 class="line number84 index83 alt1">84</div><div class="line number85 
index84 alt2">85</div><div class="line number86 index85 alt1">86</div><div
 class="line number87 index86 alt2">87</div><div class="line number88 
index87 alt1">88</div><div class="line number89 index88 alt2">89</div><div
 class="line number90 index89 alt1">90</div><div class="line number91 
index90 alt2">91</div><div class="line number92 index91 alt1">92</div><div
 class="line number93 index92 alt2">93</div><div class="line number94 
index93 alt1">94</div><div class="line number95 index94 alt2">95</div><div
 class="line number96 index95 alt1">96</div><div class="line number97 
index96 alt2">97</div><div class="line number98 index97 alt1">98</div><div
 class="line number99 index98 alt2">99</div><div class="line number100 
index99 alt1">100</div><div class="line number101 index100 alt2">101</div><div
 class="line number102 index101 alt1">102</div><div class="line 
number103 index102 alt2">103</div><div class="line number104 index103 
alt1">104</div><div class="line number105 index104 alt2">105</div><div 
class="line number106 index105 alt1">106</div><div class="line number107
 index106 alt2">107</div><div class="line number108 index107 alt1">108</div><div
 class="line number109 index108 alt2">109</div><div class="line 
number110 index109 alt1">110</div><div class="line number111 index110 
alt2">111</div><div class="line number112 index111 alt1">112</div><div 
class="line number113 index112 alt2">113</div><div class="line number114
 index113 alt1">114</div><div class="line number115 index114 alt2">115</div><div
 class="line number116 index115 alt1">116</div><div class="line 
number117 index116 alt2">117</div><div class="line number118 index117 
alt1">118</div><div class="line number119 index118 alt2">119</div><div 
class="line number120 index119 alt1">120</div><div class="line number121
 index120 alt2">121</div><div class="line number122 index121 alt1">122</div><div
 class="line number123 index122 alt2">123</div><div class="line 
number124 index123 alt1">124</div><div class="line number125 index124 
alt2">125</div><div class="line number126 index125 alt1">126</div><div 
class="line number127 index126 alt2">127</div><div class="line number128
 index127 alt1">128</div><div class="line number129 index128 alt2">129</div><div
 class="line number130 index129 alt1">130</div><div class="line 
number131 index130 alt2">131</div></td><td class="code"><div 
class="container"><div class="line number1 index0 alt2"><code class="cpp
 preprocessor">#include &lt;cstdio&gt;</code></div><div class="line 
number2 index1 alt1"><code class="cpp preprocessor">#include 
&lt;cstdlib&gt;</code></div><div class="line number3 index2 alt2"><code 
class="cpp preprocessor">#include &lt;algorithm&gt;</code></div><div 
class="line number4 index3 alt1"><code class="cpp keyword bold">using</code>
 <code class="cpp keyword bold">namespace</code> <code class="cpp plain">std;</code></div><div
 class="line number5 index4 alt2">&nbsp;</div><div class="line number6 
index5 alt1"><code class="cpp color1 bold">FILE</code> <code class="cpp 
plain">*fin = </code><code class="cpp functions bold">fopen</code> <code
 class="cpp plain">(</code><code class="cpp string">"hexagon.in"</code><code
 class="cpp plain">, </code><code class="cpp string">"r"</code><code 
class="cpp plain">), *fout = </code><code class="cpp functions bold">fopen</code>
 <code class="cpp plain">(</code><code class="cpp string">"hexagon.out"</code><code
 class="cpp plain">, </code><code class="cpp string">"w"</code><code 
class="cpp plain">);</code></div><div class="line number7 index6 alt2">&nbsp;</div><div
 class="line number8 index7 alt1"><code class="cpp keyword bold">const</code>
 <code class="cpp color1 bold">int</code> <code class="cpp plain">MAXT =
 10005;</code></div><div class="line number9 index8 alt2"><code 
class="cpp keyword bold">const</code> <code class="cpp plain">pair &lt;</code><code
 class="cpp color1 bold">int</code><code class="cpp plain">, </code><code
 class="cpp color1 bold">int</code><code class="cpp plain">&gt; INVALID =
 make_pair (-1, -1);</code></div><div class="line number10 index9 alt1"><code
 class="cpp comments">/* The six directions we can walk in */</code></div><div
 class="line number11 index10 alt2"><code class="cpp keyword bold">enum</code>
 <code class="cpp plain">{ UP, DOWN, RU, RD, LU, LD };</code></div><div 
class="line number12 index11 alt1">&nbsp;</div><div class="line number13
 index12 alt2"><code class="cpp color1 bold">int</code> <code class="cpp
 plain">K, L, H, T = 0, N = 0, nums [MAXT], distinct [MAXT];</code></div><div
 class="line number14 index13 alt1">&nbsp;</div><div class="line 
number15 index14 alt2"><code class="cpp comments">/* Tells us how many 
rows are in column C */</code></div><div class="line number16 index15 
alt1"><code class="cpp keyword bold">inline</code> <code class="cpp 
color1 bold">int</code> <code class="cpp plain">rows (</code><code 
class="cpp color1 bold">int</code> <code class="cpp plain">c)</code></div><div
 class="line number17 index16 alt2"><code class="cpp plain">{</code></div><div
 class="line number18 index17 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">return</code> <code class="cpp plain">c &lt;= K
 ? c + K - 1 : 3 * K - c - 1;</code></div><div class="line number19 
index18 alt2"><code class="cpp plain">}</code></div><div class="line 
number20 index19 alt1">&nbsp;</div><div class="line number21 index20 
alt2"><code class="cpp comments">/* Is location (r, c) on the hexagonal 
board? */</code></div><div class="line number22 index21 alt1"><code 
class="cpp keyword bold">inline</code> <code class="cpp color1 bold">int</code>
 <code class="cpp plain">valid (</code><code class="cpp color1 bold">int</code>
 <code class="cpp plain">r, </code><code class="cpp color1 bold">int</code>
 <code class="cpp plain">c)</code></div><div class="line number23 
index22 alt2"><code class="cpp plain">{</code></div><div class="line 
number24 index23 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">return</code> <code class="cpp plain">c &gt;= 1
 &amp;&amp; c &lt;= 2 * K - 1 &amp;&amp; r &gt;= 1</code></div><div 
class="line number25 index24 alt2"><code class="cpp plain">&amp;&amp; r 
&lt;= rows (c);</code></div><div class="line number26 index25 alt1"><code
 class="cpp plain">}</code></div><div class="line number27 index26 alt2">&nbsp;</div><div
 class="line number28 index27 alt1"><code class="cpp comments">/* Gives 
us the number at location (r, c) */</code></div><div class="line 
number29 index28 alt2"><code class="cpp keyword bold">inline</code> <code
 class="cpp color1 bold">int</code> <code class="cpp plain">get_num 
(pair &lt;</code><code class="cpp color1 bold">int</code><code 
class="cpp plain">, </code><code class="cpp color1 bold">int</code><code
 class="cpp plain">&gt; cur)</code></div><div class="line number30 
index29 alt1"><code class="cpp plain">{</code></div><div class="line 
number31 index30 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">n = 
cur.first, c = cur.second;</code></div><div class="line number32 index31
 alt1">&nbsp;</div><div class="line number33 index32 alt2"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
keyword bold">for</code> <code class="cpp plain">(</code><code 
class="cpp color1 bold">int</code> <code class="cpp plain">i = 1; i &lt;
 c; i++)</code></div><div class="line number34 index33 alt1"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">n += rows (i);</code></div><div class="line number35 
index34 alt2">&nbsp;</div><div class="line number36 index35 alt1"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
keyword bold">return</code> <code class="cpp plain">n;</code></div><div 
class="line number37 index36 alt2"><code class="cpp plain">}</code></div><div
 class="line number38 index37 alt1">&nbsp;</div><div class="line 
number39 index38 alt2"><code class="cpp comments">/* Gives us the (r, c)
 coordinates for some number h */</code></div><div class="line number40 
index39 alt1"><code class="cpp keyword bold">inline</code> <code 
class="cpp plain">pair &lt;</code><code class="cpp color1 bold">int</code><code
 class="cpp plain">, </code><code class="cpp color1 bold">int</code><code
 class="cpp plain">&gt; get_loc (</code><code class="cpp color1 bold">int</code>
 <code class="cpp plain">h)</code></div><div class="line number41 
index40 alt2"><code class="cpp plain">{</code></div><div class="line 
number42 index41 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">p = 1, c;</code></div><div
 class="line number43 index42 alt2">&nbsp;</div><div class="line 
number44 index43 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">for</code> <code class="cpp plain">(c = 1; c 
&lt;= 2 * K - 1; c++)</code></div><div class="line number45 index44 
alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">if</code> <code class="cpp plain">(p + rows 
(c) &gt; h)</code></div><div class="line number46 index45 alt1"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">break</code><code class="cpp plain">;</code></div><div
 class="line number47 index46 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">else</code></div><div class="line number48 
index47 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">p += rows (c);</code></div><div class="line number49 
index48 alt2">&nbsp;</div><div class="line number50 index49 alt1"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
keyword bold">return</code> <code class="cpp plain">make_pair (h - p + 
1, c);</code></div><div class="line number51 index50 alt2"><code 
class="cpp plain">}</code></div><div class="line number52 index51 alt1">&nbsp;</div><div
 class="line number53 index52 alt2"><code class="cpp comments">/*</code></div><div
 class="line number54 index53 alt1"><code class="cpp comments">Gives us 
the (r, c) coordinates of our new location after</code></div><div 
class="line number55 index54 alt2"><code class="cpp comments">making a 
move in one of the following legal directions:</code></div><div 
class="line number56 index55 alt1"><code class="cpp comments">up, down, 
right &amp; up, right &amp; down, left &amp; up, left &amp; down</code></div><div
 class="line number57 index56 alt2"><code class="cpp comments">*/</code></div><div
 class="line number58 index57 alt1"><code class="cpp keyword bold">inline</code>
 <code class="cpp plain">pair &lt;</code><code class="cpp color1 bold">int</code><code
 class="cpp plain">, </code><code class="cpp color1 bold">int</code><code
 class="cpp plain">&gt; get_next (pair &lt;</code><code class="cpp 
color1 bold">int</code><code class="cpp plain">, </code><code class="cpp
 color1 bold">int</code><code class="cpp plain">&gt; cur, </code><code 
class="cpp color1 bold">int</code> <code class="cpp plain">move)</code></div><div
 class="line number59 index58 alt2"><code class="cpp plain">{</code></div><div
 class="line number60 index59 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">nr, nc, r = 
cur.first, c = cur.second;</code></div><div class="line number61 index60
 alt2">&nbsp;</div><div class="line number62 index61 alt1"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
keyword bold">switch</code>&nbsp; <code class="cpp plain">(move)</code></div><div
 class="line number63 index62 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">{</code></div><div class="line number64 index63 alt1"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">case</code> <code class="cpp plain">UP:&nbsp;&nbsp;
 nc = c;&nbsp;&nbsp;&nbsp;&nbsp; nr = r + 
1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 </code><code class="cpp keyword bold">break</code><code class="cpp 
plain">;</code></div><div class="line number65 index64 alt2"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">case</code> <code class="cpp plain">DOWN: nc =
 c;&nbsp;&nbsp;&nbsp;&nbsp; nr = r - 
1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 </code><code class="cpp keyword bold">break</code><code class="cpp 
plain">;</code></div><div class="line number66 index65 alt1"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">case</code> <code class="cpp plain">RU:&nbsp;&nbsp;
 nc = c + 1; nr = r + (c &gt;= K ? 0 : 1); </code><code class="cpp 
keyword bold">break</code><code class="cpp plain">;</code></div><div 
class="line number67 index66 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">case</code> <code class="cpp plain">RD:&nbsp;&nbsp;
 nc = c + 1; nr = r - (c &gt;= K ? 1 : 0); </code><code class="cpp 
keyword bold">break</code><code class="cpp plain">;</code></div><div 
class="line number68 index67 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">case</code> <code class="cpp plain">LU:&nbsp;&nbsp;
 nc = c - 1; nr = r + (c &gt; K ? 1 : 0);&nbsp; </code><code class="cpp 
keyword bold">break</code><code class="cpp plain">;</code></div><div 
class="line number69 index68 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">case</code> <code class="cpp plain">LD:&nbsp;&nbsp;
 nc = c - 1; nr = r - (c &gt; K ? 0 : 1);&nbsp; </code><code class="cpp 
keyword bold">break</code><code class="cpp plain">;</code></div><div 
class="line number70 index69 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">}</code></div><div class="line number71 index70 alt2">&nbsp;</div><div
 class="line number72 index71 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">return</code> <code class="cpp plain">valid 
(nr, nc) ? make_pair (nr, nc) : INVALID;</code></div><div class="line 
number73 index72 alt2"><code class="cpp plain">}</code></div><div 
class="line number74 index73 alt1">&nbsp;</div><div class="line number75
 index74 alt2"><code class="cpp comments">/*</code></div><div 
class="line number76 index75 alt1"><code class="cpp comments">Simulates 
walking up from (r, c) by L steps, then adding the</code></div><div 
class="line number77 index76 alt2"><code class="cpp comments">numbers 
along each diagonal to the numbers at a particular</code></div><div 
class="line number78 index77 alt1"><code class="cpp comments">distance 
(so, first we take L steps of m1, then m2, then m3).</code></div><div 
class="line number79 index78 alt2"><code class="cpp comments">*/</code></div><div
 class="line number80 index79 alt1"><code class="cpp keyword bold">inline</code>
 <code class="cpp keyword bold">void</code> <code class="cpp plain">make_moves
 (pair &lt;</code><code class="cpp color1 bold">int</code><code 
class="cpp plain">, </code><code class="cpp color1 bold">int</code><code
 class="cpp plain">&gt; cur, </code><code class="cpp color1 bold">int</code>
 <code class="cpp plain">m1, </code><code class="cpp color1 bold">int</code>
 <code class="cpp plain">m2, </code><code class="cpp color1 bold">int</code>
 <code class="cpp plain">m3)</code></div><div class="line number81 
index80 alt2"><code class="cpp plain">{</code></div><div class="line 
number82 index81 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">for</code> <code class="cpp plain">(</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">i = 1; i 
&lt;= L; i++)</code></div><div class="line number83 index82 alt2"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">if</code> <code class="cpp plain">(cur == 
INVALID)</code></div><div class="line number84 index83 alt1"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">return</code><code class="cpp plain">;</code></div><div
 class="line number85 index84 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">else</code></div><div class="line number86 
index85 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">cur = get_next (cur, m1);</code></div><div 
class="line number87 index86 alt2">&nbsp;</div><div class="line number88
 index87 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">pair &lt;</code><code class="cpp color1 bold">int</code><code
 class="cpp plain">, </code><code class="cpp color1 bold">int</code><code
 class="cpp plain">&gt; top = cur;</code></div><div class="line number89
 index88 alt2">&nbsp;</div><div class="line number90 index89 alt1"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
keyword bold">for</code> <code class="cpp plain">(</code><code 
class="cpp color1 bold">int</code> <code class="cpp plain">t = 0; t &lt;
 2; t++)</code></div><div class="line number91 index90 alt2"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
plain">{</code></div><div class="line number92 index91 alt1"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">for</code> <code class="cpp plain">(</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">i = 1; i 
&lt;= L; i++)</code></div><div class="line number93 index92 alt2"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">if</code> <code class="cpp plain">(cur == 
INVALID)</code></div><div class="line number94 index93 alt1"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">break</code><code class="cpp plain">;</code></div><div
 class="line number95 index94 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">else</code></div><div class="line number96 
index95 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">nums [T++] = get_num (cur), cur = get_next (cur, t ? 
m3 : m2);</code></div><div class="line number97 index96 alt2">&nbsp;</div><div
 class="line number98 index97 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">cur = top;</code></div><div class="line number99 
index98 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">}</code></div><div class="line number100 index99 
alt1"><code class="cpp plain">}</code></div><div class="line number101 
index100 alt2">&nbsp;</div><div class="line number102 index101 alt1"><code
 class="cpp color1 bold">int</code> <code class="cpp plain">main ()</code></div><div
 class="line number103 index102 alt2"><code class="cpp plain">{</code></div><div
 class="line number104 index103 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp functions bold">fscanf</code> <code class="cpp plain">(fin, </code><code
 class="cpp string">"%d %d %d"</code><code class="cpp plain">, &amp;K, 
&amp;H, &amp;L);</code></div><div class="line number105 index104 alt2"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div 
class="line number106 index105 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">pair &lt;</code><code class="cpp color1 bold">int</code><code
 class="cpp plain">, </code><code class="cpp color1 bold">int</code><code
 class="cpp plain">&gt; loc = get_loc (H);</code></div><div class="line 
number107 index106 alt2">&nbsp;</div><div class="line number108 index107
 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code 
class="cpp comments">/* Now let's simulate walking a distance L */</code></div><div
 class="line number109 index108 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">make_moves (loc, UP, RD, LD);</code></div><div 
class="line number110 index109 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">make_moves (loc, DOWN, RU, LU);</code></div><div 
class="line number111 index110 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">make_moves (loc, RU, LU, DOWN);</code></div><div 
class="line number112 index111 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">make_moves (loc, LU, RU, DOWN);</code></div><div 
class="line number113 index112 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">make_moves (loc, RD, UP, LD);</code></div><div 
class="line number114 index113 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">make_moves (loc, LD, UP, RD);</code></div><div 
class="line number115 index114 alt2">&nbsp;</div><div class="line 
number116 index115 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp comments">/* Numbers should be in order */</code></div><div 
class="line number117 index116 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">sort (nums, nums + T);</code></div><div class="line 
number118 index117 alt1">&nbsp;</div><div class="line number119 index118
 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code 
class="cpp comments">/* We only want one of each number, so remove 
duplicates */</code></div><div class="line number120 index119 alt1"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
plain">distinct [N++] = nums [0];</code></div><div class="line number121
 index120 alt2">&nbsp;</div><div class="line number122 index121 alt1"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
keyword bold">for</code> <code class="cpp plain">(</code><code 
class="cpp color1 bold">int</code> <code class="cpp plain">i = 1; i &lt;
 T; i++)</code></div><div class="line number123 index122 alt2"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">if</code> <code class="cpp plain">(nums [i] !=
 nums [i - 1])</code></div><div class="line number124 index123 alt1"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">distinct [N++] = nums [i];</code></div><div 
class="line number125 index124 alt2">&nbsp;</div><div class="line 
number126 index125 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp functions bold">fprintf</code> <code class="cpp plain">(fout,
 </code><code class="cpp string">"%d\n"</code><code class="cpp plain">, 
N);</code></div><div class="line number127 index126 alt2">&nbsp;</div><div
 class="line number128 index127 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">for</code> <code class="cpp plain">(</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">i = 0; i 
&lt; N; i++)</code></div><div class="line number129 index128 alt2"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp functions bold">fprintf</code> <code class="cpp plain">(fout,
 </code><code class="cpp string">"%d\n"</code><code class="cpp plain">, 
distinct [i]);</code></div><div class="line number130 index129 alt1"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
keyword bold">return</code> <code class="cpp plain">0;</code></div><div 
class="line number131 index130 alt2"><code class="cpp plain">}</code></div></div></td></tr></tbody></table></div></div>

Fatih has an alternate solution which might be a bit easier to code:

<div><div id="highlighter_986658" class="syntaxhighlighter  cpp"><div 
class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table
 border="0" cellpadding="0" cellspacing="0"><tbody><tr><td 
class="gutter"><div class="line number1 index0 alt2">1</div><div 
class="line number2 index1 alt1">2</div><div class="line number3 index2 
alt2">3</div><div class="line number4 index3 alt1">4</div><div 
class="line number5 index4 alt2">5</div><div class="line number6 index5 
alt1">6</div><div class="line number7 index6 alt2">7</div><div 
class="line number8 index7 alt1">8</div><div class="line number9 index8 
alt2">9</div><div class="line number10 index9 alt1">10</div><div 
class="line number11 index10 alt2">11</div><div class="line number12 
index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div
 class="line number14 index13 alt1">14</div><div class="line number15 
index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div
 class="line number17 index16 alt2">17</div><div class="line number18 
index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div
 class="line number20 index19 alt1">20</div><div class="line number21 
index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div
 class="line number23 index22 alt2">23</div><div class="line number24 
index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div
 class="line number26 index25 alt1">26</div><div class="line number27 
index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div
 class="line number29 index28 alt2">29</div><div class="line number30 
index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div
 class="line number32 index31 alt1">32</div><div class="line number33 
index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div
 class="line number35 index34 alt2">35</div><div class="line number36 
index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div
 class="line number38 index37 alt1">38</div><div class="line number39 
index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div
 class="line number41 index40 alt2">41</div><div class="line number42 
index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div
 class="line number44 index43 alt1">44</div><div class="line number45 
index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div
 class="line number47 index46 alt2">47</div><div class="line number48 
index47 alt1">48</div><div class="line number49 index48 alt2">49</div><div
 class="line number50 index49 alt1">50</div><div class="line number51 
index50 alt2">51</div><div class="line number52 index51 alt1">52</div><div
 class="line number53 index52 alt2">53</div><div class="line number54 
index53 alt1">54</div><div class="line number55 index54 alt2">55</div></td><td
 class="code"><div class="container"><div class="line number1 index0 
alt2"><code class="cpp preprocessor">#include &lt;fstream&gt;</code></div><div
 class="line number2 index1 alt1"><code class="cpp preprocessor">#include
 &lt;algorithm&gt;</code></div><div class="line number3 index2 alt2"><code
 class="cpp preprocessor">#define MAX 50</code></div><div class="line 
number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code
 class="cpp keyword bold">using</code> <code class="cpp keyword bold">namespace</code>
 <code class="cpp plain">std;</code></div><div class="line number6 
index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code 
class="cpp keyword bold">const</code> <code class="cpp color1 bold">int</code>
 <code class="cpp plain">dir[6][2] = { { 0, 2}, { 1, 1},</code></div><div
 class="line number8 index7 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">{ 1,-1}, { 0,-2},</code></div><div class="line 
number9 index8 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">{-1,-1}, {-1, 1} };</code></div><div class="line 
number10 index9 alt1">&nbsp;</div><div class="line number11 index10 
alt2"><code class="cpp keyword bold">const</code> <code class="cpp 
color1 bold">int</code> <code class="cpp plain">loc[6][2] = { {-1,-1}, 
{-1, 1},</code></div><div class="line number12 index11 alt1"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">{ 0, 2}, { 1, 1},</code></div><div class="line 
number13 index12 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">{ 1,-1}, { 0,-2} };</code></div><div class="line 
number14 index13 alt1">&nbsp;</div><div class="line number15 index14 
alt2"><code class="cpp color1 bold">int</code> <code class="cpp plain">k,h,l,y,x,mat[2*MAX-1][4*MAX-3],val[(MAX-1)*6],cnt;</code></div><div
 class="line number16 index15 alt1">&nbsp;</div><div class="line 
number17 index16 alt2"><code class="cpp color1 bold">int</code> <code 
class="cpp plain">main()</code></div><div class="line number18 index17 
alt1"><code class="cpp plain">{</code></div><div class="line number19 
index18 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">ifstream fin(</code><code class="cpp string">"hexagon.in"</code><code
 class="cpp plain">);</code></div><div class="line number20 index19 
alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code 
class="cpp plain">fin &gt;&gt; k &gt;&gt; h &gt;&gt; l;</code></div><div
 class="line number21 index20 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">fin.close();</code></div><div class="line number22 
index21 alt1">&nbsp;</div><div class="line number23 index22 alt2"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
comments">// generate hexagonal matrix</code></div><div class="line 
number24 index23 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">for</code> <code class="cpp plain">(</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">i=0,a=k,b=0;
 i&lt;2*k-1; i++)</code></div><div class="line number25 index24 alt2"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
plain">{</code></div><div class="line number26 index25 alt1"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">for</code> <code class="cpp plain">(</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">j=0; j&lt;a;
 j++)</code></div><div class="line number27 index26 alt2"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">{</code></div><div class="line number28 index27 alt1"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">mat[i][2*k-1-a+2*j]=++b;</code></div><div class="line
 number29 index28 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp comments">// save position of pasture H in the matrix</code></div><div
 class="line number30 index29 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">if</code> <code class="cpp plain">(b==h) 
y=i,x=2*k-1-a+2*j;</code></div><div class="line number31 index30 alt2"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">}</code></div><div class="line number32 index31 alt1"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">a=(i&lt;k-1 ? a+1 : a-1); </code><code class="cpp 
comments">// upper or lower half of the hexagon</code></div><div 
class="line number33 index32 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">}</code></div><div class="line number34 index33 alt1">&nbsp;</div><div
 class="line number35 index34 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp comments">// find pastures L distance away from H</code></div><div
 class="line number36 index35 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp comments">// search in 6 direction (see constant array dir)</code></div><div
 class="line number37 index36 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">for</code> <code class="cpp plain">(</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">i=0; i&lt;6;
 i++)</code></div><div class="line number38 index37 alt1"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp 
plain">{</code></div><div class="line number39 index38 alt2"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp comments">// calculate (y1,x1) - starting position in the 
matrix</code></div><div class="line number40 index39 alt1"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">y1=y+l*loc[i][0],x1=x+l*loc[i][1];</code></div><div
 class="line number41 index40 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp comments">// get L pastures sarting from (y1,x1) in 
direction i</code></div><div class="line number42 index41 alt1"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">for</code> <code class="cpp plain">(</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">j=0; j&lt;l;
 j++,y1+=dir[i][0],x1+=dir[i][1])</code></div><div class="line number43 
index42 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp comments">// if the pasture is in the hexagon, save the 
pasture</code></div><div class="line number44 index43 alt1"><code 
class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">if</code> <code class="cpp plain">(y1&gt;=0&amp;&amp;y1&lt;=2*k-2&amp;&amp;x1&gt;=0&amp;&amp;x1&lt;=4*k-4&amp;&amp;mat[y1][x1])</code></div><div
 class="line number45 index44 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">val[cnt++]=mat[y1][x1];</code></div><div class="line 
number46 index45 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">}</code></div><div class="line number47 index46 alt2">&nbsp;</div><div
 class="line number48 index47 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">sort(val,val+cnt);</code></div><div class="line 
number49 index48 alt2">&nbsp;</div><div class="line number50 index49 
alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code 
class="cpp plain">ofstream fout(</code><code class="cpp string">"hexagon.out"</code><code
 class="cpp plain">);</code></div><div class="line number51 index50 
alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code 
class="cpp plain">fout &lt;&lt; cnt &lt;&lt; endl;</code></div><div 
class="line number52 index51 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp keyword bold">for</code> <code class="cpp plain">(</code><code
 class="cpp color1 bold">int</code> <code class="cpp plain">i=0; 
i&lt;cnt; i++)</code></div><div class="line number53 index52 alt2"><code
 class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">fout &lt;&lt; val[i] &lt;&lt; </code><code class="cpp
 string">"\n"</code><code class="cpp plain">;</code></div><div 
class="line number54 index53 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
 class="cpp plain">fout.close();</code></div><div class="line number55 
index54 alt2"><code class="cpp plain">}</code></div></div></td></tr></tbody></table></div></div>


<script type="text/javascript" src="hexagon_files/shCore.js"></script>
<script type="text/javascript" src="hexagon_files/shBrushCpp.js"></script>
<script type="text/javascript" src="hexagon_files/shBrushJava.js"></script>
<link href="hexagon_files/shCore.css" rel="stylesheet" type="text/css">
<link href="hexagon_files/shThemeDefault.css" rel="stylesheet" 
type="text/css">
<script type="text/javascript">
     SyntaxHighlighter.all()
</script>















</body></html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
 <title>Analysis 75: Transformations</title> </head><body 
background="transform_files/bg3.jpg">
<img src="transform_files/cow1.jpg" width="742" height="118">
<center>
<b><font size="7">Transformations</font></b><br>
Russ Cox
</center>

<p>We represent a board as a data structure containing 
the dimension and the contents.  We pass around the
data structure itself, not a reference to it, so that
we can return new boards, and so on.  

</p><p>This makes it easy to define reflect and rotate operations
that return reflected and rotated boards.

</p><p>Once we have these, we just check to see what combination
of transformations makes the old board into the new board.

</p><pre>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;assert.h&gt;

#define MAXN 10

typedef struct Board Board;
struct Board {
    int n;
    char b[MAXN][MAXN];
};

/* rotate 90 degree clockwise: [r, c] -&gt; [c, n+1 - r] */
Board
rotate(Board b)
{
    Board nb;
    int r, c;

    nb = b;
    for(r=0; r&lt;b.n; r++)
    for(c=0; c&lt;b.n; c++)
        nb.b[c][b.n+1 - r] = b.b[r][c];

    return nb;
}

/* reflect board horizontally: [r, c] -&gt; [r, n-1 -c] */
Board
reflect(Board b)
{
    Board nb;
    int r, c;

    nb = b;
    for(r=0; r&lt;b.n; r++)
    for(c=0; c&lt;b.n; c++)
        nb.b[r][b.n-1 - c] = b.b[r][c];

    return nb;
}

/* return non-zero if and only if boards are equal */
int
eqboard(Board b, Board bb)
{
    int r, c;

    if(b.n != bb.n)
        return 0;

    for(r=0; r&lt;b.n; r++)
    for(c=0; c&lt;b.n; c++)
        if(b.b[r][c] != bb.b[r][c])
            return 0;
    return 1;
}

Board
rdboard(FILE *fin, int n)
{
    Board b;
    int r, c;

    b.n = n;
    for(r=0; r&lt;n; r++) {
        for(c=0; c&lt;n; c++)
            b.b[r][c] = getc(fin);
        assert(getc(fin) == '\n');
    }
    return b;
}

void
main(void)
{
    FILE *fin, *fout;
    Board b, nb;
    int n, change;

    fin = fopen("transform.in", "r");
    fout = fopen("transform.out", "w");
    assert(fin != NULL &amp;&amp; fout != NULL);

    fscanf(fin, "%d\n", &amp;n);
    b = rdboard(fin, n);
    nb = rdboard(fin, n);

    if(eqboard(nb, rotate(b)))
        change = 1;
    else if(eqboard(nb, rotate(rotate(b))))
        change = 2;
    else if(eqboard(nb, rotate(rotate(rotate(b)))))
        change = 3;
    else if(eqboard(nb, reflect(b)))
        change = 4;
    else if(eqboard(nb, rotate(reflect(b)))
         || eqboard(nb, rotate(rotate(reflect(b))))
         || eqboard(nb, rotate(rotate(rotate(reflect(b))))))
        change = 5;
    else if(eqboard(nb, b))
        change = 6;
    else
        change = 7;

    fprintf(fout, "%d\n", change);

    exit(0);
}
</pre>

<center>
<a href="http://ace.delos.com/usacogate?a=Ndba0387uwg">USACO Gateway</a>
 | <a href="mailto:kolstad@ace.delos.com">Comment or Question</a>
</center>
</body></html>
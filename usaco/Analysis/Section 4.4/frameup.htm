<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
 <title>Analysis 105: Frame Up</title> </head><body 
background="frameup_files/bg3.jpg">
<img src="frameup_files/cow1.jpg" width="742" height="118">
<center>
<b><font size="7">Frame Up</font></b><br>
Hal Burch
</center>

<p>By examining the minimum and maximum row and column that each
frame type is seen in the picture, the boundary of that frame can
be determined.

</p><p>If, for some location on the boundary of a frame, some other 
frame
is visible, the visible frame must be above the hidden frame.  This
defines a partial ordering on the frames.

</p><p>Given a half-completed ordering, a frame can be in next in the
ordering if there is no frame not yet in the ordering which it
must be above.  To determine all possible orderings, recurse on
making each such frame the next frame in the sequence.

</p><pre>#include &lt;stdio.h&gt;
#include &lt;assert.h&gt;

FILE *fout, *fin;

/* the picture */
char board[30][32];
int h, w; /* height and width of the picture */

/* for each letter, miny, minx, maxy, and maxy of the frame */
int pos[26][4];
int in[26]; /* is this frame in the picture? */
int cnt; /* number of frames in picture */

/* above[a][b] = 1 if frame a is known to be above frame b in the picture */
int above[26][26];

/* a possible ordering */
char answer[27]; /* one extra for the terminating null */

void find_answers(int pos)
 {
  int lv, lv2;

  if (pos == cnt)
   { /* an ordering has been found, output it */
    answer[pos] = '\0';
    fprintf (fout, "%s\n", answer);
    return;
   }

  for (lv = 0; lv &lt; 26; lv++)
    if (in[lv])
     {
      /* determine if there is a frame that hasn't been place in answer
         yet, but must be below this one */
      for (lv2 = 0; lv2 &lt; 26; lv2++)
        if (in[lv2] &amp;&amp; above[lv][lv2]) break;

      if (lv2 &gt;= 26)
       { /* no such frame, so this COULD be the next one */
        answer[pos] = 'A' + lv;
	in[lv] = 0; /* mark as in answer */
	find_answers(pos+1);
	in[lv] = 1; /* clear mark */
       }
     }
 }

int main(int argc, char **argv)
 {
  int lv, lv2;
  int loc;

  if ((fin = fopen("frameup.in", "r")) == NULL)
   {
    perror ("fopen fin");
    exit(1);
   }
  if ((fout = fopen("frameup.out", "w")) == NULL)
   {
    perror ("fopen fout");
    exit(1);
   }

  fscanf (fin, "%d %d", &amp;h, &amp;w);
  for (lv = 0; lv &lt; h; lv++)
    fscanf (fin, "%s", board[lv]);

  for (lv = 0; lv &lt; h; lv++)
    for (lv2 = 0; lv2 &lt; w; lv2++)
     {
      if (board[lv][lv2] != '.')
       {
        loc = board[lv][lv2] - 'A';
	if (!in[loc])
	 { /* first time we've seen this board */
	  in[loc] = 1;
	  cnt++;
	  pos[loc][0] = pos[loc][2] = lv;
	  pos[loc][1] = pos[loc][3] = lv2;
	 } else { /* update the boundary of the frame, if necessary */
	  if (lv &lt; pos[loc][0]) pos[loc][0] = lv;
	  if (lv &gt; pos[loc][2]) pos[loc][2] = lv;
	  if (lv2 &lt; pos[loc][1]) pos[loc][1] = lv2;
	  if (lv2 &gt; pos[loc][3]) pos[loc][3] = lv2;
	 }
       }
     }

  for (lv = 0; lv &lt; 26; lv++)
   if (in[lv])
    { /* for each frame */
     for (lv2 = pos[lv][0]; lv2 &lt;= pos[lv][2]; lv2++)
      { /* check left and right borders */

       /* left */
       loc = board[lv2][pos[lv][1]] - 'A';
       assert(loc &gt;= 0 &amp;&amp; loc &lt; 26); /* there must be SOME frame here */
       if (loc != lv) /* there's a different frame where this one should be */
         above[loc][lv] = 1; /* that different frame must be above this one */

       /* right */
       loc = board[lv2][pos[lv][3]] - 'A';
       assert(loc &gt;= 0 &amp;&amp; loc &lt; 26);
       if (loc != lv) /* same as left */
         above[loc][lv] = 1;
      }
     for (lv2 = pos[lv][1]; lv2 &lt;= pos[lv][3]; lv2++)
      { /* check top and bottom */

       /* top */
       loc = board[pos[lv][0]][lv2] - 'A';
       assert(loc &gt;= 0 &amp;&amp; loc &lt; 26);
       if (loc != lv)
         above[loc][lv] = 1;

       /* bottom */
       loc = board[pos[lv][2]][lv2] - 'A';
       if (loc &lt; 0 || loc &gt;= 26) 
         fprintf (stderr, "%i %i (%c)\n", lv2, pos[lv][2], lv + 'A');
       assert(loc &gt;= 0 &amp;&amp; loc &lt; 26);
       if (loc != lv)
         above[loc][lv] = 1;
      }
    }

  /* graph is set up, now just find all answers */
  find_answers(0);
  return 0;
 }
</pre>
<center>
<a href="http://ace.delos.com/usacogate?a=Zeq1JEUeQxb">USACO Gateway</a>
 | <a href="mailto:kolstad@ace.delos.com">Comment or Question</a>
</center>
</body></html>
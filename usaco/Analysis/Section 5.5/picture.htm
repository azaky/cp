
<!-- saved from url=(0055)http://ace.delos.com/usacoanal2?a=ouEuSk2OTj1&S=picture -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"> <title>Analysis 61: Picture</title> </head>
<body background="./picture_files/bg3.jpg">
<img src="./picture_files/cow1.jpg" width="742" height="118">
<center>
<b><font size="7">Picture</font></b><br>
Alessandro Piva from Italy
<!--alex.ander att infinito.it-->
</center>

<p>The total length of the free borders is the sum of the lengths of
the vertical free borders and the lengths of the horizontal ones.
So we can split the borders in two sets: the vertical ones and the
horizontal ones, and then examine them independently.

</p><p>Let's take a set of borders, for example the horizontal ones. For
every picture, we have got 2 horizontal borders: the starting one
(the border with the minimal y coordinate) and the ending one (the
other border).  So, if we have N pictures, we have 2N horizontal
borders (and 2N vertical ones, of course).

</p><p>Imagine an observer walks from the bottom to the top of the wall,
meeting all the horizontal borders sorted by y coordinate, one by
one. Every time we encounter a border, we can compute the lenght
of the free borders on that row (that is, the line with the y
coordinate of that border).

</p><p>How?  We maintain two integer arrays of length 20001 (i.e., for all
the x coordinates in the range -10000..10000). The first array
contains, for every x, the number of pictures stacked on the point
with that x coordinate and the y coordinate equal to the y coordinate
of the border we're examining. For example, if we're examining the
border with y=10, the first array contains the number of pictures
stacked on points with coordinates (y,x) equal to (10,-10000), (10,
-9999), ... (10, 10000).  The second array contains the same
information for the point under the border we examine (following
the same example, the second array contains the number of pictures
stacked on point with coordinates (9,-10000)..(9,10000).

</p><p>For every border we meet, we copy the content of the first array
to the second and change the values of the first array according
to the range of the border and its type (if it is a starting border
we add 1 to stack, otherwise -1). Then, for every x we examine the
values of the two arrays: if one is 0 and the other is more than
0, we have found a piece of free border and then we can add 1 to
the total free perimeter.

</p><p>Iterate for every horizontal border, and then restart with the
vertical borders.

</p><pre>
#include    &lt;stdio.h&gt;
#include    &lt;stdlib.h&gt;
#include    &lt;memory.h&gt;

#define START   (1)
#define FINISH  (-1)

typedef struct
{
    int x1, x2;
    int y;
    int flag;
}   LINE;

int P;
LINE    vertical[10000];
LINE    horizontal[10000];

int L;

void Read(void) {
    FILE    *in;
    int p;
    int x1, x2, y1, y2;

    in = fopen("picture.in", "r");
    fscanf(in, "%d ", &amp;P);
    for (p=0; p&lt;P; p++) {
        fscanf(in, "%d %d %d %d ", &amp;x1, &amp;y1, &amp;x2, &amp;y2);
        
        horizontal[p*2].y = y1;
        horizontal[p*2].x1 = x1;
        horizontal[p*2].x2 = x2;
        horizontal[p*2].flag = START;
        
        horizontal[p*2 + 1].y = y2;
        horizontal[p*2 + 1].x1 = x1;
        horizontal[p*2 + 1].x2 = x2;
        horizontal[p*2 + 1].flag = FINISH;
        
        vertical[p*2].y = x1;
        vertical[p*2].x1 = y1;
        vertical[p*2].x2 = y2;
        vertical[p*2].flag = START;
        
        vertical[p*2 + 1].y = x2;
        vertical[p*2 + 1].x1 = y1;
        vertical[p*2 + 1].x2 = y2;
        vertical[p*2 + 1].flag = FINISH;
    }

    P *= 2;
    fclose(in);
}

int compare(const void *a, const void *b) {
    LINE    la;
    LINE    lb;
    la = *((LINE *)a);
    lb = *((LINE *)b);
    return la.y - lb.y;
}

int Perimeter(LINE *line) {
    int grid[2][20001];
    int l, x, y, g;
    int p = 0;
        
    memset(grid, 0, sizeof(int) * 2 *  20001);
    
    l = 0;
    while (l&lt;P) {
        y = line[l].y;
        memcpy(grid[0], grid[1], sizeof(int) * 20001);
        
        while (line[l].y == y) {
            for (x=line[l].x1 + 10000; x &lt; line[l].x2+10000; x++)
                grid[1][x] += line[l].flag;
            l++;
            if (l==P)   break;
        }
                    
        for (x=0; x&lt;=20000; x++) {
            if ((grid[0][x]==0) &amp;&amp; (grid[1][x]&gt;0))  p++;
            if ((grid[1][x]==0) &amp;&amp; (grid[0][x]&gt;0))  p++;
        }
    }
    return p;
}

void Compute(void) {
    qsort(horizontal, P, sizeof(LINE), compare);
    qsort(vertical, P, sizeof(LINE), compare);
    L = Perimeter(horizontal) + Perimeter(vertical);
}

void Write(void) {
    FILE    *out;
    out = fopen("picture.out", "w");
    fprintf(out, "%d\n", L);
    fclose(out);
}

int main(void) {
    Read();
    Compute();
    Write();
    return 0;
}
</pre>
<center>
<a href="http://ace.delos.com/usacogate?a=ouEuSk2OTj1">USACO Gateway</a> | <a href="mailto:kolstad@ace.delos.com">Comment or Question</a>
</center>

</body></html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
 <title>Analysis 21: Spinning Wheels</title> </head><body 
background="spin_files/bg3.jpg">
<img src="spin_files/cow1.jpg" width="742" height="118">
<center>
<b><font size="7">Spinning Wheels</font></b><br>
Hal Burch
</center>

<p>The key observation for this problem is that after 360 seconds, the
wheels have returned to their original locations, so if the wheels
don't line up in 360 seconds, they will never line up.

</p><p>To determine if there is a location through which a light can
be shine, mark, for each wheel, which angles between 0 and 359 a
light can be shone through.  If any location gets marked for all
the wheels, then a light can be shone through the entire system.
Otherwise, no light can be shone through all the wheels.

</p><pre>#include &lt;stdio.h&gt;
#include &lt;assert.h&gt;
#include &lt;string.h&gt;

int speed[5];      /* speed of each wheel */
int wedgest[5][5]; /* start of each wedge (-1 == no wedge) */
int wedglen[5][5]; /* length of each wedge */

int pos[5];        /* angular position of each wheel */
int t;             /* time (in seconds) since start */

/* (light[deg] &gt;&gt; wid) &amp; 0x1 is true if and only if there
   is a wedge in wheel wid that a light can shine through at
   angle deg */
int light[360];    
 
/* mark all the degrees we can see through wheel w */
void mark_light(int w)
 {
  int lv, lv2; /* loop variables */
  int wpos; /* wedge position */

  for (lv = 0; lv &lt; 5; lv++)
   {
    if (wedglen[w][lv] &lt; 0) /* no more wedges for this wheel */
      break;

    /* start of wedge */
    wpos = (pos[w] + wedgest[w][lv]) % 360;

    for (lv2 = 0; lv2 &lt;= wedglen[w][lv]; lv2++)
     { /* throughout extent of wedge */
      light[wpos] |= (1 &lt;&lt; w); /* mark as hole in wheel */
      wpos = (wpos + 1) % 360; /* go to the next degree */
     }
   }
 }

int main(int argc, char **argv)
 {
  FILE *fp;
  FILE *fout;
  int w, f;
  int lv, lv2;

  fp = fopen("spin.in", "r");
  fout = fopen("spin.out", "w");
  assert(fp);
  assert(fout);
  
  /* read in the data */
  for (lv = 0; lv &lt; 5; lv++)
   {
    fscanf (fp, "%d %d", &amp;speed[lv], &amp;w);
    for (lv2 = 0; lv2 &lt; w; lv2++)
      fscanf (fp, "%d %d", &amp;wedgest[lv][lv2], &amp;wedglen[lv][lv2]);

    /* mark the rest of the wedges as not existing for this wheel */
    for (; lv2 &lt; 5; lv2++)
      wedglen[lv][lv2] = -1;
   }

  f = 0;
  while (t &lt; 360) /* for each time step */
   {
    memset(light, 0, sizeof(light));

    /* mark the degrees we can see through each wheel */
    for (lv = 0; lv &lt; 5; lv++)
      mark_light(lv);

    for (lv = 0; lv &lt; 360; lv++)
      if (light[lv] == 31) /* we can shine a light through all five wheels */
        f = 1;

    if (f) break; /* we found a match! */

    /* make a time step */
    t++;
    for (lv = 0; lv &lt; 5; lv++)
      pos[lv] = (pos[lv] + speed[lv]) % 360;
   }

  /* after 360 time steps, all the wheels have returned to their
     original location */
  if (t &gt;= 360) fprintf (fout, "none\n");
  else fprintf (fout, "%i\n", t);

  return 0;
 }
</pre>
<center>
<a href="http://ace.delos.com/usacogate?a=Ndba0387uwg">USACO Gateway</a>
 | <a href="mailto:kolstad@ace.delos.com">Comment or Question</a>
</center>
</body></html>
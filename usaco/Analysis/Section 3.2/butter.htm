<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
 <title>Sweet Butter</title> </head><body 
background="butter_files/bg3.jpg">
<center><img src="butter_files/cow1.jpg" width="742" height="118"></center>

<center>
<b><font size="7">Sweet Butter</font></b><br>
Alex Schwendner
</center>
We approach this problem directly, by calculating the distance from
each cow to each pasture. Once this is done, we will simply have
to sum the distances for each cow to get the total cost of putting
the sugar cube at a given pasture. The key to a fast distance
calculation is that our graph is quite sparse. Thus, we use Dijkstra
with a heap to calculate the distance from a given cow to all
pastures. This requires on the order of N*C*log(P), or about
7,000,000, operations.

<pre>#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

const int BIG = 1000000000;

const int MAXV = 800;
const int MAXC = 500;
const int MAXE = 1450;


int cows;
int v,e;


int cow_pos[MAXC];
int degree[MAXV];
int con[MAXV][MAXV];
int cost[MAXV][MAXV];

int dist[MAXC][MAXV];


int heapsize;
int heap_id[MAXV];
int heap_val[MAXV];
int heap_lookup[MAXV];


bool validheap(void){
  for(int i = 0; i &lt; heapsize; ++i){
    if(!(0 &lt;= heap_id[i] &amp;&amp; heap_id[i] &lt; v)){
      return(false);
    }
    if(heap_lookup[heap_id[i]] != i){
      return(false);
    }
  }
  return(true);
}


void heap_swap(int i, int j){
  int s;

  s = heap_val[i];
  heap_val[i] = heap_val[j];
  heap_val[j] = s;

  heap_lookup[heap_id[i]] = j;

  heap_lookup[heap_id[j]] = i;

  s = heap_id[i];
  heap_id[i] = heap_id[j];
  heap_id[j] = s;

}


void heap_up(int i){
  if(i &gt; 0 &amp;&amp; heap_val[(i-1) / 2] &gt; heap_val[i]){
    heap_swap(i, (i-1)/2);
    heap_up((i-1)/2);
  }
}


void heap_down(int i){
  int a = 2*i+1;
  int b = 2*i+2;

  if(b &lt; heapsize){
    if(heap_val[b] &lt; heap_val[a] &amp;&amp; heap_val[b] &lt; heap_val[i]){
      heap_swap(i, b);
      heap_down(b);
      return;
    }
  }
  if(a &lt; heapsize &amp;&amp; heap_val[a] &lt; heap_val[i]){
    heap_swap(i, a);
    heap_down(a);
  }
}




int main(){


  FILE *filein = fopen("butter.in", "r");
  fscanf(filein, "%d %d %d", &amp;cows, &amp;v, &amp;e);
  for(int i = 0; i &lt; cows; ++i){
    fscanf(filein, "%d", &amp;cow_pos[i]);
    --cow_pos[i];
  }
  for(int i = 0; i &lt; v; ++i){
    degree[i] = 0;
  }
  for(int i = 0; i &lt; e; ++i){
    int a,b,c;
    fscanf(filein, "%d %d %d", &amp;a, &amp;b, &amp;c);
    --a;
    --b;

    con[a][degree[a]] = b;
    cost[a][degree[a]] = c;
    ++degree[a];

    con[b][degree[b]] = a;
    cost[b][degree[b]] = c;
    ++degree[b];

  }
  fclose(filein);


  for(int i = 0; i &lt; cows; ++i){
    heapsize = v;
    for(int j = 0; j &lt; v; ++j){
      heap_id[j] = j;
      heap_val[j] = BIG;
      heap_lookup[j] = j;
    }
    heap_val[cow_pos[i]] = 0;
    heap_up(cow_pos[i]);

    bool fixed[MAXV];
    memset(fixed, false, v);
    for(int j = 0; j &lt; v; ++j){
      int p = heap_id[0];
      dist[i][p] = heap_val[0];
      fixed[p] = true;
      heap_swap(0, heapsize-1);
      --heapsize;
      heap_down(0);

      for(int k = 0; k &lt; degree[p]; ++k){
	int q = con[p][k];
	if(!fixed[q]){
	  if(heap_val[heap_lookup[q]] &gt; dist[i][p] + cost[p][k]){
	    heap_val[heap_lookup[q]] = dist[i][p] + cost[p][k];
	    heap_up(heap_lookup[q]);
	  }
	}
      }

    }
  }

  int best = BIG;
  for(int i = 0; i &lt; v; ++i){
    int total = 0;
    for(int j = 0; j &lt; cows; ++j){
      total += dist[j][i];
    }
    best &lt;?= total;
  }


  FILE *fileout = fopen("butter.out", "w");
  fprintf(fileout, "%d\n", best);
  fclose(fileout);


  return(0);
}
</pre>


<center>
<a href="http://ace.delos.com/usacogate?a=Ndba0387uwg">USACO Gateway</a>
 | <a href="mailto:kolstad.delos.com">Comment or Question</a>
</center>
</body></html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">

<title>Analysis: Arithmetic Progressions</title>
</head><body background="ariprog_files/bg3.jpg">
<img src="ariprog_files/cow1.jpg" width="742" height="118">

<center>
<h1>Analysis: Arithmetic Progressions</h1>
</center>
<p>This can be done by brute force, enumerating over all possible
sequences.  It has to be done a little carefully in order to get it to
run in time, however.

</p><p>Precalculate the bisquares, first of all.  Calculate both a 
sorted
list of the bisquares, along with a boolean array saying whether each
number between 1 and 125000 (the maximum bisquare possible, for p,q &lt;
250) is a bisquare.

</p><p>Go through the skips in increasing order, starting at 1, and
continuing along as the sequence starting at 1 with that skip doesn't
exceed the maximum bisquare.  For each bisquare, determine if the
sequence starting at that location and with the current skip value
consists of all of bisquares.  If so, output it.

</p><p>Here is the solution of Felix Arends from Germany (modified by
Iran's Saber Fadaee):

</p><pre>#include &lt;stdio.h&gt;
#include &lt;assert.h&gt;
#include &lt;string&gt;

using namespace std;

// open files
FILE *fin = fopen ("ariprog.in", "r");
FILE *fout = fopen ("ariprog.out", "w");

// global variables
unsigned int N, M, maxMM;
unsigned int numbers [65000];
unsigned int number_size = 0;
unsigned char num_available [125001];
unsigned char dist_available [125001];
int have_res = 0;
int skipstep = 1;

// read the input

int read_input () {
    fscanf (fin, "%d %d", &amp;N, &amp;M);
    return 0;
}

int cmp_int (const void *a, const void *b) {
    return (*(int *)a - *(int *)b);
}

void asm_num (int a, int b) {
    for (unsigned int n = 1; n &lt; N; n++)
        if (num_available [a + n * b] == 0) return;

    fprintf (fout, "%d %d\n", a, b);
    have_res ++;
    if (have_res==1)
        skipstep = b;

}

void asm_num () {
    for (unsigned int b = 1; b &lt; maxMM; b+=skipstep) {
        if (dist_available [b]) {
            for (unsigned int p = 0; p &lt; number_size &amp;&amp; numbers [p] + (N -
1) * b &lt;= maxMM; p++)
                asm_num (numbers [p], b);
        }
    }
}

int process () {
    memset (num_available, 0, sizeof (unsigned char) * 125001);
    memset (dist_available, 0, sizeof (unsigned char) * 125001);

    for (unsigned int m1 = 0; m1 &lt;= M; m1++) {
        for (unsigned int m2 = m1; m2 &lt;= M; m2++) {
            int n = m1 * m1 + m2 * m2;

            if (!num_available [n]) {
                num_available [n] = 1;
                numbers [number_size++] = n;
            }
        }
    }

    qsort (numbers, number_size, sizeof (unsigned int), cmp_int);

    maxMM = M * M + M * M;
    for (unsigned int n1 = 0; n1 &lt; number_size; n1++) {
        unsigned int _n1 = numbers [n1];
        for (unsigned int n2 = n1 + 1; n2 &lt; number_size &amp;&amp; _n1 + (numbers
[n2] - _n1) * (N - 1) &lt;= maxMM; n2++) {
            assert (numbers [n2] - _n1 &gt;= 0 &amp;&amp; numbers [n2] - _n1 &lt; 125001);
            if (num_available [_n1 + (numbers [n2] - _n1) * (N - 1)] &amp;&amp;
                num_available [_n1 + (numbers [n2] - _n1) * (N - 2)])
                dist_available [numbers [n2] - _n1] = true;
        }
    }

    asm_num ();

    if (!have_res) fprintf (fout, "NONE\n");

    return 0;
}

int main () {
    read_input ();
    process ();
    fclose (fin);
    fclose (fout);
    return 0;
}
</pre>
<p>Here is an even faster solution of "UaE ProGrammeR":
</p><pre>#include &lt;fstream&gt;
#include &lt;iostream&gt;

using namespace std;
void quicksort (int[], int ,int);
int pivotlist (int[], int,int);

ofstream out ("ariprog.out");  

int n;
int main () {
    ifstream in ("ariprog.in");       
                            
    bool array[125001] = {false}, noneF;
    int m, upper, upperdef, def, p; 
    int places[300000], pl = 0;
    noneF = true;
    
    in&gt;&gt;n&gt;&gt;m;
    
    for (int i = 0; i &lt;= m; i++)
        for (int j = 0; j &lt;= m; j++) {
            if (!array[i*i+j*j]) {
                places[pl] = i*i+j*j;   //Saving generated numbers
                pl++;
            }
            array[i*i+j*j] = true;
        }
    
    upper = 2*m*m;
    upperdef = upper/(n-1);
    
    quicksort (places, 0, pl-1);
    
    for ( def = 1; def&lt;=upperdef; def++) // Loop to check for solutions
                                       // It looks for solutions in
                                       // correct order so you 
                                       // print the solution directly
                                       // without sorting first, thnx to who said:
                                       // Trade Memory for Speed !!
    {
        for ( p = 0; places[p]&lt;=(upper-((n-2)*def)); p++) {
            bool is;
            is = true;
            int where;

            for (int c = (n-1); c&gt;=0 ; c--)
                    if (!array[places[p]+c*def]) {
                        is = false;
                        where = (p+c*def);
                        break;
                    }
    
            if (is) {
                noneF = false;
                out&lt;&lt;places[p]&lt;&lt;" "&lt;&lt;def&lt;&lt;endl;
            }
        }
    }
    
    if (noneF)
        out&lt;&lt;"NONE"&lt;&lt;endl;
    
    return 0;
}

void quicksort (int array[], int start, int last) {
    int pivot;
    if (start &lt; last) {
        pivot = pivotlist(array, start,last);
        quicksort (array, start,pivot-1);
        quicksort (array, pivot+1,last);
    }
}

int pivotlist(int array[], int f, int l) {
    int pivotpoint;
    int pivotvalue, temp;
    
    pivotvalue = array[f];
    pivotpoint = f;
    
    for (int i = f+1;i&lt;=l; i++) {
       	if (array[i]&lt;pivotvalue) {	
      	    pivotpoint++;
            temp = array[i];
            array[i] = array[pivotpoint];
            array[pivotpoint] = temp;
   	 }
   }
   temp = array[f];
   array[f] = array[pivotpoint];
   array[pivotpoint] = temp;
   
   return pivotpoint;
}
</pre>
<br><br>
<center>
<a href="http://ace.delos.com/usacogate?a=Ndba0387uwg"> USACO Gateway </a>
  &nbsp;| &nbsp;
<a href="mailto:kolstad@ace.delos.com">Comment or Question </a>
</center>

</body></html>
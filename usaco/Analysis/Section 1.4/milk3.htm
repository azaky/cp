<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
 <title>Analysis 4: Mother's Milk</title> </head><body 
background="milk3_files/bg3.jpg">
<img src="milk3_files/cow1.jpg" width="742" height="118">
<center>
<b><font size="7">Mother's Milk</font></b><br>
Russ Cox
</center>

We use a simple depth-first search to find all the possible 
states for the three buckets, pruning the search by not researching
from states we've seen before.

<pre>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;assert.h&gt;
#include &lt;ctype.h&gt;

#define MAX 20

typedef struct State	State;
struct State {
    int a[3];
};

int seen[MAX+1][MAX+1][MAX+1];
int canget[MAX+1];

State
state(int a, int b, int c)
{
    State s;

    s.a[0] = a;
    s.a[1] = b;
    s.a[2] = c;
    return s;
}

int cap[3];

/* pour from bucket "from" to bucket "to" */
State
pour(State s, int from, int to)
{
    int amt;

    amt = s.a[from];
    if(s.a[to]+amt &gt; cap[to])
	amt = cap[to] - s.a[to];

    s.a[from] -= amt;
    s.a[to] += amt;
    return s;
}

void
search(State s)
{
    int i, j;

    if(seen[s.a[0]][s.a[1]][s.a[2]])
	return;

    seen[s.a[0]][s.a[1]][s.a[2]] = 1;

    if(s.a[0] == 0)	/* bucket A empty */
	canget[s.a[2]] = 1;

    for(i=0; i&lt;3; i++)
    for(j=0; j&lt;3; j++)
	search(pour(s, i, j));	
}

void
main(void)
{
    int i;
    FILE *fin, *fout;
    char *sep;

    fin = fopen("milk3.in", "r");
    fout = fopen("milk3.out", "w");
    assert(fin != NULL &amp;&amp; fout != NULL);

    fscanf(fin, "%d %d %d", &amp;cap[0], &amp;cap[1], &amp;cap[2]);

    search(state(0, 0, cap[2]));

    sep = "";
    for(i=0; i&lt;=cap[2]; i++) {
	if(canget[i]) {
	    fprintf(fout, "%s%d", sep, i);
	    sep = " ";
	}
    }
    fprintf(fout, "\n");

    exit(0);
}
</pre>

<p>Ran Pang from Canada sends this non-recursive DP solution:
</p><pre>#include&lt;stdio.h&gt;

int m[21][21][21];
int poss[21];
int A, B, C;

int main(void) {
    int i,j,k;
    int flag;
    FILE* in=fopen("milk3.in","r");
    fscanf(in, "%d %d %d",&amp;A, &amp;B, &amp;C);
    fclose(in);
    for(i=0;i&lt;21;i++)
        for(j=0;j&lt;21;j++)
            for(k=0;k&lt;21;k++)
                m[i][j][k]=0;
    for(i=0;i&lt;21;i++)
        poss[i]=0;
    m[0][0][C]=1;

    for(flag=1;flag;) {
        flag=0;
        for(i=0;i&lt;=A;i++)
            for(j=0;j&lt;=B;j++)
                for(k=0;k&lt;=C;k++) {
                    if(m[i][j][k]) {
                	if(i==0) poss[k]=1;
		        if(i) {
	                    if(j&lt;B) {
                                if(B-j&gt;=i) {
                            	    if( m[0][j+i][k]==0) {
                                        m[0][j+i][k]=1;
                                	flag=1;
                            	    }
                                } else {
                            	    if( m[i-(B-j)][B][k] == 0) {
                                        m[i-(B-j)][B][k] =1;
                                        flag=1;
                                    }
                                }
                            }
                            if(k&lt;C) {
                                if(C-k&gt;=i) {
                                    if( m[0][j][k+i]==0) {
                                        m[0][j][k+i]=1;
                                        flag=1;
                                    }
                                }
                                else {
                                    if( m[i-(C-k)][j][C] == 0) {
                                        m[i-(C-k)][j][C] =1;
                                        flag=1;
                                    }
                                }
                            }
                        }
                        if(j) {
                            if(i&lt;A) {
                                if(A-i&gt;=j) {
                                    if( m[i+j][0][k]==0) {
                                        m[i+j][0][k]=1;
                                        flag=1;
                                    }
                                } else {
                                    if( m[A][j-(A-i)][k] == 0) {
                                        m[A][j-(A-i)][k] =1;
                                        flag=1;
                                    }
                                }
                            }
                            if(k&lt;C) {
                                if(C-k&gt;=j) {
                                    if( m[i][0][k+j]==0) {
                                        m[i][0][k+j]=1;
                                        flag=1;
                                    }
                                } else {
                                    if( m[i][j-(C-k)][C] == 0) {
                                        m[i][j-(C-k)][C] =1;
                                        flag=1;
                                    }
                                }
                            }
                        }
                        if(k) {
                            if(i&lt;A) {
                                if(A-i&gt;=k) {
                                    if( m[i+k][j][0]==0) {
                                        m[i+k][j][0]=1;
                                        flag=1;
                                    }
                                } else {
                                    if( m[A][j][k-(A-i)] == 0) {
                                        m[A][j][k-(A-i)] =1;
                                        flag=1;
                                    }
                                }
                            }
                            if(j&lt;B) {
                                if(B-j&gt;=k) {
                                    if( m[i][j+k][0]==0) {
                                        m[i][j+k][0]=1;
                                        flag=1;
                                    }
                                } else {
                                    if( m[i][B][k-(B-j)] == 0) {
                                        m[i][B][k-(B-j)] =1;
                                        flag=1;
                                    }
                                }
                            }
                        }
            }                   
        }
    }
    {
        FILE* out=fopen("milk3.out", "w");
        for(i=0;i&lt;21;i++) {
            if(poss[i]) {
                fprintf(out,"%d",i);
                i++;
                break;
            }
        }
        for(;i&lt;21;i++) {
            if(poss[i]) {
                fprintf(out, " %d", i);
            }
        }
        fprintf(out,"\n");
    }
    return 0;
}
</pre>


<p>Daniel Jasper from Germany writes:

</p><p>Both other solutions (recursive and non-recursive) use a 3D-array
 to
store the states, so that the memory usage is O(N<sup>3</sup>). However
a 2D Array and O(N<sup>2</sup>) would be enough since a state is
uniquely defined by the amount of milk in bucket B and C. The amount of
milk in bucket A is size-of-C minus amount-in-C minus amount-in-B.  This
solution works with it, and is a little bit shorter (though not more
elegant):

</p><pre>#include &lt;stdio.h&gt;
int A, B, C;
int CB[21][21]; // All states

void readFile() {
    FILE *f;
    f = fopen("milk3.in", "r");
    fscanf(f, "%d%d%d", &amp;A, &amp;B, &amp;C);
    fclose(f);
}

void writeFile() {
    FILE *f; int i;
    f = fopen("milk3.out", "w");
    for(i = 0; i &lt;= C; i++) {
        if(CB[i][C - i] == 1) {
            if((i != C-B) &amp;&amp; (i != 0)) fprintf(f, " ");
            fprintf(f, "%d", i);
        }
    }
    fprintf(f, "\n");
    fclose(f);
}

// do brute-force search, c/b: current state
void search(int c, int b) {
    int a;
    if(CB[c][b] == 1) return; // already searched
    CB[c][b] = 1;
    a = C-b-c; // calc amount in A
    // do all moves:
    // c-&gt;b
    if(B &lt; c+b) search(c - (B - b), B);
    else search(0, c + b);
    // b-&gt;c
    if(C &lt; c+b) search(C, b - (C - c));
    else search(c + b, 0);
    // c-&gt;a
    if(A &lt; c+a) search(c - (A - a), b);
    else search(0, b);
    // a-&gt;c
    if(C &lt; c+a) search(C, b);
    else search(c + a, b);
    // b-&gt;a
    if(A &lt; b+a) search(c, b - (A - a));
    else search(c, 0);
    // a-&gt;b
    if(B &lt; b+a) search(c, B);
    else search(c, b + a);
   }
   
int main () {
    readFile();
    search(C, 0);
    writeFile();
    return 0;
}
</pre>

<center>
<a href="http://ace.delos.com/usacogate?a=Ndba0387uwg">USACO Gateway</a>
 | <a href="mailto:kolstad@ace.delos.com">Comment or Question</a>
</center>
</body></html>
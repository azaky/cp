<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
 <title>Analysis 34: Bessie Come Home</title> </head><body background="comehome_files/bg3.jpg">
<img src="comehome_files/cow1.jpg" width="742" height="118">
<center>
<b><font size="7">Bessie Come Home</font></b><br>
Russ Cox
</center>

<p>We use the Floyd-Warshall all pairs shortest path algorithm
to calculate the minimum distance between the barn and all
other points in the pasture.  Then we scan through all the
cow-containing pastures looking for the minimum distance.

</p><pre>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;assert.h&gt;
#include &lt;ctype.h&gt;

#define INF 60000	/* bigger than longest possible path */

int dist[52][52];

int
char2num(char c)
{
    assert(isalpha(c));

    if(isupper(c))
	return c-'A';
    else
	return c-'a'+26;
}

void
main(void)
{
    FILE *fin, *fout;
    int i, j, k, npath, d;
    char a, b;
    int m;

    fin = fopen("comehome.in", "r");
    fout = fopen("comehome.out", "w");
    assert(fin != NULL &amp;&amp; fout != NULL);

    for(i=0; i&lt;52; i++)
    for(j=0; j&lt;52; j++)
	dist[i][j] = INF;

    for(i=0; i&lt;26; i++)
	dist[i][i] = 0;

    fscanf(fin, "%d\n", &amp;npath);
    for(i=0; i&lt;npath; i++) {
	fscanf(fin, "%c %c %d\n", &amp;a, &amp;b, &amp;d);
	a = char2num(a);
	b = char2num(b);
	if(dist[a][b] &gt; d)
	    dist[a][b] = dist[b][a] = d;
    }

    /* floyd warshall all pair shortest path */
    for(k=0; k&lt;52; k++)
    for(i=0; i&lt;52; i++)
    for(j=0; j&lt;52; j++)
	if(dist[i][k]+dist[k][j] &lt; dist[i][j])
	    dist[i][j] = dist[i][k]+dist[k][j];

    /* find closest cow */
    m = INF;
    a = '#';
    for(i='A'; i&lt;='Y'; i++) {
	d = dist[char2num(i)][char2num('Z')];
	if(d &lt; m) {
	    m = d;
	    a = i;
	}
    }

    fprintf(fout, "%c %d\n", a, m);
    exit(0);
}
</pre>



<h2> Analysis of and code for Bessie Come Home by Wouter Waalewijn of
The Netherlands </h2>

<p>When looking at the problem the first thing you can conclude is that
for the solution you will need to know all the distances from the
pastures to the barn. After calculating them you only have to check all
these distances and pick out the nearest pasture with a cow in it, and
that's all.

</p><p>Because the amount of vertices (=pastures+barn) is small, running
Floyd/Warshall algorithm will solve the problem easily in time. If you
think programming Floyd/Warshall is easier than Dijkstra, just do it.
But you can also solve the problem running Dijkstra once, which of
course speeds up your program quite a bit. Just initialise the barn as
starting point, and the algorithm will find the distances from the barn
to all the pastures which is the same as the distances from all the
pastures to the barn because the graph is undirected. Using dijkstra for
the solution would make far more complex data solvable within time. Here
below you can see my implementation of this solution in Pascal. It might
look big, but this way of partitioning your program keeps it easy to
debug.

</p><pre>Var Dist:Array [1..58] of LongInt;      {Array with distances to barn}
    Vis :Array [1..58] of Boolean;      {Array keeping track which
pastures visited}
    Conn:Array [1..58,1..58] of Word;   {Matrix with length of edges, 0 = no edge}

Procedure Load;
Var TF   :Text;
    X,D,E:Word;
    P1,P2:Char;

Begin
 Assign(TF,'comehome.in');
 Reset(TF);
 Readln(TF,E);                          {Read number of edges}
 For X:=1 to E do
 Begin
  Read(TF,P1);                          {Read both pastures and edge
length}
  Read(TF,P2);
  Read(TF,P2);      {Add edge in matrix if no edge between P1 and P2 yet or}
  Readln(TF,D);     {this edge is shorter than the shortest till now}
  If (Conn[Ord(P1)-Ord('A')+1,Ord(P2)-Ord('A')+1]=0) or
     (Conn[Ord(P1)-Ord('A')+1,Ord(P2)-Ord('A')+1]&gt;D) then
  Begin
   Conn[Ord(P1)-Ord('A')+1,Ord(P2)-Ord('A')+1]:=D;
   Conn[Ord(P2)-Ord('A')+1,Ord(P1)-Ord('A')+1]:=D;
  End;
 End;
 Close(TF);
 For X:=1 to 58 do
  Dist[X]:=2147483647;                  {Set all distances to infinity}
 Dist[Ord('Z')-Ord('A')+1]:=0;          {Set distance from barn to barn to 0}
End;

Procedure Solve;
Var X,P,D:LongInt;                      {P = pasture and D = distance}

Begin
 Repeat
  P:=0;
  D:=2147483647;
  For X:=1 to 58 do                     {Find nearest pasture not
visited yet}
   If Not Vis[X] and (Dist[X]&lt;D) then
   Begin
    P:=X;
    D:=Dist[X];
   End;
  If (P&lt;&gt;0) then
  Begin
   Vis[P]:=True;                        {If there is one mark it
visited}
   For X:=1 to 58 do                    {And update all distances}
    If (Conn[P,X]&lt;&gt;0) and (Dist[X]&gt;Dist[P]+Conn[P,X]) then
     Dist[X]:=Dist[P]+Conn[P,X];
  End;
 Until (P=0);                {Until no reachable and unvisited pastures
left}
End;

Procedure Save;
Var TF  :Text;
    X,BD:LongInt;                       {BD = best distance}
    BP  :Char;                          {BP = best pasture}

Begin
 BD:=2147483647;
 For X:=1 to 25 do                      {Find neares pasture}
  If (Dist[X]&lt;BD) then
  Begin
   BD:=Dist[X];
   BP:=Chr(Ord('A')+X-1);
  End;
 Assign(TF,'comehome.out');
 Rewrite(TF);
 Writeln(TF,BP,' ',BD);                 {Write outcome to disk}
 Close(TF);
End;

Begin
 Load;
 Solve;
 Save;
End.
</pre>


<center>
<a href="http://ace.delos.com/usacogate?a=IbZM9hoLG9M">USACO Gateway</a> | <a href="mailto:kolstad@ace.delos.com">Comment or Question</a>
</center>
</body></html>
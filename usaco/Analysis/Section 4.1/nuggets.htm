<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
 <title>Analysis 106: Beef McNuggets</title> </head><body 
background="nuggets_files/bg3.jpg">
<img src="nuggets_files/cow1.jpg" width="742" height="118">
<center>
<b><font size="7">Beef McNuggets</font></b><br>
Hal Burch
</center>

<p>This problem is fairly straight-forward dynamic programming.  We know
that a value X is possible if and only if X - v<sub>i</sub> is possible,
where v<sub>i</sub> is the number of nuggets in one of the package
types.

</p><p>The only way for there to be no bound to the largest number which
 is
unobtainable is if the greatest common divisor of the package sizes is
greater than 1, so first check for that.

</p><p>Otherwise, go through the sizes in increasing order.  For each
impossible value, update the largest number found thus far.  Otherwise,
if X is possible, mark X + v<sub>i</sub> for each i as being possible.
Whenever the last 256 of the sizes have all been possible, you know that
all the sizes from here on out are also possible (you actually only need
the last min {v<sub>i</sub>} to be possible, but doing the extra 256
steps takes almost no time).

</p><pre>#include &lt;stdio.h&gt;

/* the number and value of the package sizes */
int nsize;
int sizes[10];

/* cando specifies whether a given number is possible or not */
/* since max size = 256, we'll never need to mark more than 256
   in the future, so we use a sliding window */
int cando[256];

int gcd(int a, int b)
 { /* uses standard gcd algorithm to computer greatest common divisor */
  int t;

  while (b != 0)
   {
    t = a % b;
    a = b;
    b = t;
   }
  return a;
 }

int main(int argc, char **argv)
 {
  FILE *fout, *fin;
  int lv, lv2; /* loop variable */
  int pos;     /* count position */
  int last;    /* last impossible count */

  if ((fin = fopen("nuggets.in", "r")) == NULL)
   {
    perror ("fopen fin");
    exit(1);
   }
  if ((fout = fopen("nuggets.out", "w")) == NULL)
   {
    perror ("fopen fout");
    exit(1);
   }

  /* read in data */
  fscanf (fin, "%d", &amp;nsize);
  for (lv = 0; lv &lt; nsize; lv++) fscanf (fin, "%d", &amp;sizes[lv]);

  /* ensure gcd = 1 */
  lv2 = sizes[0];
  for (lv = 1; lv &lt; nsize; lv++)
    lv2 = gcd(sizes[lv], lv2);
  if (lv2 != 1)
   { /* gcd != 1, no bound on size that cannot be purchased */
    fprintf (fout, "0\n");
    return 0;
   }

  /* we can do 0 */
  cando[0] = 1;

  lv = pos = 0;
  last = 0;
  while (pos &lt; 2000000000)
   { /* bound as stated */

    /* if last 256 were all possible, we are done */
    if (pos - last &gt; 256) break; 

    if (!cando[lv]) 
      last = pos; /* this isn't possible, update last impossible */
    else 
     { /* this is possible */
      cando[lv] = 0; /* mark pos+256 as impossible */

      /* mark pos + size as possible for each package size */
      for (lv2 = 0; lv2 &lt; nsize; lv2++)
        cando[(lv+sizes[lv2])%256] = 1;
     }

    /* update lv &amp; pos */
    lv = (++pos) % 256; 
   }
  if (pos &gt;= 2000000000) last = 0; /* shouldn't occur */

  fprintf (fout, "%i\n", last);
  return 0;
 }
</pre>

<h2> Alex Schwendner's Comments </h2>
<p> Given two relatively prime numbers N and M, the largest number that
you cannot make is NM - M - N, that is, the product minus the sum. We
do not have two numbers; however, even if we were using only two of them
the answer could not exceed 256 * 256 - 256 - 256 = 65024 (much less
then the 2,000,000,000 that we were guaranteed). It is therefore
reasonable to have an array of 65024 booleans and work on all of them
(If cando[x] then cando[x + sizes[p]]). If there is some number above
65024 that cannot be made then we know that there is no bound to the
largest number. Because cando[0] is set to false, if every number can
be made then the program will output '0' automatically. This program is
shorter and easier to code, and although it is somewhat less efficient,
it is easily able to solve the problem in the time limit.

</p><pre>#include &lt;fstream.h&gt;
#include &lt;string.h&gt;

int 
main ()
{

    int     n;
    int     sizes[10];

    ifstream filein ("nuggets.in");
    filein &gt;&gt; n;
    for (int in = 0; in &lt; n; ++in) {
	filein &gt;&gt; sizes[in];
    }
    filein.close ();

    bool    cando[67000];
    memset (cando, 0, 67000);

    for (int loop = 0; loop &lt; n; ++loop) {
	cando[sizes[loop]] = true;
	for (int loop2 = 0; loop2 &lt; 66700; ++loop2) {
	    if (cando[loop2]) {
		cando[loop2 + sizes[loop]] = true;
	    }
	}
    }

    ofstream fileout ("nuggets.out");
    for (int out = 66500; out &gt;= 0; --out) {
	if (!cando[out]) {
	    if (out &lt; 66000) {
		fileout &lt;&lt; out &lt;&lt; endl;
		break;
	    }
	    else {
		fileout &lt;&lt; 0 &lt;&lt; endl;
		break;
	    }
	}
    }
    fileout.close ();

    return (0);
}
</pre>

<center>
<a href="http://ace.delos.com/usacogate?a=Ndba0387uwg">USACO Gateway</a>
 | <a href="mailto:kolstad@ace.delos.com">Comment or Question</a>
</center>
</body></html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
 <title>Problem 85: Electric Fence</title> </head><body background="fence9_files/bg3.jpg">
<img src="fence9_files/cow1.jpg" width="742" height="118">
<center>
<b><font size="7">Electric Fence</font></b><br>
<b>Brian Jacokes</b>
</center>

<p>
We can approach this problem in an easier manner if we flip the x and y
axes, so we have a line from (0,0) to (M,N) and a line from (0,P) to (M,N).
With this transformation, we see that if we draw a vertical line at any x
position, it will intersect both of these line segments, so that we don't
have to worry about a special situation where it intersects one of the
axes.  Now we can cycle through all of the x-values, making sure to leave
out the values at 0 and M (at 0 we will have one of the fence sides, which
doesn't count for holding cows, and at M we will have the two lines meeting
at a point).  At any x-value, the y-value of the along the segment from
(0,0) to (M,N) is simply
<br>
<br>
</p><center>rise / run * x </center>
or
<br>
<br>
<center>
   N / M * x
</center>
<p>
The y-value of the segment from (0,P) to (M,N) will be the initial y-value
plus the rise over the run times x, or

<br><br></p><center>
   P + (N-P) / M * x
</center><p>

Make sure you see how this will give us the y-value.  Since each lattice
point must be at an integer x-coordinate, all we have to do is add on the
number of lattice points in between the two y-values at each x-value.  The
y-value along the segment (0,0) to (M,N) will always be lower than the
y-value along the segment (0,P) to (M,N), so we will always subtract the
first one from the second.  Now all that is left is to find out the
relationship between the y-values and the number of lattice points.

</p><p> Now let us take the lower y-value and move it down until it is at the
nearest lattice point that is at or below its current value, and let us
take the higher y-value and move it up until it is at the nearest lattice
point that is at or above its current value.  If we don't count the two
endpoints, we still have exactly the same number of lattice points as
before.  It is now easy to see that the number of lattice points between
the two values is

<br><br></p><center>
Y(bigger) - Y(smaller) - 1
</center>

<p> If this is unclear, just try a few simple examples, such as 1 and 2,
and see how it relates to larger y-values.  The only step left is to move
the y-values to the nearest lattice point that is above/below their current
value.

</p><p> Due to rounding errors, it is common that a number will be a very tiny
fraction off the integer value, but it is still supposed to be an integer.
Therefore, numbers must be checked to see how close they are to an integer
value before they are rounded (if a y-value is already an integer, moving
it up/down to the next y-value WILL change the number lattice points
between the two points, which is exactly what we don't want).

</p><p> Therefore, when we round a number up, we first take its floor function
(rounding it down).  If the real y-value minus its floor is less than a
very small number (say, 1e-6, for example), then we assume that this very
small error is a result of rounding and leave the rounded up number as its
floor.  Otherwise, we increment the number by 1.  In a similar manner we
round numbers down.

</p><pre>#include &lt;stdio.h&gt;
#include &lt;math.h&gt;

int 
roundup (double a)
{
    int     b = int (floor (a));
    if ((a - b) &gt; 1e-6)
	b++;
    return int (b);
}

int 
rounddown (double a)
{
    int     b = int (ceil (a));
    if ((b - a) &gt; 1e-6)
	b--;
    return b;
}

int 
main ()
{
    FILE   *in = fopen ("fence9.in", "r");
    FILE   *out = fopen ("fence9.out", "w");
    int     a, N, M, P, interior = 0, temp;
    double  val1, val2, slope1, slope2;
    fscanf (in, "%d%d%d", &amp;N, &amp;M, &amp;P);
    slope1 = double (N) / M;
    slope2 = double (N - P) / M;
    for (a = 1; a &lt; M; a++) {
	val1 = slope1 * a;
	val2 = P + slope2 * a;
	temp = roundup (val2) - rounddown (val1) - 1;
	interior += temp;
    }
    fprintf (out, "%d\n", interior);
    return 0;
}
</pre>

<h4>Alex Schwendner's O(ln N) solution</h4>

<p>Pick's Theorem states that if we have a polygon with lattice points as 
vertices, then:
</p><center>
A = I + B/2 - 1
</center>
where A is the area of the polygon, I is the number of lattice points 
inside of the polygon, and B is the number of lattice points on the 
boundary of the polygon. We are asked to find I.

<p>Thus, if we find A and B, w can use Pick's Theorem to find I. The area
is simply M * P / 2. We can find B by noting that the number of points that
lie on a line with lattice endpoints (W,X) and (Y,Z) is 1 + gcd(|Y - W|,
|Z - X|). We find the number of boundary points on each edge of the
triangle, and subtract 3 (because we are double counting the vertices of
the triangle) to find B. Once we have A and B, we can find I by using a
rearrangement of Pick's Theorem: I = A + 1 - B/2.

</p><p>This solution is very fast, as it provides an explicit formula for I.
The only step that is not constant-time is GCD(a,b), which is
O(ln(max(a,b))) in the worst case.

</p><pre>#include &lt;fstream.h&gt;

inline int
gcd (int a, int b) {
    if (a &lt; b){
	int t = a;
	a = b;
	b = t;
    }
    while (r = a % b) {
	a = b;
	b = r;
    }
    return (b);
}

int main () {
    int x, y, w;
    ifstream filein ("fence9.in");
    filein &gt;&gt; x &gt;&gt; y &gt;&gt; w;
    filein.close();

    if (y == 0) {
	ofstream fileout ("fence9.out");
	fileout &lt;&lt; 0 &lt;&lt; endl;
	fileout.close ();
	return(0);
    }

    // a = i + b/2 - 1
    // 2*a = 2*i + b - 2
    int a2 = y * w;
    int b = ((x &gt; 0) ? gcd(x,y) : y) +
		((x == w) ? y : gcd(((x &lt; w) ? (w - x) : (x - w)), y)) + w;
    int i = (a2 + 2 - b) / 2;
    ofstream fileout("fence9.out");
    fileout &lt;&lt; i &lt;&lt; endl;
    fileout.close();
    exit (0);
}
</pre>
</body></html>
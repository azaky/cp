<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
 <title>Problem 18: Raucous Rockers</title> </head><body background="rockers_files/bg3.jpg">
<img src="rockers_files/cow1.jpg" width="742" height="118">
<center>
<b><font size="7">Raucous Rockers</font></b><br>
<b>Brian Jacokes</b>
</center>

<p>
This is a pretty straight-forward dynamic programming problem.  The factors
that determine whether we can put a song on a CD are:
</p><ul>
<li>
The length used up on the CD so far
</li><li>
The length of the current song
</li><li>
The last song that we put on the CD (because of the date restriction)
</li></ul>
<p>
Therefore, we create an matrix called "dp", with dp[a][b][c] being the most
number of songs that we can put on the first 'a' CDs, with 'b' minutes
already used up on the 'a'th CD, and with 'c' being the last song that we
put on CD 'a'.  We initialize the matrix to be all zeroes, and then we
cycle through it as follows:
</p><ul>
<li>
We traverse the CDs in ascending order to satisfy the date requirement
</li><li>
We go through the number of minutes used in ascending order, so that we
have had a chance to put on a song earlier in the CD before we try to
put songs on at a later time
</li><li>
We go through the last song used in ascending order (although this order
doesn't really matter)
</li><li>
We go through the new songs in ascending order, making sure to start with
songs that were dated after the last song
</li></ul>
<p>
If the new song that we want to include in the set will fit on the current
CD, there is no reason to put it on the next CD, so we check the matrix
and see if adding it to the current set of songs will be better than the
value already stored in the matrix.  Otherwise, we check to see if it would
be beneficial to put the song on the next CD.  As a time-saver, each time
we check a current value in the matrix to see what other songs we can put
on the CD, we also check and see if this value is better than the most
number of CDs that we have currently been able to fit in the set, so that
we don't need to do this at the end.  Finally, we output this best number,
which will be the most number of CDs that we can fit in the set.

</p><pre>#include &lt;stdio.h&gt;
#define MAX 25

int     dp[MAX][MAX][MAX], length[MAX];

int 
main ()
{
    FILE   *in = fopen ("rockers.in", "r");
    FILE   *out = fopen ("rockers.out", "w");
    int     a, b, c, d, best, numsongs, cdlength, numcds;
    fscanf (in, "%d%d%d", &amp;numsongs, &amp;cdlength, &amp;numcds);
    for (a = 1; a &lt;= numsongs; a++)
	fscanf (in, "%d", &amp;length[a]);
    best = 0;
    for (a = 0; a &lt; numcds; a++)/* current cd */
	for (b = 0; b &lt;= cdlength; b++)	/* number of minutes used */
	    for (c = 0; c &lt;= numsongs; c++) {	/* last song */
		for (d = c + 1; d &lt;= numsongs; d++) {	/* new song */
		    if (b + length[d] &lt;= cdlength) {
			if (dp[a][b][c] + 1 &gt; dp[a][b + length[d]][d])
			    dp[a][b + length[d]][d] = dp[a][b][c] + 1;
		    }
		    else {
			if (dp[a][b][c] + 1 &gt; dp[a + 1][length[d]][d])
			    dp[a + 1][length[d]][d] = dp[a][b][c] + 1;
		    }
		}
		if (dp[a][b][c] &gt; best)
		    best = dp[a][b][c];
	    }
    fprintf (out, "%d\n", best);
    return 0;
}
</pre>
</body></html>
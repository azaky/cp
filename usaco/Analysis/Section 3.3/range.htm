<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
 <title>Analysis 2a: Home on the Range</title> </head><body 
background="range_files/bg3.jpg">
<img src="range_files/cow1.jpg" width="742" height="118">
<center>
<b><font size="7">Home on the Range</font></b><br>
Russ Cox
</center>

<p>To count the squares, we first precompute the biggest square
with lower right corner at any particular location.  This is done
by dynamic programming: the biggest square with lower right
corner at (i, j) is the minimum of three numbers:
</p><ul>
<li>the number of consecutive uneaten grid units to the left
</li><li>the number of consecutive uneaten grid units to the right
</li><li>one plus the size of the biggest square with lower right corner
 at (i-1, j-1)
</li></ul>

<p>Once we've computed this information, counting squares is simple:
go to each lower right corner and increment the counters for every
square size between 2 and the biggest square ending at that corner.

</p><pre>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;assert.h&gt;

#define MAXN 250

int goodsq[MAXN][MAXN];
int bigsq[MAXN][MAXN];
int tot[MAXN+1];

int
min(int a, int b)
{
    return a &lt; b ? a : b;
}

void
main(void)
{
    FILE *fin, *fout;
    int i, j, k, l, n, sz;

    fin = fopen("range.in", "r");
    fout = fopen("range.out", "w");
    assert(fin != NULL &amp;&amp; fout != NULL);

    fscanf(fin, "%d\n", &amp;n);

    for(i=0; i&lt;n; i++) {
	for(j=0; j&lt;n; j++)
	    goodsq[i][j] = (getc(fin) == '1');
	assert(getc(fin) == '\n');
    }

    /* calculate size of biggest square with lower right corner (i,j) */
    for(i=0; i&lt;n; i++) {
	for(j=0; j&lt;n; j++) {
	    for(k=i; k&gt;=0; k--)
		if(goodsq[k][j] == 0)
		    break;

	    for(l=j; l&gt;=0; l--)
		if(goodsq[i][l] == 0)
		    break;

	    sz = min(i-k, j-l);
	    if(i &gt; 0 &amp;&amp; j &gt; 0)
		sz = min(sz, bigsq[i-1][j-1]+1);

	    bigsq[i][j] = sz;
	}
    }

    /* now just count squares */
    for(i=0; i&lt;n; i++)
    for(j=0; j&lt;n; j++)
    for(k=2; k&lt;=bigsq[i][j]; k++)
	tot[k]++;

    for(i=2; i&lt;=n; i++)
	if(tot[i])
	    fprintf(fout, "%d %d\n", i, tot[i]);
				
    exit(0);
}
</pre>

<p> Greg Price writes:

</p><p> The posted solution runs in cubic time, with quadratic storage.
With a little more cleverness in the dynamic programming, the task can
be accomplished with only quadratic time and linear storage, and the
same amount of code and coding effort.  Instead of running back along
the rows and columns from each square, we use the biggest-square values
immediately to the west and north, so that each non-ravaged square's
biggest-square value is one more than the minimum of the values to the
west, north, and northwest.  This saves time, bringing us from cubic to
quadratic time.

</p><p>Another improvement, which saves space and perhaps cleans up the 
code
marginally, is to keep track of the number of squares of a given size
as we go along.  This obviates the need to keep a quadratic-size matrix
of biggest-square values, because we only need the most recent row for
continuing the computation.  As for "ravaged" values, we only use each
one once, all in order; we can just read those as we need them.

</p><pre>
#include &lt;fstream.h&gt;

ifstream fin("range.in");
ofstream fout("range.out");

const unsigned short maxn = 250 + 5;

unsigned short n;
char fieldpr;
unsigned short sq[maxn]; // biggest-square values
unsigned short sqpr;
unsigned short numsq[maxn]; // number of squares of each size

unsigned short
min3(unsigned short a, unsigned short b, unsigned short c)
{
	if ((a &lt;= b) &amp;&amp; (a &lt;= c))
		return a;
	else 
		return (b &lt;= c) ? b : c;
}

void
main()
{
	unsigned short r, c;
	unsigned short i;
	unsigned short tmp;

	fin &gt;&gt; n;

	for (c = 1; c &lt;= n; c++)
		sq[c] = 0;

	for (i = 2; i &lt;= n; i++)
		numsq[i] = 0;

	for (r = 1; r &lt;= n; r++)
	{
		sqpr = 0;
		sq[0] = 0;
		for (c = 1; c &lt;= n; c++)
		{
			fin &gt;&gt; fieldpr;
			if (!(fieldpr - '0'))
			{
				sqpr = sq[c];
				sq[c] = 0;
				continue;
			}

			// Only three values needed.
			tmp = 1 + min3(sq[c-1], sqpr, sq[c]);
			sqpr = sq[c];
			sq[c] = tmp;

			// Only count maximal squares, for now.
			if (sq[c] &gt;= 2)
				numsq[ sq[c] ]++;
		}
	}

	// Count all squares, not just maximal. 
	for (i = n-1; i &gt;= 2; i--)
		numsq[i] += numsq[i+1];

	for (i = 2; i &lt;= n &amp;&amp; numsq[i]; i++)
		fout &lt;&lt; i &lt;&lt; ' ' &lt;&lt; numsq[i] &lt;&lt; endl;
}

&lt;/pre&gt;


<center>
<a href="http://ace.delos.com/usacogate?a=Ndba0387uwg">USACO Gateway</a> | <a href="mailto:kolstad@ace.delos.com">Comment or Question</a>
</center>
</pre></body></html>
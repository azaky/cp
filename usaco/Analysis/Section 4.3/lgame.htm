<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
 <title>Problem 47: Letter Game</title> </head><body background="lgame_files/bg3.jpg">
<img src="lgame_files/cow1.jpg" width="742" height="118">
<center>
<b><font size="7">Letter Game</font></b><br>
Alex Schwendner
</center>

<p>First, note that as we are given at most 7 letters and, since a word is
at least 3 letters long, we cannot form more than two words. Considering
this, what is the simplest (correct) solution technique we can exploit?

</p><p>Complete search. We could try each pair of words and take the pair with
the highest score from among the pairs that we can make. However, 40,000
words could require up to 40,000^2 = 1,600,000,000 tests, which is far too
many for this time limit.

</p><p>Note that although that are many words, there are not very many letters.
We are given no more then 7 letters, and we use at least 3 of them on the
first word. There are 4! four letter words and 4*3! three letter words that
can be formed with the remaining letters, for a total of only 48
possibilities for the second word. Thus, for each word that can be made
with the given letters, we can determine all strings that can be formed
with the remaining letters, and look them up in the dictionary to see if
they are words. As there can be at most 48 possibilities for the second
word, once the first word has been chosen, this algorithm requires no more
then 40,000 * 48 = 1,920,000 lookups.

</p><p>How quickly can we lookup a word? If we store the dictionary in a trie,
the cost of looking up a word is equal to the word's length, which is in
this case, at most 7. Thus, this algorithm requires at most 40,000 * 48 *
7 = 13,440,000 operations, which is quite reasonable. We could also use a
binary search to lookup words.
 </p><pre>#include &lt;fstream.h&gt;
#include &lt;string.h&gt;
#include &lt;assert.h&gt;

class trie_elm
{
public:
    trie_elm * l[26];
    bool word;

    inline trie_elm (void)
    {
        memset (l, 0, sizeof (trie_elm *) * 26);
        word = false;
    }
};

trie_elm *trie = new trie_elm;
char letters[10];
const int value[26] =
  { 2, 5, 4, 4, 1, 6, 5, 5, 1, 7, 6, 3, 5, 2, 3, 5, 7,
         2, 1, 2, 4, 6, 6, 7, 5, 7 };

int best = -1000;
int nbest = 0;
char list[1000][10];

inline void
add (char *s)
{
    trie_elm *q = trie;
    while (*s != '\0')
    {
        if (q-&gt;l[*s - 'a'] == 0) {
	  q-&gt;l[*s - 'a'] = new trie_elm;
	}
        q = q-&gt;l[*s - 'a'];
        ++s;
    }
    q-&gt;word = true;
}

inline bool
lookup (char *s)
{
    trie_elm *q = trie;
    while (*s != '\0')
    {
        if (q-&gt;l[*s - 'a'] == 0)
	  return (false);
        q = q-&gt;l[*s - 'a'];
        ++s;
    }
    return (q-&gt;word);
}

inline int
eval (char *s)
{
    int q = 0;
    while (*s != '\0')
    {
        q += value[*s - 'a'];
        ++s;
    }
    return (q);
}

inline void
perm (const char first[10], const int &amp;base, char avail[26], bool more)
{
    static int length = 0;
    static char string[10];

    string[length] = '\0';

    int start = 0;
    if (!more) {
        for (int i = 0; first[i] != '\0'; ++i) {
  	    if (i == length) {
	        start = first[i] - 'a';
	        break;
	    }
	}
    }
    for (int i = start; i &lt; 26; ++i) {
        if (avail[i] &gt;= 1) {
	    --avail[i];
	    string[length++] = 'a' + i;
	    perm (first, base, avail, more || i &gt; start);
	    --length;
	    ++avail[i];
	}
    }

    string[length] = '\0';
    if (lookup (string)) {
        string[length] = '\0';
        int v = base + eval (string);
        if (best &lt; v) {
	    best = v;
	    nbest = 0;

	    int place = 0;
	    for (int i = 0; first[place] != '\0'; ++i) {
	        list[nbest][place] = first[place];
	        ++place;
	    }
	    list[nbest][place++] = ' ';
	    for (int i = 0; i &lt;= length; ++i) 
	        list[nbest][place++] = string[i];
	    list[nbest][place++] = '\0';
	    ++nbest;
	}
        else if (best == v) {
	    int place = 0;
	    for (int i = 0; first[place] != '\0'; ++i) {
	        list[nbest][place] = first[place];
	        ++place;
	    }
	    list[nbest][place++] = ' ';
	    for (int i = 0; i &lt;= length; ++i)
	      list[nbest][place++] = string[i];
	    list[nbest][place++] = '\0';
	    ++nbest;
	}
    }
}

inline void
search (trie_elm * q)
{
    static int length = 0;
    static char string[10];

    string[length] = '\0';

    if (q-&gt;word) {
        string[length] = '\0';

        char avail[26];
        memset (avail, 0, 26);
        for (char *c = letters; *c != '\0'; ++c)
	    ++avail[*c - 'a'];

        bool works = true;
        for (int i = 0; i &lt; length; ++i) {
	    if (--avail[string[i] - 'a'] &lt; 0) {
	        works = false;
	        break;
	    }
	}
        if (works) {
	    string[length] = '\0';
	    int v = eval (string);
	    if (best &lt; v) {
	        best = v;
	        nbest = 0;
	        for (int i = 0; i &lt;= length; ++i)
		    list[nbest][i] = string[i];
	        ++nbest;
	    }
	    else if (best == v) {
	        for (int i = 0; i &lt;= length; ++i)
		  list[nbest][i] = string[i];
	        ++nbest;
	    }
	    perm (string, eval (string), avail, false);
	}
    }
    for (int i = 0; i &lt; 26; ++i) {
        if (q-&gt;l[i] != 0) {
	    string[length++] = 'a' + i;
	    search (q-&gt;l[i]);
	    --length;
	}
    }
}

int
main ()
{
    char buffer[10];
    ifstream dict ("lgame.dict");
    dict.getline (buffer, 10, '\n');
    while (buffer[0] != '.') {
        assert (!lookup (buffer));
        add (buffer);
        dict.getline (buffer, 10, '\n');
    }
    dict.close ();

    ifstream filein ("lgame.in");
    filein.getline (letters, 10, '\n');
    filein.close ();

    search (trie);

    assert (nbest &gt;= 1);
    assert (best &gt; -1000);

    ofstream fileout ("lgame.out");
    fileout &lt;&lt; best &lt;&lt; endl;
    for (int i = 0; i &lt; nbest; ++i)
      fileout &lt;&lt; list[i] &lt;&lt; endl;
    fileout.close ();

    exit (0);
}
</pre>
<br>
<center>
<a href="mailto:grader@ace.delos.com">Submit Solution via Email</a>
&nbsp;|&nbsp; <a href="http://ace.delos.com/usacogate?a=twKWh2IAGUk"> USACO Gateway </a>  &nbsp;| &nbsp;
<a href="mailto:kolstad@ace.delos.com">Comment or Question </a>
</center>
</body></html>
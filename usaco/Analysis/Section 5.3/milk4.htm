<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
 <title>Problem 86: Milk Measuring</title> </head><body 
background="milk4_files/bg3.jpg">
<img src="milk4_files/cow1.jpg" width="742" height="118">
<center>
<b><font size="7">Milk Measuring</font></b><br>
<b>Steven Sivek</b>
</center>
<p>This is a dynamic programming problem with a few tricks thrown in.  
We 
keep three arrays: minPails, the fewest pails needed to get to a given 
number of quarts; lastPail, the pail tacked on to a smaller sequence to 
find the current best solution for a given number of quarts; and nLast, 
the number of identical pails at the end of the current best sequence.

</p><p>We iterate through the set of pails, each time scanning from 0 
quarts to Q 
quarts to try to improve a sequence by seeing if we can achieve it using
 
fewer pails than we've found so far.  We basically try to add as many of
 
the current pail as we can to earlier sequences in order to improve 
them; 
note that an improvement is not just a reduction in the number of pails 
required but also finding a set of pails which are smaller than the 
previously used ones.

</p><p>There's one exception, though: let's say we've got two pails of 
size 4 and
5.  If we've already found out that we can get 20 quarts with only a
4-quart pail, then when we iterate with the 5-quart pail minPails[25] 
will
be set to 2 because achieving 20 quarts with only a 5-quart pail isn't 
an
improvement over what we already have.  Thus if we can't improve 
minPails
with a new pail, but we can match what we already have, we'll overwrite
its old value anyway; this way, when we remember that 20 quarts can also
be achieved with a single 5-quart pail, we can use it again to get to 25
quarts with a single pail.  Because of this overwriting, we need to 
remember how many times a pail has to be filled to get to a given 
capacity, so we store that in the array nLast.

</p><p>By iterating through the set of pails this way, the lists we are 
storing
refer to the smallest set of pails which use the pail sizes we've seen
most recently.  In order to come up with the smallest pails first, then,
we simply sort the pails in descending order before beginning the DP so
that the most recently used pails are the smallest ones.  After having
gone through every pail, then, we backtrack using the nLast and lastPail
 
arrays, and we are done.

</p><pre>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#define MAXQ 20005
#define MAXP 105
#define INF  0x7fffffff

void    findMinPails ();
void    backtrack ();
int     betterSequence (int a, int b);
int     compare (const void *a, const void *b);

int     nQuart, nPail;
int     pails[MAXP];
int     minPails[MAXQ];
int     lastPail[MAXQ];
int     nLast[MAXQ];
int     finalSet[MAXP], nFinal;

int 
main ()
{
    FILE   *fin = fopen ("milk4.in", "r");
    fscanf (fin, "%d %d", &amp;nQuart, &amp;nPail);

    for (int i = 0; i &lt; nPail; i++)
	fscanf (fin, "%d", &amp;(pails[i]));
    fclose (fin);

    qsort (pails, nPail, sizeof (pails[0]), compare);

    findMinPails ();
    backtrack ();

    FILE   *fout = fopen ("milk4.out", "w");
    fprintf (fout, "%d", nFinal);

    for (int i = 0; i &lt; nFinal; i++)
	fprintf (fout, " %d", finalSet[i]);
    fprintf (fout, "\n");
    fclose (fin);

    return 0;
}

void 
findMinPails ()
{
    //Indicate that nothing is possible yet
    for (int i = 0; i &lt;= nQuart; i++) {
	lastPail[i] = -1;
	minPails[i] = INF;
	nLast[i] = -1;
    }

    minPails[0] = 0;

    for (int i = 0; i &lt; nPail; i++) {
	int     tempMP[MAXQ], tempLP[MAXQ], tempNL[MAXQ];

	for (int j = 0; j &lt;= nQuart; j++) {
	    tempMP[j] = minPails[j];
	    tempLP[j] = lastPail[j];
	    tempNL[j] = nLast[j];
	}

	for (int j = pails[i]; j &lt;= nQuart; j++) {
	    int     prev = j - pails[i];

	    if (tempMP[prev] &lt; INF) {	/* meaning it's reachable */
//case 1: try using more of this pail
		    if (tempLP[prev] == pails[i]) {
		    tempLP[j] = pails[i];
		    tempMP[j] = tempMP[prev];
		    tempNL[j] = tempNL[prev] + 1;
		}

//case 2: try using just one of this pail
		    // because we have to
		    if (tempLP[prev] != pails[i]) {
		    tempLP[j] = pails[i];
		    tempMP[j] = tempMP[prev] + 1;
		    tempNL[j] = 1;
		}

//case 3: try using just one of this pail
	    /* because it's better */
		    if (minPails[prev] &lt; INF &amp;&amp;
		    (minPails[prev] + 1 &lt; tempMP[j] ||
			(minPails[prev] + 1 == tempMP[j] &amp;&amp;
			    betterSequence (prev,
				j - tempNL[j] * pails[i])
			))) {
		    tempLP[j] = pails[i];
		    tempMP[j] = minPails[prev] + 1;
		    tempNL[j] = 1;
		}
	    }
	}

	for (int j = pails[i]; j &lt;= nQuart; j++)
	    if (tempMP[j] &lt;= minPails[j]) {
		minPails[j] = tempMP[j];
		lastPail[j] = tempLP[j];
		nLast[j] = tempNL[j];
	    }
    }
}

void 
backtrack ()
{
    int     curr = nQuart;
    nFinal = minPails[nQuart];

    for (int j = 0; j &lt; nFinal; j++) {
	finalSet[j] = lastPail[curr];
	curr -= lastPail[curr] * nLast[curr];
    }
}

int 
betterSequence (int a, int b)
//See if the sequence arriving at "a" is better than that arriving at "b"
// Assume the two sequences have equal lengths
{
    while (a &amp;&amp; b) {
	if (lastPail[a] &lt; lastPail[b])
	    return 1;
	if (lastPail[a] &gt; lastPail[b])
	    return 0;

	a -= nLast[a] * lastPail[a];
	b -= nLast[b] * lastPail[b];
    }

    if (a)
	return 0;
    return 1;
}

int 
compare (const void *a, const void *b) //Sort in descending order
{
    return *(int *) b - *(int *) a;
}
</pre>
<center>
<a href="http://ace.delos.com/usacogate?a=Ndba0387uwg">USACO Gateway</a>
 | <a href="mailto:kolstad@ace.delos.com">Comment or Question</a>
</center>
</body></html>
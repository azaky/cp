<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
 <title>Analysis 92: Preface Numbering</title> </head><body 
background="preface_files/bg3.jpg">
<img src="preface_files/cow1.jpg" width="742" height="118">
<center>
<b><font size="7">Preface Numbering</font></b><br>
Russ Cox
</center>

<p>Since the maximum problem size is fairly small, it makes sense to
just calculate the corresponding roman number for each page number, and
count letters.

</p><p>The tricky part is generating the roman numbers.  The key insight
 is
that roman numbers are not much different than our own decimal digits.
The two differences are that the set of digits changes depending on
which decimal place we're worrying about, and that sometimes a "digit"
is multiple letters or no letters (in the case of zero).  So for
example, in the ones place 7 is written "VII" and in the tens place
"LXX", and so on, but it's always the same format: the letter for 5 and
then two occurrences of the letter for 1.

</p><p>We use a lookup table called "encode" to encode each digit,
translating from the letters for the ones place to the letters for the
place that we care about.  The "romandigit" function takes care of each
digit, and the "roman" function strings them all together.

</p><pre>/*
PROG: preface
ID: rsc001
*/

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;assert.h&gt;

static char *encode[] = {
	"", "I", "II", "III", "IV",
	"V", "VI", "VII", "VIII", "IX",
};

char*
romandigit(int d, char *ivx)
{
	char *s, *p;
	static char str[10];

	for(s=encode[d%10], p=str; *s; s++, p++) {
		switch(*s){
		case 'I':
			*p = ivx[0];
			break;
		case 'V':
			*p = ivx[1];
			break;
		case 'X':
			*p = ivx[2];
			break;
		}
	}
	*p = '\0';
	return str;
}

char*
roman(int n)
{
	static char buf[20];

	strcpy(buf, "");
	strcat(buf, romandigit(n/1000, "M"));
	strcat(buf, romandigit(n/100,  "CDM"));
	strcat(buf, romandigit(n/10,   "XLC"));
	strcat(buf, romandigit(n,      "IVX"));
	return buf;
}

void
main(void)
{
	FILE *fin, *fout;
	int i, n;
	char *s;
	int count[256];

	fin = fopen("preface.in", "r");
	fout = fopen("preface.out", "w");
	assert(fin != NULL &amp;&amp; fout != NULL);

	fscanf(fin, "%d", &amp;n);

	for(s="IVXLCDM"; *s; s++)
		count[*s] = 0;

	for(i=1; i&lt;=n; i++)
		for(s=roman(i); *s; s++)
			count[*s]++;

	for(s="IVXLCDM"; *s; s++)
		if(count[*s])
			fprintf(fout, "%c %d\n", *s, count[*s]);

	exit(0);
}
</pre>

<h3>Alex Schendner's Algorithm</h3>
<p> Alex writes:
<br>
While you certainly can find out what the Roman numerals are, the
problem does not ask for that information and the program can be made
simpler if you only keep track of how many for each digit there are.
[Kolstad simplified the program slightly.]

</p><pre>#include &lt;fstream.h&gt;

int     Ig = 0;
int     Vg = 0;
int     Xg = 0;
int     Lg = 0;
int     Cg = 0;
int     Dg = 0;
int     Mg = 0;

inline void 
roman (int x)
{
    int     I = 0;
    int     V = 0;
    int     X = 0;
    int     L = 0;
    int     C = 0;
    int     D = 0;
    int     M = 0;
    for ( ; x &gt;= 1000; ++M, x -= 1000);
    for ( ; x &gt;= 500; ++D, x -= 500);
    for ( ; x &gt;= 100; ++C, x -= 100);
    for ( ; x &gt;= 50; ++L, x -= 50);
    for ( ; x &gt;= 10; ++X, x -= 10);
    for ( ; x &gt;= 5; ++V, x -= 5);
    for ( ; x &gt;= 1; ++I, x -= 1);

    while (D &gt; 0 &amp;&amp; (C / 4) &gt; 0) {
	--D; C -= 4; ++M; ++C;
    }
    while (C &gt;= 4) {
	C -= 4; ++D; ++C;
    }
    while (L &gt; 0 &amp;&amp; (X / 4) &gt; 0) {
	--L; X -= 4; ++C; ++X;
    }
    while (X &gt;= 4) {
	X -= 4; ++L; ++X;
    }
    while (V &gt; 0 &amp;&amp; (I / 4) &gt; 0) {
	--V; I -= 4; ++X; ++I;
    }
    while (I &gt;= 4) {
	I -= 4; ++V; ++I;
    }
    Ig += I;
    Vg += V;
    Xg += X;
    Lg += L;
    Cg += C;
    Dg += D;
    Mg += M;
    return;
}

int 
main ()
{

    int     n;
    ifstream filein ("preface.in");
    filein &gt;&gt; n;
    filein.close ();

    for (int loop = 1; loop &lt;= n; ++loop) {
	roman (loop);
    }

    ofstream fileout ("preface.out");
    if (Ig != 0) {
	fileout &lt;&lt; 'I' &lt;&lt; ' ' &lt;&lt; Ig &lt;&lt; endl;
    }
    if (Vg != 0) {
	fileout &lt;&lt; 'V' &lt;&lt; ' ' &lt;&lt; Vg &lt;&lt; endl;
    }
    if (Xg != 0) {
	fileout &lt;&lt; 'X' &lt;&lt; ' ' &lt;&lt; Xg &lt;&lt; endl;
    }
    if (Lg != 0) {
	fileout &lt;&lt; 'L' &lt;&lt; ' ' &lt;&lt; Lg &lt;&lt; endl;
    }
    if (Cg != 0) {
	fileout &lt;&lt; 'C' &lt;&lt; ' ' &lt;&lt; Cg &lt;&lt; endl;
    }
    if (Dg != 0) {
	fileout &lt;&lt; 'D' &lt;&lt; ' ' &lt;&lt; Dg &lt;&lt; endl;
    }
    if (Mg != 0) {
	fileout &lt;&lt; 'M' &lt;&lt; ' ' &lt;&lt; Mg &lt;&lt; endl;
    }
    fileout.close ();

    return (0);
}
</pre>

<h3>lifuxin's Algorithm</h3>
<p>Similar as Alex's program, this one is simpler in some ways.  We can
treat those things like "IX" or "IV" as another positive number.  We
will just use the number to try every number in the ns array. I also
used match1 and match2 to save the corresponding letter of each number
in ns.
</p><pre>#include &lt;stdio.h&gt;
int     ns[] =
   {1000, 900, 500, 400, 100, 90, 50,  40, 10,  9,  5,   4, 1};
   //"M" "CM"  "D"  "CD" "C" "XC" "L" "XL" "X" "IX" "V" "IV" "I"
char    rs[] = {"IVXLCDM"};
int     match1[] = {6, 4, 5, 4, 4, 2, 3, 2, 2, 0, 1, 0, 0};
int     match2[] = {-1, 6, -1, 5, -1, 4, -1, 3, -1, 2, -1, 1, -1};
int     n;
int     counts[7];

void 
count (int num)
{
    int     sct[] = {3, 1, 1, 1, 3, 1, 1, 1, 3, 1, 1, 1, 3};
    int     i, j = 0;
    for (i = 0; i &lt; 13; i++) {
	while (sct[i] &gt; 0) {
	    if ((num - ns[i]) &gt;= 0) {
		num -= ns[i];
		counts[match1[i]]++;
		if (match2[i] &gt;= 0)
		    counts[match2[i]]++;
		sct[i]--;
	    }
	    else
		break;
	}
    }
}

void 
main ()
{
    FILE   *fp = fopen ("preface.in", "r");
    FILE   *wfp = fopen ("preface.out", "w");
    int     i;
    fscanf (fp, "%d", &amp;n);
    for (i = 0; i &lt; 7; i++)
	counts[i] = 0;
    for (i = 1; i &lt;= n; i++)
	count (i);
    for (i = 0; i &lt; 7; i++) {
	if (counts[i])
	    fprintf (wfp, "%c %d\n", rs[i], counts[i]);
    }
    fclose (fp);
    fclose (wfp);
}
</pre>



<center>
<a href="http://ace.delos.com/usacogate?a=Ndba0387uwg">USACO Gateway</a>
 | <a href="mailto:kolstad@ace.delos.com">Comment or Question</a>
</center>
</body></html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
 <title>Problem 38: Subset Sums</title> </head><body 
background="subset_files/bg3.jpg">
<img src="subset_files/cow1.jpg" width="742" height="118">

<center>
<b><font size="7">Subset Sums</font></b><br>
Rob Kolstad
</center>
<p>This is a classic dynamic programming problem. Hal's solution
is shown below.
</p><pre>
/* Calculate how many two-way partitions of {1, 2, ..., N} are
   even splits (the sums of the elements of both partition are equal) */

#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

#define MAXSUM 637

unsigned int numsets[637][51];

int max;
unsigned int sum;

main(int argc, char **argv)
{
  int lv, lv2, lv3;
  int cnt;
  FILE *fin, *fout;

  fin = fopen ("subset.in", "r");
  fscanf(fin, "%d", &amp;max);
  fclose (fin);
  fout = fopen("subset.out", "w");

  if ((max % 4) == 1 || (max % 4) == 2) {
    fprintf (stderr, "0\n");
    exit(1);
  }

  sum = max * (max+1) / 4;

  for (cnt = 0; cnt &lt; 1; cnt++) {
    memset(numsets, 0, sizeof(numsets[0]));
    numsets[0][0] = 1;
    for (lv = 1; lv &lt; max; lv++) {
      for (lv2 = 0; lv2 &lt;= sum; lv2++)
        numsets[lv2][lv] = numsets[lv2][lv-1];
      for (lv2 = 0; lv2 &lt;= sum-lv; lv2++)
        numsets[lv2+lv][lv] += numsets[lv2][lv-1];
    }

    fprintf (fout, "%u\n", numsets[sum][max-1]);
    fclose (fout);
  }
  exit (0);
}
</pre>
and here's an even more concise solution from Nick Tomitov of Bulgaria:
<pre>#include &lt;fstream&gt;
using namespace std;
const unsigned int MAX_SUM = 1024;
int n;
unsigned long long int dyn[MAX_SUM];
ifstream fin ("subset.in");
ofstream fout ("subset.out");

int main() {
    fin &gt;&gt; n;
    fin.close();
    int s = n*(n+1);
    if (s % 4) {
        fout &lt;&lt; 0 &lt;&lt; endl;
        fout.close ();
        return ;
    }
    s /= 4;
    int i, j;
    dyn [0] = 1;
    for (i = 1; i &lt;= n; i++)
        for (j = s; j &gt;= i; j--) 
            dyn[j] += dyn[j-i];
    fout &lt;&lt; (dyn[s]/2) &lt;&lt; endl;
    fout.close();
    return 0;
}

</pre>
<center>
<a href="http://ace.delos.com/usacogate?a=Ndba0387uwg">USACO Gateway</a>
 | <a href="mailto:kolstad@ace.delos.com">Comment or Question</a>
</center>
</body></html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
 <title>Analysis 22: Party Lamps</title> </head><body 
background="lamps_files/bg3.jpg">
<img src="lamps_files/cow1.jpg" width="742" height="118">
<center>
<b><font size="7">Party Lamps</font></b><br>
Russ Cox
</center>

<p>There are a number of insights required for this problem.

</p><p>The main insight is that no matter which switches get pressed,
the light pattern will repeat every six lamps.  Another insight
is that the order of switch presses does not matter, and that
pressing a switch twice is the same as not pressing a switch at all.

</p><p>Any even number of switch presses greater than four might 
as well just be four switch presses, and and any odd number greater
than three might as well just be three presses.

</p><p>We can treat the light information as describing only the first
six lamps (by treating lamp n as lamp (n mod 6)), and only try
pressing each switch once or not at all.

</p><p>To maintain the actual information about which lights
are on, we use an integer holding six bits.  The least
significant bit is light 6, the next least is light 5, and so on.
This has the effect that treating these bit strings as normal
numbers sorts the same way that we need to print them.

</p><p>Switches are represented as bit vectors that say which lights
get toggled.  

</p><pre>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;assert.h&gt;

#define MAXLAMP	6
#define LAMPMASK	((1&lt;&lt;MAXLAMP)-1)

int nlamp;
int nswitch;
int ison;
int known;

int poss[1&lt;&lt;MAXLAMP];

int flip[4] = {
    LAMPMASK,		/* flip all lights */
    LAMPMASK &amp; 0xAA, 	/* flip odd lights */
    LAMPMASK &amp; 0x55,	/* flip even lights */
    LAMPMASK &amp; ((1&lt;&lt;(MAXLAMP-1))|(1&lt;&lt;(MAXLAMP-4)))	/* lights 1, 4 */
};

/*
 * Starting with current light state ``lights'', flip exactly n switches
 * with number &gt;= i.
 */
void
search(int lights, int i, int n)
{
    if(n == 0) {
	if((lights &amp; known) == ison)
	    poss[lights] = 1;
	return;
    }

    for(; i&lt;4; i++)
	search(lights ^ flip[i], i+1, n-1);
}

void
printseq(FILE *fout, int lights)
{
    int i;
    char s[100+1];

    for(i=0; i&lt;nlamp; i++)
	s[i] = (lights &amp; (1&lt;&lt;(MAXLAMP-1 - i%MAXLAMP))) ? '1' : '0';
    s[nlamp] = '\0';
    fprintf(fout, "%s\n", s);
}

void
main(void)
{
    FILE *fin, *fout;
    int a, i, impossible;

    fin = fopen("lamps.in", "r");
    fout = fopen("lamps.out", "w");
    assert(fin != NULL &amp;&amp; fout != NULL);

    fscanf(fin, "%d %d", &amp;nlamp, &amp;nswitch);

    for(;;) {
	fscanf(fin, "%d", &amp;a);
	if(a == -1)
	    break;
	a = MAXLAMP-1 - (a-1) % MAXLAMP;
	ison |= 1&lt;&lt;a;
	known |= 1&lt;&lt;a;
    }

    for(;;) {
	fscanf(fin, "%d", &amp;a);
	if(a == -1)
	    break;
	a = MAXLAMP-1 - (a-1) % MAXLAMP;
	assert((ison &amp; (1&lt;&lt;a)) == 0);
	known |= 1&lt;&lt;a;
    }

    if(nswitch &gt; 4)
	if(nswitch%2 == 0)
	    nswitch = 4;
	else
	    nswitch = 3;

    for(; nswitch &gt;= 0; nswitch -= 2)
	    search(LAMPMASK, 0, nswitch);

    impossible = 1;
    for(i=0; i&lt;(1&lt;&lt;MAXLAMP); i++) {
	if(poss[i]) {
	    printseq(fout, i);
	    impossible = 0;
	}
    }
    if(impossible)
	fprintf(fout, "IMPOSSIBLE\n");

    exit(0);
}
</pre>
<center>
<a href="http://ace.delos.com/usacogate?a=Ndba0387uwg">USACO Gateway</a>
 | <a href="mailto:kolstad@ace.delos.com">Comment or Question</a>
</center>
</body></html>
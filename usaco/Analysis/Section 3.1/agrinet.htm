<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
 <title>Analysis 102: Agri-Net</title> </head><body 
background="agrinet_files/bg3.jpg">
<img src="agrinet_files/cow1.jpg" width="742" height="118">
<center>
<b><font size="7">Agri-Net</font></b><br>
Russ Cox
</center>

<p>This problem requires finding the minimum spanning tree of the given
graph.  We use an algorithm that, at each step, looks to add to the
spanning tree the closest node not already in the tree.

</p><p>Since the tree sizes are small enough, we don't need any 
complicated
data structures: we just consider every node each time.

</p><pre>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;assert.h&gt;

#define MAXFARM	100

int nfarm;
int dist[MAXFARM][MAXFARM];
int isconn[MAXFARM];

void
main(void)
{
    FILE *fin, *fout;
    int i, j, nfarm, nnode, mindist, minnode, total;

    fin = fopen("agrinet.in", "r");
    fout = fopen("agrinet.out", "w");
    assert(fin != NULL &amp;&amp; fout != NULL);

    fscanf(fin, "%d", &amp;nfarm);
    for(i=0; i&lt;nfarm; i++)
    for(j=0; j&lt;nfarm; j++) 
	fscanf(fin, "%d", &amp;dist[i][j]);

    total = 0;
    isconn[0] = 1;
    nnode = 1;
    for(isconn[0]=1, nnode=1; nnode &lt; nfarm; nnode++) {
	mindist = 0;
	for(i=0; i&lt;nfarm; i++)
	for(j=0; j&lt;nfarm; j++) {
	    if(dist[i][j] &amp;&amp; isconn[i] &amp;&amp; !isconn[j]) {
	    	if(mindist == 0 || dist[i][j] &lt; mindist) {
		    mindist = dist[i][j];
		    minnode = j;
		}
	    }
	}
	assert(mindist != 0);
		
	isconn[minnode] = 1;
	total += mindist;
    }

    fprintf(fout, "%d\n", total);

    exit(0);
}
</pre>

<h3> Here is additional analysis from Alex Schwendner:</h3>

<p>The solution given is O(N3); however, we can obtain O(N2) if we 
modify
it by storing the distance from each node outside of the tree to the 
tree
in an array, instead of recalculating it each time. Thus, instead of
checking the distance from every node in the tree to every node outside 
of
the tree each time that we add a node to the tree, we simply check the
value in the array for each node outside of the tree.

</p><pre>#include &lt;fstream.h&gt;
#include &lt;assert.h&gt;

const int BIG = 20000000;

int     n;
int     dist[1000][1000];
int     distToTree[1000];
bool    inTree[1000];

main ()
{
    ifstream filein ("agrinet.in");
    filein &gt;&gt; n;
    for (int i = 0; i &lt; n; ++i) {
	for (int j = 0; j &lt; n; ++j) {
	    filein &gt;&gt; dist[i][j];
	}
	distToTree[i] = BIG;
	inTree[i] = false;
    }
    filein.close ();

    int     cost = 0;
    distToTree[0] = 0;

    for (int i = 0; i &lt; n; ++i) {
	int     best = -1;
	for (int j = 0; j &lt; n; ++j) {
	    if (!inTree[j]) {
		if (best == -1 || distToTree[best] &gt; distToTree[j]) {
		    best = j;
		}
	    }
	}
	assert (best != -1);
	assert (!inTree[best]);
	assert (distToTree[best] &lt; BIG);

	inTree[best] = true;
	cost += distToTree[best];
	distToTree[best] = 0;
	for (int j = 0; j &lt; n; ++j) {
	    if (distToTree[j] &gt; dist[best][j]) {
		distToTree[j] = dist[best][j];
		assert (!inTree[j]);
	    }
	}
    }
    ofstream fileout ("agrinet.out");
    fileout &lt;&lt; cost &lt;&lt; endl;
    fileout.close ();
    exit (0);
}

</pre>

<center>
<a href="http://ace.delos.com/usacogate?a=Ndba0387uwg">USACO Gateway</a>
 | <a href="mailto:kolstad@ace.delos.com">Comment or Question</a>
</center>
</body></html>
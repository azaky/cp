<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
 <title>Analysis 11: Contact</title> </head><body 
background="contact_files/bg3.jpg">
<img src="contact_files/cow1.jpg" width="742" height="118">
<center>
<b><font size="7">Contact</font></b><br>
Russ Cox
</center>

<p>For this problem, we keep track of every bit sequence we see.  We
could use the bit sequence itself as an index into a table of 
frequencies,
but that would not distinguish between the 2-bit sequence "10" and the
4-bit sequence "0010".  To solve this, we always add a 1 to the 
beginning
of the number, so "10" becomes "110" and "0010" becomes "10010".

</p><p>After reading the entire bit string, we sort the frequency table 
and
walk through it to print out the top sequences.

</p><pre>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;assert.h&gt;

#define MAXBITS 12
#define MAXSEQ (1&lt;&lt;(MAXBITS+1))

typedef struct Seq Seq;
struct Seq {
    unsigned bits;
    int count;
};

Seq seq[MAXSEQ];

/* increment the count for the n-bit sequence "bits" */
void
addseq(unsigned bits, int n)
{
    bits &amp;= (1&lt;&lt;n)-1;
    bits |= 1&lt;&lt;n;
    assert(seq[bits].bits == bits);
    seq[bits].count++;
}

/* print the bit sequence, decoding the 1&lt;&lt;n stuff */
/* recurse to print the bits most significant bit first */
void
printbits(FILE *fout, unsigned bits)
{
    assert(bits &gt;= 1);
    if(bits == 1)	/* zero-bit sequence */
	return;

    printbits(fout, bits&gt;&gt;1);
    fprintf(fout, "%d", bits&amp;1);
}

int
seqcmp(const void *va, const void *vb)
{
    Seq *a, *b;

    a = (Seq*)va;
    b = (Seq*)vb;

    /* big counts first */
    if(a-&gt;count &lt; b-&gt;count)
	return 1;
    if(a-&gt;count &gt; b-&gt;count)
	return -1;

    /* same count: small numbers first */
    if(a-&gt;bits &lt; b-&gt;bits)
	return -1;
    if(a-&gt;bits &gt; b-&gt;bits)
	return 1;

    return 0;
}

void
main(void)
{
    FILE *fin, *fout;
    int i, a, b, n, nbit, c, j, k;
    unsigned bit;
    char *sep;

    fin = fopen("contact.in", "r");
    fout = fopen("contact.out", "w");
    assert(fin != NULL &amp;&amp; fout != NULL);

    nbit = 0;
    bit = 0;

    for(i=0; i&lt;=MAXBITS; i++)
	for(j=0; j&lt;(1&lt;&lt;i); j++)
	    seq[(1&lt;&lt;i) | j].bits = (1&lt;&lt;i) | j;

    fscanf(fin, "%d %d %d", &amp;a, &amp;b, &amp;n);

    while((c = getc(fin)) != EOF) {
	if(c != '0' &amp;&amp; c != '1')
	    continue;

	bit &lt;&lt;= 1;
	if(c == '1')
	    bit |= 1;

	if(nbit &lt; b)
	    nbit++;

	for(i=a; i&lt;=nbit; i++)
	    addseq(bit, i);
    }

    qsort(seq, MAXSEQ, sizeof(Seq), seqcmp);

    /* print top n frequencies for number of bits between a and b */
    j = 0;
    for(i=0; i&lt;n &amp;&amp; j &lt; MAXSEQ; i++) {
	if(seq[j].count == 0)
	    break;

	c = seq[j].count;
	fprintf(fout, "%d\n", c);

	/* print all entries with frequency c */
	sep = "";
	for(k=0; seq[j].count == c; j++, k++) {
	    fprintf(fout, sep);
	    printbits(fout, seq[j].bits);
	    if(k%6 == 5)
		sep = "\n";
	    else
		sep = " ";
	}
	fprintf(fout, "\n");
    }

    exit(0);
}
</pre>
<br><br>
<center>
<a href="mailto:grader@ace.delos.com">Submit Solution via Email</a>
&nbsp;|&nbsp; <a href="http://ace.delos.com/usacogate?a=Ndba0387uwg"> 
USACO Gateway </a>  &nbsp;| &nbsp;
<a href="mailto:kolstad@ace.delos.com">Comment or Question </a>
</center>
</body></html>
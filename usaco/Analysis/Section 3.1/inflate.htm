<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
 <title>Analysis 1: Score Inflation</title> </head><body 
background="inflate_files/bg3.jpg">
<img src="inflate_files/cow1.jpg" width="742" height="118">
<center>
<b><font size="7">Score Inflation</font></b><br>
Russ Cox
</center>

<p>We use dynamic programming to calculate the best way to use t minutes
for all t from 0 to tmax.

</p><p>When we find out about a new category of problem with points p 
and
length t, we update the best for j minutes by taking the better of what
was there already and what we can do by using a p point problem with
the best for time j - t.

</p><pre>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;assert.h&gt;

#define MAXCAT 10000
#define MAXTIME 10000

int best[MAXTIME+1];

void
main(void)
{
    FILE *fin, *fout;
    int tmax, ncat;
    int i, j, m, p, t;

    fin = fopen("inflate.in", "r");
    fout = fopen("inflate.out", "w");
    assert(fin != NULL &amp;&amp; fout != NULL);

    fscanf(fin, "%d %d", &amp;tmax, &amp;ncat);

    for(i=0; i&lt;ncat; i++) {
	fscanf(fin, "%d %d", &amp;p, &amp;t);
	for(j=0; j+t &lt;= tmax; j++)
	    if(best[j]+p &gt; best[j+t])
	    	best[j+t] = best[j]+p;
    }

	m = 0;
    for(i=0; i&lt;=tmax; i++)
	if(m &lt; best[i])
	    m = best[i];

    fprintf(fout, "%d\n", m);
    exit(0);
}
</pre>

<p>Greg Price writes:  After the main `for' loop that does the actual
DP work, we don't need to look at the entire array of best point totals
to find the highest one.  The array is always nondecreasing, so we
simply output the last element of the array.

</p><pre>#include &lt;fstream.h&gt;

ifstream fin("inflate.in");
ofstream fout("inflate.out");

const short maxm = 10010;
long best[maxm], m, n;

void
main()
{
    short i, j, len, pts;

    fin &gt;&gt; m &gt;&gt; n;

    for (j = 0; j &lt;= m; j++)
        best[j] = 0;

    for (i = 0; i &lt; n; i++) {
        fin &gt;&gt; pts &gt;&gt; len;
        for (j = len; j &lt;= m; j++)
            if (best[j-len] + pts &gt; best[j])
                best[j] = best[j-len] + pts;
    }
    fout &lt;&lt; best[m] &lt;&lt; endl; // This is always the highest total.
}
</pre>


<center>
<a href="http://ace.delos.com/usacogate?a=Ndba0387uwg">USACO Gateway</a>
 | <a href="mailto:kolstad@ace.delos.com">Comment or Question</a>
</center>
</body></html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
 <title>Analysis 64: Ordered Fractions</title> </head><body 
background="frac1_files/bg3.jpg">
<img src="frac1_files/cow1.jpg" width="742" height="118">
<center>
<b><font size="7">Ordered Fractions</font></b><br>
Russ Cox
</center>


<p> Here's a very fast, straightforward solution from Alex Schwedner:
</p><pre>#include &lt;fstream.h&gt;
#include &lt;stdlib.h&gt;

struct fraction {
    int numerator;
    int denominator;
};

bool rprime(int a, int b){
   int r = a % b;
   while(r != 0){
       a = b;
       b = r;
       r = a % b;
   }
   return(b == 1);
}

int fraccompare (struct fraction *p, struct fraction *q) {
   return p-&gt;numerator * q-&gt;denominator - p-&gt;denominator *q-&gt;numerator;
}

int main(){
   int found = 0;
   struct fraction fract[25600];

   ifstream filein("frac1.in");
   int n;
   filein &gt;&gt; n;
   filein.close();

   for(int bot = 1; bot &lt;= n; ++bot){
       for(int top = 0; top &lt;= bot; ++top){
           if(rprime(top,bot)){
               fract[found].numerator = top;
               fract[found++].denominator = bot;
           }
       }
   }

   qsort(fract, found, sizeof (struct fraction), fraccompare);

   ofstream fileout("frac1.out");
   for(int i = 0; i &lt; found; ++i)
       fileout &lt;&lt; fract[i].numerator &lt;&lt; '/' &lt;&lt; fract[i].denominator &lt;&lt; endl;
   fileout.close();

   exit (0);
}
</pre>


<p>Here's a super fast solution from Russ:
</p><p>
We notice that we can start with
0/1 and 1/1 as our ``endpoints'' and recursively generate the middle
points by adding numerators and denominators.

</p><pre>0/1                                                              1/1
                               1/2
                  1/3                      2/3
        1/4              2/5         3/5                 3/4
    1/5      2/7     3/8    3/7   4/7   5/8       5/7         4/5
</pre>

Each fraction is created from the one up to its right and the one up to
its left.  This idea lends itself easily to a recursion that we cut off
when we go too deep. 

<pre>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;assert.h&gt;

int n;
FILE *fout;

/* print the fractions of denominator &lt;= n between n1/d1 and n2/d2 */
void
genfrac(int n1, int d1, int n2, int d2)
{
	if(d1+d2 &gt; n)	/* cut off recursion */
		return;

	genfrac(n1,d1, n1+n2,d1+d2);
	fprintf(fout, "%d/%d\n", n1+n2, d1+d2);
	genfrac(n1+n2,d1+d2, n2,d2);
}

void
main(void)
{
	FILE *fin;

	fin = fopen("frac1.in", "r");
	fout = fopen("frac1.out", "w");
	assert(fin != NULL &amp;&amp; fout != NULL);

	fscanf(fin, "%d", &amp;n);

	fprintf(fout, "0/1\n");
	genfrac(0,1, 1,1);
	fprintf(fout, "1/1\n");
}

</pre>
<center>
<a href="http://ace.delos.com/usacogate?a=Ndba0387uwg">USACO Gateway</a>
 | <a href="mailto:kolstad@ace.delos.com">Comment or Question</a>
</center>
</body></html>
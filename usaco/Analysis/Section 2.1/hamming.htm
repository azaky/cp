<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
 <title>Problem 94: Hamming Codes</title> </head><body 
background="hamming_files/bg3.jpg">
<img src="hamming_files/cow1.jpg" width="742" height="118">
<center>
<b><font size="7">Hamming Codes</font></b><br>
<b>Brian Jacokes</b>
</center>

<p>There are only a few tools we need to solve this problem.  First
of all, we can use basic techniques to find the Nth bit of a number
M: counting the least significant bit as bit 0, the next bit as bit
1, etc., we can find the value of that bit through the expression

</p><pre>          int Nth_bit = (1 &lt;&lt; N) &amp; M;
</pre>

In other words, we are shifting the number 1 left by N spaces, and
then performing a binary AND on the resulting number with our
original number, which will leave either a 1 in the Nth bit or a
0.  So the first thing we have to do is find out the distance between
each pair of numbers within the set of all numbers with B bits
(0..2<sup>B</sup>-1).

<p>We also know that 0 can be one of the numbers in the set, because
if the minimum number in the set were N instead of 0, we could XOR
N to each number in the set and they would still be the same distance
apart.  The limits on the problem are low enough that we can do a
DFS, and as soon as we hit a solution we can output it and exit.

</p><pre>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;iostream.h&gt;
#define MAX (1 &lt;&lt; 8 + 1)
#define NMAX 65
#define BMAX 10
#define DMAX 10

int nums[NMAX], dist[MAX][MAX];
int N, B, D, maxval;
FILE *in, *out;

void findgroups(int cur, int start) {
    int a, b, canuse;
    char ch;
    if (cur == N) {
        for (a = 0; a &lt; cur; a++) {
            if (a % 10)
                fprintf(out, " ");
            fprintf(out, "%d", nums[a]);
            if (a % 10 == 9 || a == cur-1)
                fprintf(out, "\n");
        }
        exit(0);
    }
    for (a = start; a &lt; maxval; a++) {
        canuse = 1;
        for (b = 0; b &lt; cur; b++)
            if (dist[nums[b]][a] &lt; D) {
                canuse = 0;
                break;
            }
        if (canuse) {
            nums[cur] = a;
            findgroups(cur+1, a+1);
        }
    }
}

int main() {
    in = fopen("hamming.in", "r");
    out = fopen("hamming.out", "w");
    int a, b, c;
    fscanf(in, "%d%d%d", &amp;N, &amp;B, &amp;D);
    maxval = (1 &lt;&lt; B);
    for (a = 0; a &lt; maxval; a++)
        for (b = 0; b &lt; maxval; b++) {
            dist[a][b] = 0;
            for (c = 0; c &lt; B; c++) 
                if (((1 &lt;&lt; c) &amp; a) != ((1 &lt;&lt; c) &amp; b))
                    dist[a][b]++;
        }
    nums[0] = 0;
    findgroups(1, 1);
    return 0;
}
</pre>
<br><br>
<center>
<a href="mailto:grader@ace.delos.com">Submit Solution via Email</a>
&nbsp;|&nbsp; <a href="http://ace.delos.com/usacogate?a=Ndba0387uwg"> 
USACO Gateway </a>  &nbsp;| &nbsp;
<a href="mailto:kolstad@ace.delos.com">Comment or Question </a>
</center>
</body></html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
 <title>Analysis 10: Castle</title> </head><body 
background="castle_files/bg3.jpg">
<img src="castle_files/cow1.jpg" width="742" height="118">
<center>
<b><font size="7">Castle</font></b><br>
Russ Cox
</center>


<p>We use a simple recursive flood fill to number each room in the
castle, and then look at all the pairs of rooms we can join by
knocking out any wall.  Since we're going to use the westernmost
and then southernmost square, we need only consider knocking out
walls to the north and to the east.

</p><pre>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;assert.h&gt;

#define MAXDIM 50
#define MAXN 100
#define MAXCOLOR 100
#define MAXROOM (MAXDIM*MAXDIM)

enum {
    Wwest = 1,
    Wnorth = 2,
    Weast = 4,
    Wsouth = 8
};

typedef struct Square	Square;
struct Square {
    int wall;
    int numbered;
    int room;
};
 
int wid, ht;
Square castle[MAXDIM][MAXDIM];
int roomsize[MAXROOM];

void
number(int room, int x, int y)
{
    int w;

    if(castle[x][y].numbered) {
	assert(castle[x][y].room == room);
	return;
    }

    castle[x][y].numbered = 1;
    castle[x][y].room = room;
    roomsize[room]++;

    w = castle[x][y].wall;

    if(x &gt; 0 &amp;&amp; !(w &amp; Wwest))
	number(room, x-1, y);

    if(x+1 &lt; wid &amp;&amp; !(w &amp; Weast))
	number(room, x+1, y);

    if(y &gt; 0 &amp;&amp; !(w &amp; Wnorth))
	number(room, x, y-1);

    if(y+1 &lt; ht &amp;&amp; !(w &amp; Wsouth))
	number(room, x, y+1);
}

void
main(void)
{
    FILE *fin, *fout;
    int x, y, w, nroom, bigroom;
    int i, n, m, mx, my;
    char mc;

    fin = fopen("castle.in", "r");
    fout = fopen("castle.out", "w");
    assert(fin != NULL &amp;&amp; fout != NULL);

    fscanf(fin, "%d %d", &amp;wid, &amp;ht);

    /* read in wall info */
    for(y=0; y&lt;ht; y++) {
	for(x=0; x&lt;wid; x++) {
	    fscanf(fin, "%d", &amp;w);
	    castle[x][y].wall = w;
	}
    }

    /* number rooms */
    nroom = 0;
    for(y=0; y&lt;ht; y++)
    for(x=0; x&lt;wid; x++)
	if(!castle[x][y].numbered)
	    number(nroom++, x, y);

    /* find biggest room */
    bigroom = roomsize[0];
    for(i=1; i&lt;nroom; i++)
	if(bigroom &lt; roomsize[i])
	    bigroom = roomsize[i];

    /* look at best that can come of removing an east or north wall */
    m = 0;
    for(x=0; x&lt;wid; x++)
    for(y=ht-1; y&gt;=0; y--) {
	if(y &gt; 0 &amp;&amp; castle[x][y].room != castle[x][y-1].room) {
	    n = roomsize[castle[x][y].room] + roomsize[castle[x][y-1].room];
	    if(n &gt; m) {
		m = n;
		mx = x;
		my = y;
		mc = 'N';
	    }
	}
	if(x+1 &lt; wid &amp;&amp; castle[x][y].room != castle[x+1][y].room) {
	    n = roomsize[castle[x][y].room] + roomsize[castle[x+1][y].room];
	    if(n &gt; m) {
		m = n;
		mx = x;
		my = y;
		mc = 'E';
	    }
	}
    }

    fprintf(fout, "%d\n", nroom);
    fprintf(fout, "%d\n", bigroom);
    fprintf(fout, "%d\n", m);
    fprintf(fout, "%d %d %c\n", my+1, mx+1, mc);
    exit(0);
}
</pre>
<center>
<a href="mailto:grader@ace.delos.com">Submit Solution via Email</a>
&nbsp;|&nbsp; <a href="http://ace.delos.com/usacogate?a=Ndba0387uwg"> 
USACO Gateway </a>  &nbsp;| &nbsp;
<a href="mailto:kolstad@ace.delos.com">Comment or Question </a>
</center>
</body></html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
<title>Search Techniques
</title>
</head><body bgcolor="#f0f0f0">
<font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">
</font><div style="width: 45em; background-color: white; border-style: solid; border-width: 1px; padding: 1em;">
<table cellspacing="8">
   <tbody><tr><td><img src="Search%20Techniques_files/cowhead2.gif"></td>
       <td>&nbsp;&nbsp;&nbsp;</td>
       <td><b><font size="5">
	<font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">
	Search Techniques
</font></font></b></td>
   </tr>
</tbody></table>

<h4><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">Sample Problem: <i>n</i> Queens [Traditional]</font></h4>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">Place <i>n</i> queens on an <i>n  x  n</i> chess board so
that no queen is attacked by another queen.

</font></p><h4><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Depth First Search (DFS) </font></h4>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> The most obvious solution to code is to add queens recursively
to the board one by one, trying all possible queen placements.  It
is easy to exploit the fact that there must be exactly one queen
in each column: at each step in the recursion, just choose where
in the current column to put the queen.

<br>
<tt><font size="2"> <br>
&nbsp;1&nbsp;search(col)<br>
&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;filled&nbsp;all&nbsp;columns<br>
&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;solution&nbsp;and&nbsp;exit&nbsp;<br><br>
&nbsp;4&nbsp;&nbsp;&nbsp;for&nbsp;each&nbsp;row<br>
&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;board(row,&nbsp;col)&nbsp;is&nbsp;not&nbsp;attacked<br>
&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;place&nbsp;queen&nbsp;at&nbsp;(row,&nbsp;col)<br>
&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;search(col+1)<br>
&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;remove&nbsp;queen&nbsp;at&nbsp;(row,&nbsp;col)<br>
</font></tt>

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">Calling <tt><font size="2"> search(0)</font></tt> begins the search.  This
runs quickly, since there are relatively few choices at each step:
once a few queens are on the board, the number of non-attacked
squares goes down dramatically.

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> This is an example of <i>depth first search</i>, because the
algorithm iterates down to the bottom of the search tree as quickly
as possible: once <i>k</i> queens are placed on the board, boards
with even more queens are examined before examining other possible
boards with only <i>k</i> queens.  This is okay but sometimes it
is desirable to find the simplest solutions before trying more
complex ones.

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Depth first search checks each node in a search tree for some
property.  The search tree might look like this:

<br><img src="Search%20Techniques_files/rec.gif"><br>

The algorithm searches the tree by going down as far as possible
and then backtracking when necessary, making a sort of outline of
the tree as the nodes are visited.

Pictorially, the tree is traversed in the following manner:

<br><img src="Search%20Techniques_files/rec2.gif"><br>

</font></p><h5><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">Complexity</font></h5>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Suppose there are <i>d</i> decisions that must be made.  (In
this case <i>d=n</i>, the number of columns we must fill.) Suppose
further that there are C choices for each decision.  (In this case
<i>c=n</i> also, since any of the rows could potentially be chosen.)
Then the entire search will take time proportional to <i>c<sup>d</sup></i>,
i.e., an exponential amount of time.  This scheme requires little
space, though: since it only keeps track of as many decisions as
there are to make, it requires only O(<i>d</i>) space.

</font></p><h4><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">Sample Problem: Knight Cover [Traditional]</font></h4>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Place as few knights as possible on an <i>n  x  n</i> chess
board so that every square is attacked.  A knight is not considered
to attack the square on which it sits.

</font></p><h5><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">Breadth First Search (BFS)</font></h5>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> In this case, it is desirable to try all the solutions with
only <i>k</i> knights before moving on to those with <i>k+1</i> knights.
This is called <b>breadth first search</b>.  The usual way to
implement breadth first search is to use a queue of states:

<br>
<tt><font size="2"> <br>
&nbsp;1&nbsp;process(state)<br>
&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;each&nbsp;possible&nbsp;next&nbsp;state&nbsp;from&nbsp;this&nbsp;one<br>
&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enqueue&nbsp;next&nbsp;state&nbsp;<br><br>
&nbsp;4&nbsp;search()<br>
&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enqueue&nbsp;initial&nbsp;state<br>
&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;!empty(queue)<br>
&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state&nbsp;=&nbsp;get&nbsp;state&nbsp;from&nbsp;queue<br>
&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;process(state)<br>
</font></tt>

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> This is called breadth first search because it searches an
entire row (the breadth) of the search tree before moving on to
the next row.  For the search tree used previously, breadth first
search visits the nodes in this order:

<br><img src="Search%20Techniques_files/rec3.gif"><br>

It first visits the top node, then all the nodes at level 1, then
all at level 2, and so on.

</font></p><h5><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">Complexity</font></h5>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">Whereas depth first search required space proportional to the
number of decisions (there were <i>n</i> columns to fill in the
<i>n</i> queens problem, so it took O(<i>n</i>) space), breadth
first search requires space exponential in the number of choices.
</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">If there are <i>c</i> choices at each decision and <i>k</i>
decisions have been made, then there are <i>c <sup> k</sup></i>
possible boards that will be in the queue for the next round.  This
difference is quite significant given the space restrictions of
some programming environments.
</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">[Some details on why <i>c<sup>k</sup>: Consider the nodes in the
recursion tree.  The zeroeth level has 1 nodes.  The first level
has c nodes.  The second level has c<sup>2</sup> nodes, etc.  Thus,
the total number of nodes on the k-th level is c<sup>k</sup></i>.]

</font></p><h5><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">Depth First with Iterative Deepening (ID)</font></h5>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> An alternative to breadth first search is <i>iterative
deepening</i>.  Instead of a single breadth first search, run D
depth first searches in succession, each search allowed to go one
row deeper than the previous one.  That is, the first search is
allowed only to explore to row 1, the second to row 2, and so on.
This ``simulates'' a breadth first search at a cost in time but a
savings in space.

<br>
<tt><font size="2"> <br>
&nbsp;1&nbsp;truncated_dfsearch(hnextpos,&nbsp;depth)<br>
&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;board&nbsp;is&nbsp;covered<br>
&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;solution&nbsp;and&nbsp;exit&nbsp;<br><br>
&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;depth&nbsp;==&nbsp;0<br>
&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;<br><br>
&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;from&nbsp;nextpos&nbsp;to&nbsp;n*n<br>
&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;put&nbsp;knight&nbsp;at&nbsp;i<br>
&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;truncated_dfsearch(i+1,&nbsp;depth-1)<br>
&nbsp;9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;remove&nbsp;knight&nbsp;at&nbsp;i&nbsp;<br><br>
10&nbsp;dfid_search<br>
11&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;depth&nbsp;=&nbsp;0&nbsp;to&nbsp;max_depth<br>
12&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;truncated_dfsearch(0,&nbsp;depth)<br>
</font></tt>

</font></p><h5><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">Complexity</font></h5>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> The space complexity of iterative deepening is just the space
complexity of depth first search: O(<i>n</i>).  The time complexity,
on the other hand, is more complex.  Each truncated depth first
search stopped at depth <i>k</i> takes <i>c<sup>k</sup></i> time.
Then if <i>d</i> is the maximum number of decisions, depth first
iterative deepening takes <i>c<sup>0</sup> + c<sup>1</sup>
+ c<sup>2</sup> + ... + c<sup>d</sup></i> time.

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> If <i>c = 2</i>, then this sum is <i>c<sup>d+1</sup> - 1</i>,
about twice the time that breadth first search would have taken.
When <i>c</i> is more than two (i.e., when there are many choices
for each decision), the sum is even less: iterative deepening cannot
take more than twice the time that breadth first search would have
taken, assuming there are always at least two choices for each
decision.

</font></p><h4><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">Which to Use?</font></h4>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Once you've identified a problem as a search problem, it's
important to choose the right type of search.  Here are some things
to think about.

</font></p><h5><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">In a Nutshell </font></h5>

<center>
<table>
<tbody><tr><td>Search</td> <td>Time</td> <td>Space</td> <td>When to use</td></tr>
<tr><td>DFS</td> <td>O(<i>c<sup>k</sup></i>)</td><td>O(<i>k</i>)</td><td>Must search tree anyway, know the level the answers are on, or
you aren't looking for the shallowest number.</td></tr>
<tr><td>BFS</td> <td>O(<i>c<sup>d</sup></i>)</td><td>O(<i>c<sup>d</sup></i>)</td> <td>Know answers are very near top of tree, or want shallowest answer.</td></tr>
<tr><td>DFS+ID</td> <td>O(<i>c<sup>d</sup></i>)</td> <td>O(<i>d</i>)</td> <td>Want to do BFS, don't have enough space, and can spare the time.</td></tr>
</tbody></table>
</center>

<font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"><i>d</i> is the depth of the answer
<br>

<i>k</i> is the depth searched
<br>

<i>d &lt;= k</i>

</font><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Remember the ordering properties of each search.  If the
program needs to produce a list sorted shortest solution first
(in terms of distance from the root node), use breadth first search
or iterative deepening.  For other orders, depth first search is
the right strategy.

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> If there isn't enough time to search the entire tree, use the
algorithm that is more likely to find the answer.  If the answer
is expected to be in one of the rows of nodes closest to the root,
use breadth first search or iterative deepening.  Conversely, if
the answer is expected to be in the leaves, use the simpler depth
first search.

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Be sure to keep space constraints in mind.  If memory is
insufficient to maintain the queue for breadth first search but
time is available, use iterative deepening.

</font></p><h4><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">Sample Problems</font></h4>

<h5><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">Superprime Rib [USACO 1994 Final Round, adapted]</font></h5>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> A number is called superprime if it is prime and every number
obtained by chopping some number of digits from the right side of
the decimal expansion is prime.  For example, 233 is a superprime,
because 233, 23, and 2 are all prime.  Print a list of all the
superprime numbers of length <i>n</i>, for <i>n &lt;= 9</i>.  The
number 1 is not a prime.

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> For this problem, use depth first search, since all the answers
are going to be at the <i>n</i>th level (the bottom level) of the
search.

</font></p><h5><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">Betsy's Tour [USACO 1995 Qualifying Round]</font></h5>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">A square township has been partitioned into <i>n <sup> 2</sup></i>
square plots.  The Farm is located in the upper left plot and the
Market is located in the lower left plot.  Betsy takes a tour of
the township going from Farm to Market by walking through every
plot exactly once.  Write a program that will count how many unique
tours Betsy can take in going from Farm to Market for any value of
<i>n &lt;= 6</i>.

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Since the number of solutions is required, the entire tree must
be searched, even if one solution is found quickly.  So it doesn't
matter from a time perspective whether DFS or BFS is used.  Since
DFS takes less space, it is the search of choice for this problem.

</font></p><h5><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">Udder Travel [USACO 1995 Final Round; Piele]</font></h5>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> The Udder Travel cow transport company is based at farm A and
owns one cow truck which it uses to pick up and deliver cows between
seven farms A, B, C, D, E, F, and G.  The (commutative) distances
between farms are given by an array.  Every morning, Udder Travel
has to decide, given a set of cow moving orders, the order in which
to pick up and deliver cows to minimize the total distance traveled.
Here are the rules:

</font></p><ul>

<font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"><li>The truck always starts from the headquarters at farm A and must return
there when the day's deliveries are done.</li>

<li>The truck can only carry one cow at a time.</li>

<li>The orders are given as pairs of letters denoting where a cow is to be
picked up followed by where the cow is to be delivered.</li>

</font></ul>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Your job is to write a program that, given any set of orders,
determines the shortest route that takes care of all the deliveries,
while starting and ending at farm A.

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Since all possibilities must be tried in order to ensure the
best one is found, the entire tree must be searched, which takes
the same amount of time whether using DFS or BFS.  Since DFS uses
much less space and is conceptually easier to implement, use that.

</font></p><h5><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">Desert Crossing [1992 IOI, adapted]</font></h5>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> A group of desert nomads is working together to try to get one
of their group across the desert.  Each nomad can carry a certain
number of quarts of water, and each nomad drinks a certain amount
of water per day, but the nomads can carry differing amounts of
water, and require different amounts of water.  Given the carrying
capacity and drinking requirements of each nomad, find the minimum
number of nomads required to get at least one nomad across the
desert.

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> All the nomads must survive, so every nomad that starts out
must either turn back at some point, carrying enough water to get
back to the start or must reach the other side of the desert.
However, if a nomad has surplus water when it is time to turn back,
the water can be given to their friends, if their friends can carry
it.

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Analysis: This problem actually is two recursive problems: one
recursing on the set of nomads to use, the other on when the nomads
turn back.  Depth-first search with iterative deepening works well
here to determine the nomads required, trying first if any one can
make it across by themselves, then seeing if two work together to
get across, etc.

</font></p><h5><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">Addition Chains</font></h5>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> An addition chain is a sequence of integers such that the first
number is 1, and every subsequent number is the sum of some two
(not necessarily unique) numbers that appear in the list before
it.  For example, 1 2 3 5 is such a chain, as 2 is 1+1, 3 is 2+1,
and 5 is 2+3.  Find the minimum length chain that ends with a given
number.

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Analysis: Depth-first search with iterative deepening works
well here, as DFS has a tendency to first try 1 2 3 4 5 ... n,
which is really bad and the queue grows too large very quickly for
BFS.
</font></p></div><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"><br>
</font><center>
<font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"><a href="http://ace.delos.com/usacogate?a=AkpRTW42B7l">USACO Gateway</a> | <a href="mailto:kolstad@ace.delos.com">Comment or Question</a>
</font></center>
</body></html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
<title>Optimization
</title>
</head><body bgcolor="#f0f0f0">
<font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">
</font><div style="width: 45em; background-color: white; border-style: solid; border-width: 1px; padding: 1em;">
<table cellspacing="8">
   <tbody><tr><td><img src="Optimization_files/cowhead2.gif"></td>
       <td>&nbsp;&nbsp;&nbsp;</td>
       <td><b><font size="5">
	<font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">
	Optimization
</font></font></b></td>
   </tr>
</tbody></table>

<h4><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> What is Optimization? </font></h4>

<h5><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Making Working Code Faster  </font></h5>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Note <i>working</i>. Until a program works, do not try to make
it faster, as debugging is then more complicated.  Also, before
making any change for optimization reasons (instead of debugging
reasons), make a backup of the working code.  There's nothing more
painful then figuring out three optimizations deep that the first
optimization broke the program, and no backup exists.

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> This module will focus on ways to speed programs without altering
the program's algorithm.  If there's a faster algorithm, that's
where effort should be focused, not on making a slow algorithm run
a little less slow, which is much like putting perfume on a pig.

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> In particular, this module will only discuss ways to make a
recursive descent program run more quickly, by trying to avoid
searching the entire tree.  This methodology is referred to as
<i>pruning</i> the search.

</font></p><h4><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">A Problem: Chains </font></h4>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> This is a slight adaptation of a real-world problem in compilers,
although in that world, only multiplication is available.

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Suppose a program must find <i>x<sup>n</sup></i> exactly (no
log/exp) and the two standard operations, multiplication and divide,
are available.  What is the minimal number of these operations
required? Show the list (in order) of powers of <i>x</i> that can be
calculated in order to find <i>x<sup>n</sup></i>.

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> For this explication, the calculations will be represented in
terms only of the exponent.  Multiplication will be written as
addition (or the sum of two previous powers), division as subtraction
(or the difference of two previous powers).  For legal chains, each
entry must be either the sum or difference of some two previous
entries.  So, calculating <i>x</i><sup>8</sup> would be represented
as: 1 2 4 8 (three entries beyond the initial `1'); calculating
<i>x</i><sup>15</sup> might be represented as: 1 2 4 8 16 15.

</font></p><h5><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">Test Set #1</font></h5>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Consider the data set requiring successive calculation of all
the possible powers for the exponents 1..50 (not all at once - 50
different test cases).  All timings are for a 233 MHz Pentium II.

</font></p><h5><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">A Basic Algorithm</font></h5>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Start with the set {1}, perform a depth-first search on
generatable numbers (Note that to make this even close to reasonable,
the pairs will be chosen in reverse order, that is start with adding
the last number in the current sequence to itself, then adding to
the previous number, then the difference between the last two in
the sequence, etc.)

</font></p><h5><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> What's Wrong With This? </font></h5>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> It will never terminate.

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> So, change the algorithm to prune when considering a list that
is longer than the best list found thus far.  Assume the maximum
length chain is 32 steps (a true statement, for exponents up to
65536, but unproven; the assumption will be removed later).

</font></p><p>
<font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">Runtime for sample implementation: 4658.34 seconds.

</font></p><h4><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">Optimization Basics</font></h4>

<h5><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">Prune Early, Prune Often</font></h5>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Consider: in a tree of fan-out only 2, getting rid of just two
levels everywhere on that tree reduces the number of nodes by a
factor of almost 4.

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Two basic ideas signal the way to make searching programs faster:

</font></p><ul>

<font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"><li>Don't Do Anything Stupid</li>

<li>Don't Do Anything Twice</li>

</font></ul>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> The problem is figuring out what is being done twice and what
steps are stupid. All of the optimizations discussed here will
utilize some basic fact of the search space. Make sure that the
fact is true!

</font></p><h4><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">Improving Chain Production </font></h4>

<h5><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">Observation #1</font></h5>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> There is one easy way to come up with the numbers, or at least
an upper bound. Examine the binary representation of the number.
Produce all the powers of 2 up to <i>n</i>, and then add up those
that that the binary representation suggests.  (It is possible to
do a little better than this using subtractions, but that won't
matter in the long run).  Use this scheme to initialize the ``best
answer'' data, so time is not spent searching for very long answers.

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> For example, 43 is 101011 in base 2.  Thus, the sequence would
start 1, 2, 4, 8, 16, 32.  Now, add the ones in the base 2
representation, so 1 + 2 = 3 would be the next number, then 3 + 8
= 11, then 11 + 32 = 43.  This yields a sequence of length 9: 1,
2, 4, 8, 16, 32, 3, 11, 43.

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Runtime: 4609.81 seconds.

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Evaluation: This is just barely OK as optimizations go. It was
fairly easy to code, and it did get rid of an unproven assumption,
but didn't really buy much in the long run.

</font></p><h5><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">Observation #2</font></h5>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Negative numbers are silly. Don't produce them as a new number
in the sequence, as that's a ``stupid'' thing to do.  Let's say
the first negative number in the sequence is the number -42.
Obviously -42 was constructed as the difference of two previous
elements, so 42 could be constructed just as easily, and it could
be used instead of -42 every time 42 was used.  Of course, it would
be even better if the code were written never to encounter -42.

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> New runtime: 387.34 seconds 

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Zero's are even sillier.  Creating a silly answer doesn't give
you any more ``power.''  Assume the shortest sequence contains a
zero.  Obviously, if the zero wasn't used in a later operation, it
could be dropped from the sequence, resulting a shorter valid
solution, so it must have been used.  However adding zero and
subtracting zero from some value does produces that same value, so
any number produced in such a manner could also be dropped.  The
third alternative, subtract a value from zero results in a negative
number, which as noted above, isn't helpful either. Thus, a zero
will not be in the shortest sequence.

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> New runtime: 43.24 seconds 

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Evaluation: Two simple observations have reduced our runtime
by a factor of 100.  These are easy to code and give great
improvements, the very embodiment of excellent optimizations.

</font></p><h5><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">Observation #3</font></h5>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> In a single step, the largest possible generate-able integer
is exactly double the maximum integer generated so far.  Thus, if
the maximum achieved so far times 2^(number of steps left until we
reach the best found thus far) is less than the goal, there is no
hope. Stop now.

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Runtime: 0.15 seconds

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Evaluation: This was moderately difficult to code, but bought
a factor of 300 in runtime, so it was definitely worth it, assuming
the contest coding time was available and the problem was running
over the time limit.

</font></p><h5><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">Test Set Update</font></h5>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">The most recent test set runs really quickly, so it's time to
make the data set harder. On the new test data set of all powers
from 1 to 300, the runtime is 93.21 seconds.

</font></p><h5><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">Observation #4</font></h5>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Why not do depth-first search with iterative deepening?  The
branching factor for this search is very large and grows quadratically
as the depth increases, so the additional overhead is very small.

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Runtime: 93.05 seconds

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Evaluation: In this case, a poor optimization (by itself; things
will improve later). It required quite a bit of code change, with
a large chance of error, and yielded effectively nothing. This is
pretty surprising, as DFSID generally helps immensely.

</font></p><h5><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">Observation #5</font></h5>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> The most recent operation must use the next-to-last number
created. If it didn't, why bother generating that number? (Note
that this assumes the DFSID algorithm.)

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Runtime: 7.47 seconds

</font></p><h5><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Observation #6</font></h5>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Never duplicate a number in the list.

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Runtime: 3.40 seconds 

</font></p><h5><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Status Check </font></h5>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Thus far, other than adding depth-first search with iterative
deepening, only the ``Don't Do Anything Stupid'' rule has been
used, and and the execution time has decreased by an estimated
factor of 842,510. That's decent, but probably can be improved.

</font></p><h5><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">Test set update</font></h5>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> New data set of 1 to 500. Runtime: 206.71 seconds

</font></p><h5><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">Observation #7</font></h5>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> If a number is to be placed at the end of a sub-prefix chain
that is searched completely finding no answer, then adding that
same number later doesn't help. For example, if 1 2 4 8 7 ...
doesn't work,there's no reason to try 1 2 4 8 16 7 ... later.

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Runtime: 53.70 seconds

</font></p><h5><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">Observation #8</font></h5>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> If the first number selected is i, and the largest number in the
sequence is j, then if i + j is less than the minimum next number
needed, there's no way to produce it using i.

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Runtime: 44.52 seconds

</font></p><h5><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">Observation #9</font></h5>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> If there a chain that produces x (where x is not the goal) in
j steps, but there exists a sequence or length smaller than j which
produces that same number, we can just replace that sequence with
the shorter one, and obtain a ``better'' sequence, so any chain
starting with this longer chain can't be optimal.

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> WRONG!

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> First counterexample: 10,127. This hypothesis yields a chain
of 17 steps, when one of 16 steps exists.

</font></p><p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> This is the risk of optimizations: sometimes, they'll be based
on incorrect facts.  Make sure that you don't fall into this trap.

</font></p><h5><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Conclusion</font></h5>

<p><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"> Eight optimizations yielded a total improvement factor of around
4 million. Additional changes can improve this beyond 44.52 seconds
for 1 to 500.  One good implementation takes 1.91 seconds, when
limited to 640k of memory (0.85 seconds without).  See how fast
you can make your program.
</font></p></div><font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"><br>
</font><center>
<font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans"><a href="http://ace.delos.com/usacogate?a=IbZM9hoLG9M">USACO Gateway</a> | <a href="mailto:kolstad@ace.delos.com">Comment or Question</a>
</font></center>
</body></html>
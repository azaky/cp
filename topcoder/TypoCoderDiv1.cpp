#include <vector>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <algorithm>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
using namespace std;

//type definitions

//abbreviations
#define PB push_back

//macros
#define MX(a,b) a = max((a),(b));
#define MN(a,b) a = min((a),(b));

/* -------------- end of azaky's template -------------- */

class TypoCoderDiv1 {
public:
	int n, initial_rating, v[55][2222], dp[55][2222];
	vector<int> r;
	int getmax(vector <int> D, int X) {
		n = D.size();
		initial_rating = X;
		r.clear();
		r.PB(0);
		for (int i = 0; i < n; ++i) r.PB(D[i]);
		
		//for (int i = 1; i <= n; ++i) printf("[%d]\n",r[i]);
		
		for (int i = 0; i <= n; ++i){
			for (int j = 0; j < 2200; ++j){
				v[i][j] = 0;
			}
		}
		
		//RESET(v,0);
		
		//last ciel
		int ans = 0;
		for (int i = 0; i < 2200; ++i){
			MX(ans, change(n, i));
		}
		//last-1 ciel
		for (int i = 0; i < 2200; ++i){
			MX(ans, change(n-1, i) + (i + r[n] >= 2200));
		}
		
		return ans;
	}
	int change(int pos, int rating) {
		/* basis */
		if (pos == 0){
			if (rating == initial_rating) return 0;
			return -1;
		}
		if (rating < 0 || rating > 2199) return -1;
		if (v[pos][rating]) return dp[pos][rating];
		v[pos][rating] = 1;
		
		int ret = -1;
		//++
		MX(ret, change(pos-1,rating - r[pos]));
		//--
		MX(ret, change(pos-1, rating + r[pos]));
		if (rating == 0){
			for (int i = 0; i <= r[pos] && i < 2200; ++i){
				MX(ret, change(pos-1,i));
			}
		}
		//++--
		if (pos > 1){
			if (rating == 0) {
				for (int i = 0; i < 2200; ++i){
					if (i + r[pos-1] >= 2200 && i + r[pos-1] - r[pos] <= 0){
						if (change(pos-2, i) != -1){
							MX(ret, change(pos-2, i) + 2);
						}
					}
				}
			}
			else {
				if (rating + r[pos] >= 2200){
					int prev = rating + r[pos] - r[pos-1];
					if (change(pos-2,prev) != -1){
						MX(ret, change(pos-2,prev) + 2);
					}
				}
			}
		}
		
		//if (ret != -1) printf("change[%d][%d] = %d\n",pos,rating,ret);
		
		return dp[pos][rating] = ret;
	}
};
 
 
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	TypoCoderDiv1 *obj;
	int answer;
	obj = new TypoCoderDiv1();
	clock_t startTime = clock();
	answer = obj->getmax(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	int p1;
	int p2;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {100,200,100,1,1};
	p1 = 2000;
	p2 = 3;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {0,0,0,0,0};
	p1 = 2199;
	p2 = 0;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {90000,80000,70000,60000,50000,40000,30000,20000,10000};
	p1 = 0;
	p2 = 1;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {1000000000,1000000000,10000,100000,2202,1};
	p1 = 1000;
	p2 = 4;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {2048,1024,5012,256,128,64,32,16,8,4,2,1,0};
	p1 = 2199;
	p2 = 0;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

#include <cstdio>
#include <cstdlib>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;

class ChocolateDividingEasy {
public:
	int findBest(vector <string> chocolate) {
		int r = chocolate.size();
		int c = chocolate[0].length();
		int sum[55][55];
		for (int i = 0; i <= r; ++i) {
			for (int j = 0; j <= c; ++j) {
				if (i == 0 || j == 0) {
					sum[i][j] = 0;
				} else {
					sum[i][j] = (chocolate[i-1][j-1] - '0') + sum[i-1][j] + sum[i][j-1] - sum[i-1][j-1];
				}
			}
		}
		int ret = 0;
		for (int ra = 1; ra < r; ++ra) {
			for (int rb = ra + 1; rb < r; ++rb) {
				for (int ca = 1; ca < c; ++ca) {
					for (int cb = ca + 1; cb < c; ++cb) {
						int ans[9];
						ans[0] = sum[ra][ca];
						ans[1] = sum[rb][ca] - ans[0];
						ans[2] = sum[r][ca] - sum[rb][ca];
						ans[3] = sum[ra][cb] - ans[0];
						ans[4] = sum[rb][cb] - sum[rb][ca] - ans[3];
						ans[5] = sum[r][cb] - sum[rb][cb] - ans[2];
						ans[6] = sum[ra][c] - sum[ra][cb];
						ans[7] = sum[rb][c] - sum[rb][cb] - ans[6];
						ans[8] = sum[r][c] - sum[rb][c] - sum[r][cb] + sum[rb][cb];
						ret = max(ret, *min_element(ans, ans + 9));
					}
				}
			}
		}
		return ret;
	}
};


//// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	ChocolateDividingEasy *obj;
	int answer;
	obj = new ChocolateDividingEasy();
	clock_t startTime = clock();
	answer = obj->findBest(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <string> p0;
	int p1;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {"9768","6767","5313"};
	p1 = 3;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {"36753562","91270936","06261879","20237592","28973612","93194784"};
	p1 = 15;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {"012","345","678"};
	p1 = 0;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!

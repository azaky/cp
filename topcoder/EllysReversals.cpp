#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class EllysReversals {
public:
	bool match(string a, string b){
		int n = a.length();
		if (b.length() != n) return false;
		if (n % 2 == 1 && a[n-1] != b[n-1]) return false;
		vector<pair<char,char> > pairA, pairB;
		if (n % 2 == 1) n --;
		for (int i=0; i < n; i += 2){
			pair<char,char> A = make_pair(a[i],a[i+1]);
			if (A.first > A.second) swap(A.first,A.second);
			pairA.push_back(A);
		}
		for (int i=0; i < n; i += 2){
			pair<char,char> B = make_pair(b[i],b[i+1]);
			if (B.first > B.second) swap(B.first,B.second);
			pairB.push_back(B);
		}
		sort(pairA.begin(),pairA.end());
		sort(pairB.begin(),pairB.end());
		return pairA == pairB;
	}
	
	vector<int> adj[55];
	int size, visit[55];
	
	void fill(int v){
		if (visit[v]) return;
		size++;
		visit[v] = 1;
		for (int i=0; i < (int) adj[v].size(); ++i) fill(adj[v][i]);
	}
	
	int getMin(vector <string> words) {
		int n = words.size();
		int ans = 0;
		
		for (int i=0; i < n; ++i){
			for (int j=0; j < n; ++j){
				if (i == j) continue;
				if (match(words[i],words[j])) adj[i].push_back(j);
			}
		}
		
		for (int i=0; i < n; ++i) visit[i] = 0;
		
		for (int i=0; i < n; ++i){
			if (visit[i]) continue;
			size = 0;
			fill(i);
			if (size % 2 != 0) ans ++;
		}
		
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	EllysReversals *obj;
	int answer;
	obj = new EllysReversals();
	clock_t startTime = clock();
	answer = obj->getMin(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"esprit","god","redotopc","odcpoter","dog"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"no","zaphod","just","very","improbable"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"rats","live","stressed","to","act","as","star","desserts","of","evil","cat","sa","fo","ot"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"topcoder","redocpot","doretopc","cpotdoer","harlemshake"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"iprlzgukfggzg","bmhxvjbrtkbxy","khapjiabbny","nqlwgmcyvdikt","nxromtvtpug","leealcapovm","ushnxwjczczbmd","bwhykzupcux","xrlboyuwlnsp","bbjoketeheezfs","dxfztrldomjqkv","dkbktqdtgfujcut","zfybzyuxgpnt","ffmsldrdftode","vopuufksxd","pqhbsiujwda","yhwbkzupcux","hkbabnapjiy","zqsqefrrzehtxn","yovinyguyudmv"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 16;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

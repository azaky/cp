#include <vector>
#include <algorithm>
#include <cstdio>
#include <cmath>
#include <cstdlib>
using namespace std;

//macros
#define REP(i,n) for (int i = 0; i < (n); ++i)

class KeyDungeonDiv1 {
public:
	struct hoho{
		int r, g, w;
	} d[5000];
	int n, ans, v[5000];
	vector <int> doorR, doorG, roomR, roomG, roomW;
	
	void open2(int mask){
		if (v[mask]) return;
		v[mask] = 1;
		d[mask].w = -1;
		REP(i,n){
			if ((mask & (1 << i)) == 0) continue;
			int s = mask ^ (1 << i);
			open2(s);
			int r = d[s].r, g = d[s].g, w = d[s].w;
			if (max(0,doorR[i]-r) + max(0,doorG[i]-g) > w) continue;
			if (w-(max(0,doorR[i]-r)+max(0,doorG[i]-g))+roomW[i] > d[mask].w){
				d[mask].r = max(0,r-doorR[i])+roomR[i];
				d[mask].g = max(0,g-doorG[i])+roomG[i];
				d[mask].w = w-(max(0,doorR[i]-r)+max(0,doorG[i]-g))+roomW[i];
			}
		}
	}
	
	void open(int mask, int r, int g, int w){
		if (v[mask]) return;
//		printf("open %d with R = %d, G = %d, W = %d\n",mask,r,g,w);
		v[mask] = 1;
		if (r + g + w > ans) ans = r + g + w;
		REP(i,n){
			if (mask & (1 << i)) continue;
			if (max(0,doorR[i]-r)+max(0,doorG[i]-g) > w) continue;
			open(mask | (1 << i), max(0,r-doorR[i])+roomR[i], max(0,g-doorG[i])+roomG[i], w-(max(0,doorR[i]-r)+max(0,doorG[i]-g))+roomW[i]);
		}
	}
	
	int maxKeys(vector <int> _doorR, vector <int> _doorG, vector <int> _roomR, vector <int> _roomG, vector <int> _roomW, vector <int> keys) {
		doorR = _doorR; doorG = _doorG; roomR = _roomR; roomG = _roomG; roomW = _roomW;
		n = doorR.size(); ans = 0;
		REP(i,(1<<n)) v[i] = 0;
		v[0] = 1; d[0].r = keys[0]; d[0].g = keys[1]; d[0].w = keys[2];
		REP(i,(1<<n)){
			open2(i);
			if (d[i].w != -1) if (d[i].r + d[i].g + d[i].w > ans) ans = d[i].r + d[i].g + d[i].w;
		}

		return ans;
	}
};
 
 
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, vector <int> p3, vector <int> p4, vector <int> p5, bool hasAnswer, int p6) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p4.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p4[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p5.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p5[i];
	}
	cout << "}";
	cout << "]" << endl;
	KeyDungeonDiv1 *obj;
	int answer;
	obj = new KeyDungeonDiv1();
	clock_t startTime = clock();
	answer = obj->maxKeys(p0, p1, p2, p3, p4, p5);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p6 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p6;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	vector <int> p2;
	vector <int> p3;
	vector <int> p4;
	vector <int> p5;
	int p6;
	
	{
	// ----- test 0 -----
	int t0[] = {1,2,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,4,9};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0,0,10};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {0,8,9};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {1,0,8};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {3,1,2};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	p6 = 8;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1,1,1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,2,3,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {2,1,0,4};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {1,3,3,1};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {1,0,2,1};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {0,4,0};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	p6 = 4;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {2,0,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {3,0,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0,0,9};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {0,0,9};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {8,5,9};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {0,0,0};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	p6 = 27;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {5,3,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,1,2,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0,9,2,4};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {2,9,2,0};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {0,9,1,1};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {1,1,0};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	p6 = 32;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {9,5,10,8,4,3,0,8,4,1,3,9};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {9,10,0,8,9,4,3,8,1,8,10,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,2,0,2,3,3,5,3,1,3,0,5};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {5,2,5,0,5,2,3,4,0,0,5,2};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {1,5,1,2,0,4,4,0,3,3,1,3};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {5,0,1};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	p6 = 16;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

#include <vector>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <algorithm>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
using namespace std;

#ifdef DEBUG
	#define debug(...) printf(__VA_ARGS__)
	#define GetTime()	printf("Running time: %.3lf second\n",((double)clock())/CLOCKS_PER_SEC)
#else
	#define debug(...) 
	#define GetTime() 
#endif

//type definitions
typedef double db;
typedef pair<int,int> pii;

//abbreviations
#define A first
#define B second
#define MP make_pair
#define PB push_back
#define LLD "%I64d"

//macros
#define REP(i,n) for (int i = 0; i < (n); ++i)
#define REPD(i,n) for (int i = (n)-1; 0 <= i; --i)
#define FOR(i,a,b) for (int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for (int i = (a); (b) <= i; --i)
#define FORIT(it,c) for (__typeof ((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define ALL(a) (a).begin(),(a).end()
#define SZ(a) ((int)(a).size())
#define RESET(a,x) memset(a,x,sizeof(a))
#define EXIST(a,s) ((s).find(a) != (s).end())
#define MX(a,b) a = max((a),(b));
#define MN(a,b) a = min((a),(b));

/* -------------- end of azaky's template -------------- */

#define MAXN 200100
long long X[MAXN], Y[MAXN];
pair<long long, long long> a[MAXN];

class PilingRectsDiv1 {
public:
	long long getmax(int N, vector <int> XS, vector <int> YS, int XA, int XB, int XC, int YA, int YB, int YC) {
		
		for (int i = 0; i < (int)XS.size(); i++) {
    		X[i] = XS[i];
   			Y[i] = YS[i];
		}
		for (int i = (int)XS.size(); i < 2 * N; i++) {
    		X[i] = (X[i - 1] * XA + XB) % XC + 1;
    		Y[i] = (Y[i - 1] * YA + YB) % YC + 1;
		}
		int n = N;
		for (int i = 0; i < 2 * n; ++i){
			if (X[i] < Y[i]) a[i] = MP(X[i],Y[i]);
			else a[i] = MP(Y[i],X[i]);
		}
		sort(a,a+n+n);
		
		multiset<long long> ll, rr;
		for (int i = 0; i < n; ++i) {
			ll.insert(a[i].B);
			rr.insert(a[i + n].B);
		}
		long long ans = (*(ll.begin()) * a[0].A) + (*(rr.begin()) * a[n].A);
		for (int i = n - 1; i >= 0; --i) {
			long long minr = *(rr.begin());
			rr.erase(rr.begin());
			ll.erase(ll.find(a[i].B));
			ll.insert(minr);
			rr.insert(a[i].B);
			if (i) MX(ans, (*(ll.begin()) * a[0].A) + (*(rr.begin()) * a[i].A));
		}
		ll.clear(); rr.clear();
		for (int i = 0; i < 2 * n; ++i) {
			swap(a[i].A, a[i].B);
		}
		sort(a,a+n+n);
		for (int i = 0; i < n; ++i) {
			ll.insert(a[i].B);
			rr.insert(a[i + n].B);
		}
		MX(ans, (*(ll.begin()) * a[0].A) + (*(rr.begin()) * a[n].A));
		for (int i = n - 1; i >= 0; --i) {
			long long minr = *(rr.begin());
			rr.erase(rr.begin());
			ll.erase(ll.find(a[i].B));
			ll.insert(minr);
			rr.insert(a[i].B);
			if (i) MX(ans, (*(ll.begin()) * a[0].A) + (*(rr.begin()) * a[i].A));
		}
		return ans;
	}
};
 /*
 1  2  3  4
 10 5  3  5
 
 3  5  5  10
 3  2  4   1
 
 {3, 2}, {1, 4}
 {1, 3}, {2, 4}
 
 */
 
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, vector <int> p2, int p3, int p4, int p5, int p6, int p7, int p8, bool hasAnswer, long long p9) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << p3 << "," << p4 << "," << p5 << "," << p6 << "," << p7 << "," << p8;
	cout << "]" << endl;
	PilingRectsDiv1 *obj;
	long long answer;
	obj = new PilingRectsDiv1();
	clock_t startTime = clock();
	answer = obj->getmax(p0, p1, p2, p3, p4, p5, p6, p7, p8);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p9 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p9;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <int> p1;
	vector <int> p2;
	int p3;
	int p4;
	int p5;
	int p6;
	int p7;
	int p8;
	long long p9;
	
	{
	// ----- test 0 -----
	p0 = 2;
	int t1[] = {1,2,3,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {10,5,3,5};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 0;
	p4 = 0;
	p5 = 1;
	p6 = 0;
	p7 = 0;
	p8 = 1;
	p9 = 14ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, p6, p7, p8, true, p9) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	int t1[] = {7,7};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {4,4};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 9;
	p4 = 0;
	p5 = 10;
	p6 = 2;
	p7 = 7;
	p8 = 9;
	p9 = 56ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, p6, p7, p8, true, p9) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 3;
	int t1[] = {5,6,9,10,4,7};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {9,5,8,6,8,7};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 0;
	p4 = 0;
	p5 = 1;
	p6 = 0;
	p7 = 0;
	p8 = 1;
	p9 = 69ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, p6, p7, p8, true, p9) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 10000;
	int t1[] = {1000000000};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1000000000};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 93827162;
	p4 = 91238127;
	p5 = 98231267;
	p6 = 92138287;
	p7 = 98563732;
	p8 = 99381279;
	p9 = 1240119561532788ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, p6, p7, p8, true, p9) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 5;
	int t1[] = {375,571,973,896,460,930,583,530,657,590};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {284,37,994,699,941,745,166,884,270,708};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 428;
	p4 = 1000;
	p5 = 788;
	p6 = 851;
	p7 = 125;
	p8 = 894;
	p9 = 420515ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, p6, p7, p8, true, p9) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 34734;
	int t1[] = {898,579,465,665,875,391,583,901,326,133,656,562,701,707,492,617,455,441,382,952,689,656,334,877,120,318,497,25,569,962,845,562,632,898,882,498,595,889,382,507,791,548,810,606,105,869,569,970,322,974};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {83,18,492,27,339,622,851,915,464,347,287,210,282,166,976,167,968,769,14,383,454,983,319,165,185,315,795,851,124,287,846,745,19,639,894,828,540,420,147,452,501,670,466,554,166,1,446,808,508,172};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 569;
	p4 = 185;
	p5 = 285;
	p6 = 741;
	p7 = 304;
	p8 = 296;
	p9 = 10050ll;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, p5, p6, p7, p8, true, p9) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

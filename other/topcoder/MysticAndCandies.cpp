#include <vector>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <algorithm>
#include <utility>
#include <numeric>
#include <sstream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
using namespace std;

typedef long long ll;
typedef double db;
typedef pair<int,int> pii;
typedef vector<int> vint;

#define A first
#define B second
#define MP make_pair
#define PB push_back

#define REP(i,n) for (int i = 0; i < (n); ++i)
#define REPD(i,n) for (int i = (n)-1; 0 <= i; --i)
#define FOR(i,a,b) for (int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for (int i = (a); (b) <= i; --i)
#define FORIT(it,c) for (__typeof ((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define ALL(a) (a).begin(),(a).end()
#define SZ(a) ((int)(a).size())
#define RESET(a,x) memset(a,x,sizeof(a))
#define EXIST(a,s) ((s).find(a) != (s).end())
#define MX(a,b) a = max((a),(b));
#define MN(a,b) a = min((a),(b));

/* -------------- end of azaky's template -------------- */

class MysticAndCandies {
public:
	int minBoxes(int C, int X, vector <int> low, vector <int> high) {
		int n = low.size();
		sort(ALL(low)); sort(ALL(high));
		reverse(ALL(low)); reverse(ALL(high));
		int anslow = n, clow = 0;
		for (int i = 0; i < n; ++i) {
			clow += low[i];
			if (clow >= X) {
				anslow = i + 1;
				break;
			}
		}
		int anshigh = n, chigh = 0, tothigh = 0;
		for (int i = 0; i < n; ++i) {
			tothigh += high[i];
		}
		for (int i = 0; i < n; ++i) {
			chigh += high[i];
			if (chigh + C - tothigh >= X) {
				anshigh = i + 1;
				break;
			}
		}
		return min(anslow, anshigh);
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <int> p2, vector <int> p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}";
	cout << "]" << endl;
	MysticAndCandies *obj;
	int answer;
	obj = new MysticAndCandies();
	clock_t startTime = clock();
	answer = obj->minBoxes(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	int p1;
	vector <int> p2;
	vector <int> p3;
	int p4;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 15;
	p1 = 12;
	p2 = {1,2,3,4,5};
	p3 = {1,2,3,4,5};
	p4 = 3;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 60;
	p1 = 8;
	p2 = {5,2,3};
	p3 = {49,48,47};
	p4 = 2;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 58;
	p1 = 30;
	p2 = {3,9,12,6,15};
	p3 = {8,12,20,8,15};
	p4 = 2;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = 207581165;
	p1 = 172146543;
	p2 = {4725448,2753824,6019698,4199708,4070001,3589497,5358499,3637585,5393667,2837466,2747807,2918199,3638042,5199002,3072044,3858909,3762101,3657754,3218704,3888861,3195689,4768935,3137633,4124272,4125056,6087486,3632970,3620489,2748765,5917493,3958996,3335021,3517186,5543440,2951006,3403270,3299481,3093204,4092331};
	p3 = {5702812,6805664,6823687,5337687,4286533,4999849,6567411,4563235,6618139,6260135,6249469,3821449,5963157,6385012,4255959,5786920,6112817,4103918,6371537,4231698,3409172,6806782,5623563,4511221,6407338,6491490,5209517,6076093,6530132,6111464,5833839,6253088,5595160,6236805,5772388,5285713,5617002,4650978,5234740};
	p4 = 31;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = 43873566;
	p1 = 32789748;
	p2 = {2053198,2175819,4260803,1542497,1418952,5000015,1381849,2462882,6466891,1827580,6943641,5775477};
	p3 = {2827461,3726335,5410505,4781355,4925909,5621160,7325774,5025476,7876037,8072075,6979462,6647628};
	p4 = 7;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!

#include <vector>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <algorithm>
#include <utility>
#include <numeric>
#include <sstream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
using namespace std;
#define RESET(a,x) memset(a,x,sizeof(a))

/* -------------- end of azaky's template -------------- */

class ThreeProgrammers {
public:
	string validCodeHistory(string code) {
		int na = 0, nb = 0, nc = 0, n = code.size();
		for (int i = 0; i < n; ++i) {
			if (code[i] == 'A') {
				++na;
			} else if (code[i] == 'B') {
				++nb;
			} else {
				++nc;
			}
		}
		RESET(memo, 0);
		if (calc(na, nb, nc, 0, 0)) {
			string ans = "";
			int lastB = 0, lastC = 0;
			for (int i = 0; i < n; ++i) {
				// A
				if (na > 0 && calc(na - 1, nb, nc, lastB - 1, lastC - 1)) {
					ans += 'A';
					--na;
					lastB = max(lastB - 1, 0);
					lastC = max(lastC - 1, 0);
					continue;
				}
				// B
				if (nb > 0 && lastB == 0 && calc(na, nb - 1, nc, 1, lastC - 1)) {
					ans += 'B';
					--nb;
					lastB = 1;
					lastC = max(lastC - 1, 0);
					continue;
				}
				// C
				if (nc > 0 && lastC == 0 && calc(na, nb, nc - 1, lastB - 1, 2)) {
					ans += 'C';
					--nc;
					lastB = max(lastB - 1, 0);
					lastC = 2;
					continue;
				}
			}
			return ans;
		} else {
			return "impossible";
		}
	}

private:
	char dp[51][51][51][2][3];
	char memo[51][51][51][2][3];
	
	int calc(int na, int nb, int nc, int lastB, int lastC) {
		if (na == 0 && nb == 0 && nc == 0) {
			return 1;
		}
		lastB = max(lastB, 0);
		lastC = max(lastC, 0);
		if (memo[na][nb][nc][lastB][lastC]) {
			return dp[na][nb][nc][lastB][lastC];
		}
		memo[na][nb][nc][lastB][lastC] = 1;
		// A
		if (na > 0 && calc(na - 1, nb, nc, lastB - 1, lastC - 1)) {
			return dp[na][nb][nc][lastB][lastC] = 1;
		}
		// B
		if (nb > 0 && lastB == 0 && calc(na, nb - 1, nc, 1, lastC - 1)) {
			return dp[na][nb][nc][lastB][lastC] = 1;
		}
		// C
		if (nc > 0 && lastC == 0 && calc(na, nb, nc - 1, lastB - 1, 2)) {
			return dp[na][nb][nc][lastB][lastC] = 1;
		}
		return dp[na][nb][nc][lastB][lastC] = 0;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	ThreeProgrammers *obj;
	string answer;
	obj = new ThreeProgrammers();
	clock_t startTime = clock();
	answer = obj->validCodeHistory(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	string p0;
	string p1;
	
	// ----- test 0 -----
	disabled = false;
	p0 = "CAB";
	p1 = "BCA";
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = "CBB";
	p1 = "BCB";
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = "BB";
	p1 = "impossible";
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = "BBA";
	p1 = "BAB";
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = "CAC";
	p1 = "impossible";
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = "ACAC";
	p1 = "CAAC";
	all_right = (disabled || KawigiEdit_RunTest(5, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 6 -----
	disabled = false;
	p0 = "ACABC";
	p1 = "ACABC";
	all_right = (disabled || KawigiEdit_RunTest(6, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 7 -----
	disabled = false;
	p0 = "BAABCABBCCACBAACABAABABBCCAACABCCAACCABCACACCBABAB";
	p1 = "BACBABCAACBACABCBACBACABCBACBACABCABCAACBACAACABCA";
	all_right = (disabled || KawigiEdit_RunTest(7, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!

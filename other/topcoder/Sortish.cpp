#include <vector>
#include <map>
#include <algorithm>
#include <cstdio>
#include <cstring>
#include <cstdlib>
using namespace std;

#define FORIT(it,c) for (__typeof ((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define EXIST(a,s) ((s).find(a) != (s).end())

class Sortish {
public:
	long long ways(int sortedness, vector <int> a) {
		int n = a.size();
		vector<int> missing;
		for (int i = 0; i < n; ++i) {
			if (a[i] == 0) {
				missing.push_back(i);
			}
		}
		int m = missing.size();
		int expectedInversion = n * (n - 1) / 2 - sortedness;
		if (expectedInversion < 0) {
			return 0;
		}
		
		vector<vector<int> > bit; // this will be 1-indexed
		bit.resize(n + 1);
		bit[0].resize(n + 1);
		for (int i = 1; i <= n; ++i) {
			bit[i] = bit[i - 1];
			if (a[i - 1] != 0) {
				bit[i][a[i - 1]]++;
			}
		}
		vector<int> missingValues;
		for (int i = 1; i <= n; ++i) {
			if (bit[n][i] == 0) {
				missingValues.push_back(i);
			}
		}
		for (int i = 1; i <= n; ++i) {
			for (int j = 1; j <= n; ++j) {
				bit[i][j] += bit[i][j - 1];
			}
		}
		
		int currentInversion = 0;
		for (int i = 1; i <= n; ++i) {
			if (a[i - 1] != 0) {
				currentInversion += bit[i][n] - bit[i][a[i - 1]];
			}
		}
		int remainingInversion = expectedInversion - currentInversion;
		if (remainingInversion < 0 || remainingInversion > m * n) {
			return 0;
		}
		
		vector<map<int, long long> > dp;
		dp.resize(1 << m);
		dp[0][0] = 1;
		
		for (int mask = 1; mask < (1 << m); ++mask) {
			int k = __builtin_popcount(mask);
			int pos = missing[k - 1];
			int c = 0;
			for (int i = 0; i < m; ++i) {
				if (!(mask & (1 << i))) {
					continue;
				}
				c++;
				int val = missingValues[i];
				int inv = (bit[pos][n] - bit[pos][val]) + (bit[n][val] - bit[pos][val]) + (k - c);
				//int invPrev = (bit[pos][n] - bit[pos][val]);
				//int invNext = (bit[n][val] - bit[pos][val]);
				//int invCups = (k - i - 1);
				//printf("mask = %d, i = %d, k = %d, val = %d\n\tinvPrev = %d, invNext = %d, invCups = %d\n", mask, i, k, val, invPrev, invNext, invCups);
				FORIT(it, dp[mask ^ (1 << i)]) {
					if (it->first + inv <= remainingInversion) {
						dp[mask][it->first + inv] += it->second;
					} else break;
				}
			}
		}
		return dp[(1 << m) - 1][remainingInversion];
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	/*for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";*/
	cout << "]" << endl;
	Sortish *obj;
	long long answer;
	obj = new Sortish();
	clock_t startTime = clock();
	answer = obj->ways(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}

vector<int> toArray(int* a, int n) {
	vector<int> ret;
	for (int i = 0; i < n; ++i) {
		ret.push_back(a[i]);
	}
	return ret;
}

int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	vector <int> p1;
	long long p2;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 881521;
	int a[] = {};
	p1 = toArray(a, 1874);
	p2 = 2ll;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
